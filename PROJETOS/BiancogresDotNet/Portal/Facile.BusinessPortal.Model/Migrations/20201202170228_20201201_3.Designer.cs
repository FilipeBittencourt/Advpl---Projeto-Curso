// <auto-generated />
using System;
using Facile.BusinessPortal.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Facile.BusinessPortal.Model.Migrations
{
    [DbContext(typeof(FBContext))]
    [Migration("20201202170228_20201201_3")]
    partial class _20201201_3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Facile.BusinessPortal.Model.Acao", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired();

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<long?>("UnidadeID");

                    b.HasKey("ID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("Acao");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Antecipacao", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Contato");

                    b.Property<DateTime>("DataEmissao");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<DateTime>("DataRecebimento");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<long>("EmpresaID");

                    b.Property<long>("FornecedorID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<string>("Observacao");

                    b.Property<int>("Origem");

                    b.Property<long?>("StageID");

                    b.Property<int>("Status");

                    b.Property<int>("StatusIntegracao");

                    b.Property<decimal>("Taxa");

                    b.Property<long?>("UnidadeID");

                    b.HasKey("ID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("FornecedorID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("Antecipacao");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.AntecipacaoHistorico", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AntecipacaoID");

                    b.Property<DateTime>("DataEvento");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<string>("Observacao");

                    b.Property<long?>("StageID");

                    b.Property<int>("Status");

                    b.Property<int>("StatusIntegracao");

                    b.Property<long?>("UnidadeID");

                    b.Property<long>("UsuarioID");

                    b.HasKey("ID");

                    b.HasIndex("AntecipacaoID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("UnidadeID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("AntecipacaoHistorico");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.AntecipacaoItem", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AntecipacaoID");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<long>("TituloPagarID");

                    b.Property<long?>("UnidadeID");

                    b.Property<decimal>("ValorTitulo");

                    b.Property<decimal>("ValorTituloAntecipado");

                    b.HasKey("ID");

                    b.HasIndex("AntecipacaoID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("TituloPagarID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("AntecipacaoItem");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime?>("CreateDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<DateTime?>("LastLoginDate");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Arquivo", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CedenteID");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<int?>("DirecaoArquivo");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<string>("Nome");

                    b.Property<string>("Path");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<int?>("TipoArquivo");

                    b.Property<int?>("TipoOperacao");

                    b.Property<long?>("UnidadeID");

                    b.HasKey("ID");

                    b.HasIndex("CedenteID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("Arquivo");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Atendimento", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BairroReclamante");

                    b.Property<string>("CepReclamante");

                    b.Property<string>("CidadeReclamante");

                    b.Property<string>("CodigoProduto");

                    b.Property<string>("Contato");

                    b.Property<string>("ContatoReclamante");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<DateTime?>("DataLiberacao");

                    b.Property<DateTime?>("DataMedicao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<string>("Email");

                    b.Property<long>("EmpresaID");

                    b.Property<string>("EnderecoReclamante");

                    b.Property<string>("EstadoReclamante");

                    b.Property<long>("FornecedorID");

                    b.Property<bool>("Habilitado");

                    b.Property<string>("HorarioContatoReclamante");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<string>("Item");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<string>("NomeProduto");

                    b.Property<string>("NomeReclamante");

                    b.Property<string>("Numero");

                    b.Property<string>("NumeroContrato");

                    b.Property<string>("NumeroControleParticipante");

                    b.Property<string>("Observacao");

                    b.Property<string>("ObservacaoMedicao");

                    b.Property<decimal>("QuantidadeProduto");

                    b.Property<long?>("StageID");

                    b.Property<int>("Status");

                    b.Property<int>("StatusIntegracao");

                    b.Property<string>("TelefoneReclamante");

                    b.Property<byte[]>("Termo");

                    b.Property<long?>("UnidadeID");

                    b.Property<long?>("UsuarioID");

                    b.Property<decimal>("ValorProduto");

                    b.HasKey("ID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("FornecedorID");

                    b.HasIndex("UnidadeID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("Atendimento");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.AtendimentoHistorico", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AtendimentoID");

                    b.Property<DateTime>("DataEvento");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<string>("Observacao");

                    b.Property<long?>("StageID");

                    b.Property<int>("Status");

                    b.Property<int>("StatusIntegracao");

                    b.Property<long?>("UnidadeID");

                    b.Property<long>("UsuarioID");

                    b.HasKey("ID");

                    b.HasIndex("AtendimentoID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("UnidadeID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("AtendimentoHistorico");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.AtendimentoMedicao", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Arquivo");

                    b.Property<long>("AtendimentoID");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<string>("Descricao");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<string>("Nome");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<string>("Tipo");

                    b.Property<long?>("UnidadeID");

                    b.HasKey("ID");

                    b.HasIndex("AtendimentoID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("AtendimentoMedicao");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Banco", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<string>("Nome");

                    b.Property<int>("StatusIntegracao");

                    b.HasKey("ID");

                    b.HasIndex("Codigo")
                        .IsUnique()
                        .HasFilter("[Codigo] IS NOT NULL");

                    b.ToTable("Banco");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.BancoAuth", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CedenteID");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<long>("EmpresaID");

                    b.Property<string>("EndPoint");

                    b.Property<bool>("Habilitado");

                    b.Property<bool>("Homologacao");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<int>("MetodoBanco");

                    b.Property<string>("Password");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<long?>("UnidadeID");

                    b.Property<string>("Username");

                    b.HasKey("ID");

                    b.HasIndex("CedenteID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("BancoAuth");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Boleto", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Aceite");

                    b.Property<long>("BancoID");

                    b.Property<string>("CampoLivre");

                    b.Property<string>("Carteira");

                    b.Property<long>("CedenteID");

                    b.Property<string>("CodigoBanco")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<string>("CodigoDeBarras");

                    b.Property<string>("CodigoInstrucao1");

                    b.Property<string>("CodigoInstrucao2");

                    b.Property<int>("CodigoMoeda");

                    b.Property<int?>("CodigoProtesto");

                    b.Property<DateTime?>("DataDesconto")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DataEmissao")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<DateTime?>("DataJuros")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("DataMulta")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("DataProcessamento")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("DataRecebimento")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DataVencimento")
                        .HasColumnType("Date");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<int?>("DiasProtesto");

                    b.Property<string>("DigitoVerificador");

                    b.Property<bool>("EmailEnviado");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("EnviarEmailCedente");

                    b.Property<bool>("EnviarEmailSacado");

                    b.Property<int?>("EspecieDocumento");

                    b.Property<string>("EspecieMoeda");

                    b.Property<long>("FatorVencimento");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("LinhaDigitavel");

                    b.Property<long?>("LoteID");

                    b.Property<string>("MensagemArquivoRemessa");

                    b.Property<string>("MensagemInstrucoesCaixa");

                    b.Property<string>("MensagemRetorno");

                    b.Property<string>("MensagemRetornoAPI");

                    b.Property<string>("NossoNumero")
                        .IsRequired();

                    b.Property<string>("NossoNumeroDV");

                    b.Property<string>("NossoNumeroFormatado");

                    b.Property<string>("NumeroControleParticipante");

                    b.Property<string>("NumeroDocumento");

                    b.Property<Guid>("OID");

                    b.Property<decimal?>("PercentualJurosDia");

                    b.Property<decimal?>("PercentualMulta");

                    b.Property<int>("QuantidadeMoeda");

                    b.Property<bool>("RegistroOnline");

                    b.Property<long>("SacadoID");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusAPIRegistro");

                    b.Property<int>("StatusIntegracao");

                    b.Property<int?>("TipoCarteira");

                    b.Property<long?>("UnidadeID");

                    b.Property<string>("UsoBanco");

                    b.Property<decimal?>("ValorDesconto");

                    b.Property<decimal?>("ValorJurosDia");

                    b.Property<string>("ValorMoeda");

                    b.Property<decimal?>("ValorMulta");

                    b.Property<decimal?>("ValorOutrosAcrescimos");

                    b.Property<decimal>("ValorTitulo");

                    b.Property<string>("VariacaoCarteira");

                    b.HasKey("ID");

                    b.HasIndex("BancoID");

                    b.HasIndex("CedenteID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("LoteID");

                    b.HasIndex("SacadoID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("Boleto");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.BoletoEvento", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BoletoID");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<int>("TipoBoletoEvento");

                    b.Property<long?>("UnidadeID");

                    b.HasKey("ID");

                    b.HasIndex("BoletoID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("BoletoEvento");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Cedente", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bairro");

                    b.Property<bool>("BoletoSenha");

                    b.Property<bool>("BoletoZip");

                    b.Property<string>("CEP")
                        .IsRequired();

                    b.Property<string>("CPFCNPJ")
                        .IsRequired();

                    b.Property<string>("Cidade")
                        .IsRequired();

                    b.Property<string>("Codigo")
                        .IsRequired();

                    b.Property<string>("CodigoCedenteBanco");

                    b.Property<string>("Complemento");

                    b.Property<long>("ContaBancariaID");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<bool>("DownloadRetorno");

                    b.Property<string>("Email");

                    b.Property<string>("EmailHomologacao");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("EnviaBoletoPDF");

                    b.Property<bool>("Habilitado");

                    b.Property<bool>("Homologacao");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<string>("IdUnicoCedenteBancoRetorno");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("Logradouro")
                        .IsRequired();

                    b.Property<string>("MensagemRetorno");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<string>("NomeBasePdfBoleto");

                    b.Property<string>("Numero");

                    b.Property<string>("RegiaoCobrancaEmail");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<string>("TelCobrancaEmail");

                    b.Property<string>("TelCobrancaExtEmail");

                    b.Property<int?>("TipoGeracaoSenha");

                    b.Property<string>("UF")
                        .IsRequired();

                    b.Property<long?>("UnidadeID");

                    b.HasKey("ID");

                    b.HasIndex("ContaBancariaID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("UnidadeID");

                    b.HasIndex("CPFCNPJ", "Codigo")
                        .IsUnique();

                    b.ToTable("Cedente");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Compra.Servico.Aplicacao", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<string>("Descricao");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<long?>("UnidadeID");

                    b.HasKey("ID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("Aplicacao");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Compra.Servico.Armazem", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<string>("Descricao");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<long?>("UnidadeID");

                    b.HasKey("ID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("Armazem");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Compra.Servico.ClasseValor", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CentroCusto");

                    b.Property<string>("Codigo");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<string>("Descricao");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<long?>("UnidadeID");

                    b.HasKey("ID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("ClasseValor");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Compra.Servico.ContaContabil", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<string>("Descricao");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<long?>("UnidadeID");

                    b.HasKey("ID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("ContaContabil");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Compra.Servico.Driver", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ClasseValorID");

                    b.Property<string>("Codigo");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<string>("Descricao");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<long?>("UnidadeID");

                    b.HasKey("ID");

                    b.HasIndex("ClasseValorID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("Driver");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Compra.Servico.ItemConta", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<string>("Descricao");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<long?>("UnidadeID");

                    b.HasKey("ID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("ItemConta");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Compra.Servico.PrioridadeServico", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<string>("Descricao");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<long?>("UnidadeID");

                    b.HasKey("ID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("PrioridadeServico");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Compra.Servico.Produto", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<string>("Descricao");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<long?>("UnidadeID");

                    b.Property<string>("UnidadeMedida");

                    b.HasKey("ID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("Produto");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Compra.Servico.SetorAprovacao", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<string>("Descricao");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<long?>("UnidadeID");

                    b.HasKey("ID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("SetorAprovacao");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Compra.Servico.SolicitacaoServico", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("ArquivoAnexo");

                    b.Property<long>("ClasseValorID");

                    b.Property<DateTime>("DataEmissao");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<DateTime?>("DataHoraVisita");

                    b.Property<DateTime>("DataNecessidade");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<string>("DescricaoAnexo");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<long?>("ItemContaID");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<string>("NomeAnexo");

                    b.Property<string>("Numero");

                    b.Property<long>("PrioridadeServicoID");

                    b.Property<long?>("StageID");

                    b.Property<int>("Status");

                    b.Property<int>("StatusIntegracao");

                    b.Property<long?>("SubItemContaID");

                    b.Property<string>("TipoAnexo");

                    b.Property<int>("TipoServico");

                    b.Property<int>("TipoVisita");

                    b.Property<long?>("UnidadeID");

                    b.HasKey("ID");

                    b.HasIndex("ClasseValorID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("ItemContaID");

                    b.HasIndex("PrioridadeServicoID");

                    b.HasIndex("SubItemContaID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("SolicitacaoServico");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Compra.Servico.SolicitacaoServicoFornecedor", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AgendarVisita");

                    b.Property<bool>("Aprovado");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<DateTime?>("DataHoraVisita");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<long>("EmpresaID");

                    b.Property<long>("FornecedorID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<long>("SolicitacaoServicoID");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<long?>("UnidadeID");

                    b.HasKey("ID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("FornecedorID");

                    b.HasIndex("SolicitacaoServicoID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("SolicitacaoServicoFornecedor");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Compra.Servico.SolicitacaoServicoFornecedorVisitante", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CPF");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<string>("Nome");

                    b.Property<long>("SolicitacaoServicoFornecedorID");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<long?>("UnidadeID");

                    b.HasKey("ID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("SolicitacaoServicoFornecedorID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("SolicitacaoServicoFornecedorVisitante");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Compra.Servico.SolicitacaoServicoItem", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AplicacaoID");

                    b.Property<long>("ArmazemID");

                    b.Property<long>("ContaContabilID");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<string>("Descricao");

                    b.Property<long>("DriverID");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<long>("ProdutoID");

                    b.Property<decimal>("Quantidade");

                    b.Property<long>("SolicitacaoServicoID");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<long>("TAGID");

                    b.Property<long?>("UnidadeID");

                    b.Property<string>("UnidadeMedicao");

                    b.Property<string>("UnidadeMedida");

                    b.HasKey("ID");

                    b.HasIndex("AplicacaoID");

                    b.HasIndex("ArmazemID");

                    b.HasIndex("ContaContabilID");

                    b.HasIndex("DriverID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("ProdutoID");

                    b.HasIndex("SolicitacaoServicoID");

                    b.HasIndex("TAGID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("SolicitacaoServicoItem");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Compra.Servico.SolicitacaoServicoItemCotacao", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AtendeItem");

                    b.Property<int>("AtendeTotalmente");

                    b.Property<string>("CodigoProduto");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<long>("EmpresaID");

                    b.Property<long>("FornecedorID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<decimal>("IPI");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("Marca");

                    b.Property<string>("MensagemRetorno");

                    b.Property<string>("Moeda");

                    b.Property<string>("Observacao");

                    b.Property<int>("PrazoEntrega");

                    b.Property<decimal>("Preco");

                    b.Property<string>("Revisao");

                    b.Property<long>("SolicitacaoServicoItemID");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<long?>("UnidadeID");

                    b.Property<decimal>("ValorSubstituicao");

                    b.HasKey("ID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("FornecedorID");

                    b.HasIndex("SolicitacaoServicoItemID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("SolicitacaoServicoItemCotacao");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Compra.Servico.SubItemConta", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ClasseValorID");

                    b.Property<string>("Codigo");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<string>("Descricao");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<long>("ItemContaID");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<long?>("UnidadeID");

                    b.HasKey("ID");

                    b.HasIndex("ClasseValorID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("ItemContaID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("SubItemConta");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Compra.Servico.TAG", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ClasseValorID");

                    b.Property<string>("Codigo");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<string>("Descricao");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<long?>("UnidadeID");

                    b.HasKey("ID");

                    b.HasIndex("ClasseValorID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("TAG");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.ConfiguracaoArquivo", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CedenteID");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<int>("DirecaoArquivo");

                    b.Property<long>("EmpresaID");

                    b.Property<string>("Extensao");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<string>("NomeBase");

                    b.Property<string>("NomeDiretorio")
                        .IsRequired();

                    b.Property<int>("NumeroSequencial");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<int>("TipoArquivo");

                    b.Property<int>("TipoOperacao");

                    b.Property<long?>("UnidadeID");

                    b.HasKey("ID");

                    b.HasIndex("CedenteID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("ConfiguracaoArquivo");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.ContaBancaria", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AceitePadrao");

                    b.Property<string>("Agencia")
                        .IsRequired();

                    b.Property<long>("BancoID");

                    b.Property<string>("CarteiraPadrao");

                    b.Property<string>("Conta")
                        .IsRequired();

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<string>("DigitoAgencia");

                    b.Property<string>("DigitoConta")
                        .IsRequired();

                    b.Property<long>("EmpresaID");

                    b.Property<int?>("EspecieDocumento");

                    b.Property<string>("EspecieMoeda");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<int?>("TipoCarteiraPadrao");

                    b.Property<int?>("TipoFormaCadastramento");

                    b.Property<int?>("TipoImpressaoBoleto");

                    b.Property<long?>("UnidadeID");

                    b.Property<string>("VariacaoCarteiraPadrao");

                    b.HasKey("ID");

                    b.HasIndex("BancoID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("ContaBancaria");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.DocumentoPagar", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataEmissao")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<long>("EmpresaID");

                    b.Property<long>("FornecedorID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<string>("NumeroDocumento")
                        .IsRequired();

                    b.Property<Guid>("OID");

                    b.Property<string>("Serie");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<long?>("UnidadeID");

                    b.HasKey("ID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("FornecedorID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("DocumentoPagar");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Empresa", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("Client_Key");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<string>("DiretorioBaseArquivo");

                    b.Property<string>("EmailHomologacao");

                    b.Property<bool>("Homologacao");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<string>("NomeEmpresa")
                        .IsRequired();

                    b.Property<int>("StatusIntegracao");

                    b.HasKey("ID");

                    b.HasIndex("Client_Key")
                        .IsUnique();

                    b.ToTable("Empresa");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Fornecedor", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bairro");

                    b.Property<string>("CEP")
                        .IsRequired();

                    b.Property<string>("CPFCNPJ")
                        .IsRequired();

                    b.Property<string>("Cidade")
                        .IsRequired();

                    b.Property<string>("CodigoERP");

                    b.Property<string>("Complemento");

                    b.Property<string>("Contato");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<string>("Email");

                    b.Property<string>("EmailWorkflow");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("Logradouro")
                        .IsRequired();

                    b.Property<string>("MensagemRetorno");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<string>("Numero");

                    b.Property<string>("Observacoes");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<string>("Telefone");

                    b.Property<int>("TipoAntecipacao");

                    b.Property<string>("UF")
                        .IsRequired();

                    b.Property<long?>("UnidadeID");

                    b.HasKey("ID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("Fornecedor");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.GrupoSacado", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodigoUnico")
                        .IsRequired();

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<string>("Nome");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<long?>("UnidadeID");

                    b.HasKey("ID");

                    b.HasIndex("EmpresaID")
                        .IsUnique();

                    b.HasIndex("UnidadeID");

                    b.ToTable("GrupoSacado");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.GrupoUsuario", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<string>("Nome");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<int>("Tipo");

                    b.Property<long?>("UnidadeID");

                    b.HasKey("ID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("GrupoUsuario");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.LayoutEmail", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("BodyHtml");

                    b.Property<long?>("CedenteID");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("GeraDivSocial");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<byte[]>("LinhasTabela01Html");

                    b.Property<string>("LinkFacebook");

                    b.Property<string>("LinkFaleConosco");

                    b.Property<string>("LinkImagem01");

                    b.Property<string>("LinkImagem02");

                    b.Property<string>("LinkImagem03");

                    b.Property<string>("LinkInstagram");

                    b.Property<string>("LinkPinterest");

                    b.Property<string>("LinkYoutube");

                    b.Property<string>("MensagemRetorno");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<int>("TipoEmail");

                    b.Property<string>("Titulo");

                    b.Property<long?>("UnidadeID");

                    b.HasKey("ID");

                    b.HasIndex("CedenteID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("LayoutEmail");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.LogApi", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action");

                    b.Property<long?>("BoletoID");

                    b.Property<long?>("CedenteID");

                    b.Property<string>("Controller");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<long?>("EmpresaID");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<string>("MensagemRetornoErro");

                    b.Property<string>("NossoNumero");

                    b.Property<byte[]>("RequestBody");

                    b.Property<string>("RequestIP");

                    b.Property<string>("RequestMethod");

                    b.Property<string>("RequestUrl");

                    b.Property<byte[]>("ResponseBody");

                    b.Property<int>("StatusIntegracao");

                    b.Property<long?>("UnidadeID");

                    b.Property<string>("Usuario");

                    b.HasKey("ID");

                    b.ToTable("LogApi");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.LogApiHistorico", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action");

                    b.Property<long?>("BoletoID");

                    b.Property<long?>("CedenteID");

                    b.Property<string>("Controller");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<long?>("EmpresaID");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<string>("NossoNumero");

                    b.Property<byte[]>("RequestBody");

                    b.Property<string>("RequestBodyOld");

                    b.Property<string>("RequestIP");

                    b.Property<string>("RequestMethod");

                    b.Property<string>("RequestUrl");

                    b.Property<byte[]>("ResponseBody");

                    b.Property<string>("ResponseBodyOld");

                    b.Property<int>("StatusIntegracao");

                    b.Property<long?>("UnidadeID");

                    b.Property<string>("Usuario");

                    b.HasKey("ID");

                    b.ToTable("LogApiHistorico");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Lote", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("GerarArquivoRemessa");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<string>("NomeArquivo");

                    b.Property<string>("Numero")
                        .IsRequired();

                    b.Property<int>("NumeroSequencialRemessa");

                    b.Property<int>("Operacao");

                    b.Property<bool>("Parcial");

                    b.Property<bool>("ProcessaRetornoAutomatico");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<int>("TipoArquivo");

                    b.Property<long?>("UnidadeID");

                    b.HasKey("ID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("Lote");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Mail", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<string>("EmailCC");

                    b.Property<string>("EmailCCO");

                    b.Property<int>("EmailModulo");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("Habilitado");

                    b.Property<string>("Host");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<string>("Password");

                    b.Property<int>("Port");

                    b.Property<bool>("SSL");

                    b.Property<string>("SenderDisplayName");

                    b.Property<string>("SenderEmail");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<long?>("UnidadeID");

                    b.Property<string>("User");

                    b.HasKey("ID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("Mail");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Menu", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClasseIcone");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<string>("Descricao")
                        .IsRequired();

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<long?>("MenuSuperiorID");

                    b.Property<long>("ModuloID");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<int>("Ordem");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<long?>("UnidadeID");

                    b.HasKey("ID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("MenuSuperiorID");

                    b.HasIndex("ModuloID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.MenuAcao", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AcaoID");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<long>("MenuID");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<long?>("UnidadeID");

                    b.HasKey("ID");

                    b.HasIndex("AcaoID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("MenuID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("MenuAcao");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Modulo", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClasseIcone");

                    b.Property<bool>("Customizavel");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<int?>("TipoUsuario");

                    b.Property<string>("URL")
                        .IsRequired();

                    b.Property<long?>("UnidadeID");

                    b.HasKey("ID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("Modulo");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Parametro", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Chave")
                        .IsRequired();

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<string>("Tipo")
                        .IsRequired();

                    b.Property<long?>("UnidadeID");

                    b.Property<string>("Valor")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("Parametro");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.PerfilEmpresa", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<string>("Descricao_Reduzida_Portal");

                    b.Property<string>("EmailContato");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemBoasVindas");

                    b.Property<string>("MensagemRetorno");

                    b.Property<string>("Path_Imagem_Background");

                    b.Property<string>("Site_Root_Path");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<string>("TelefoneContato");

                    b.Property<long?>("ThemeID");

                    b.Property<string>("URLAcesso");

                    b.Property<long?>("UnidadeID");

                    b.Property<bool>("UseCustomMailServer");

                    b.HasKey("ID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("ThemeID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("PerfilEmpresa");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Permissao", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AcaoID");

                    b.Property<string>("Acesso");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<long>("EmpresaID");

                    b.Property<long>("GrupoUsuarioID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<long>("MenuID");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<long?>("UnidadeID");

                    b.HasKey("ID");

                    b.HasIndex("AcaoID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("GrupoUsuarioID");

                    b.HasIndex("MenuID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("Permissao");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Registro", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ArquivoID");

                    b.Property<string>("AutenticacaoBancaria");

                    b.Property<string>("AutorizacaoDebito");

                    b.Property<string>("Categoria");

                    b.Property<string>("CodigoBarras");

                    b.Property<string>("CodigoCamaraCentralizadora");

                    b.Property<string>("CodigoHistorico");

                    b.Property<string>("CodigoOcorrencia");

                    b.Property<string>("CodigoOcorrenciaAuxiliar");

                    b.Property<string>("CodigoReceita");

                    b.Property<string>("CodigoUF");

                    b.Property<string>("Complemento");

                    b.Property<DateTime?>("DataAgendamento");

                    b.Property<DateTime?>("DataContabil");

                    b.Property<DateTime?>("DataCredito");

                    b.Property<DateTime?>("DataEmissao");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<DateTime?>("DataLancamento");

                    b.Property<DateTime?>("DataProcessamento");

                    b.Property<DateTime?>("DataVencimento");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<string>("DescricaoHistorico");

                    b.Property<string>("DescricaoOcorrencia");

                    b.Property<long>("EmpresaID");

                    b.Property<int>("Especie");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<string>("IdentificadorGuia");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<string>("Natureza");

                    b.Property<string>("NossoNumero");

                    b.Property<string>("NumeroAgendamentoRemessa");

                    b.Property<string>("NumeroControleParticipante");

                    b.Property<string>("NumeroDocumento");

                    b.Property<string>("OcorrenciasRetorno");

                    b.Property<string>("PeriodoReferencia");

                    b.Property<string>("Pessoa_Agencia");

                    b.Property<string>("Pessoa_CPFCNPJ");

                    b.Property<string>("Pessoa_CodigoBanco");

                    b.Property<string>("Pessoa_Conta");

                    b.Property<string>("Pessoa_DigitoAgencia");

                    b.Property<string>("Pessoa_DigitoConta");

                    b.Property<string>("Pessoa_Nome");

                    b.Property<string>("Pessoa_SegundoDigitoConta");

                    b.Property<string>("RegistroArquivoRetorno");

                    b.Property<string>("Segmento");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<string>("TipoComplemento");

                    b.Property<string>("TipoLancamento");

                    b.Property<string>("TipoRegistro");

                    b.Property<Guid?>("TituloOID");

                    b.Property<long?>("UnidadeID");

                    b.Property<decimal?>("ValorAbatimento");

                    b.Property<decimal?>("ValorAtualizacaoMonetaria");

                    b.Property<decimal?>("ValorDesconto");

                    b.Property<decimal?>("ValorIOF");

                    b.Property<decimal?>("ValorJuros");

                    b.Property<decimal?>("ValorJurosDia");

                    b.Property<decimal?>("ValorMulta");

                    b.Property<decimal?>("ValorOutrasDespesas");

                    b.Property<decimal?>("ValorOutrosCreditos");

                    b.Property<decimal?>("ValorPago");

                    b.Property<decimal?>("ValorTarifas");

                    b.Property<decimal?>("ValorTitulo");

                    b.Property<decimal?>("ValorTotal");

                    b.HasKey("ID");

                    b.HasIndex("ArquivoID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("Registro");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Sacado", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bairro");

                    b.Property<string>("CEP")
                        .IsRequired();

                    b.Property<string>("CPFCNPJ")
                        .IsRequired();

                    b.Property<string>("Cidade")
                        .IsRequired();

                    b.Property<string>("CodigoERP");

                    b.Property<string>("Complemento");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<string>("Email");

                    b.Property<string>("EmailWorkflow");

                    b.Property<long>("EmpresaID");

                    b.Property<long?>("GrupoSacadoID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("Logradouro")
                        .IsRequired();

                    b.Property<string>("MensagemRetorno");

                    b.Property<bool>("MestreGrupo");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<string>("Numero");

                    b.Property<string>("Observacoes");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<string>("UF")
                        .IsRequired();

                    b.Property<long?>("UnidadeID");

                    b.HasKey("ID");

                    b.HasIndex("GrupoSacadoID");

                    b.HasIndex("UnidadeID");

                    b.HasIndex("EmpresaID", "UnidadeID", "CPFCNPJ")
                        .IsUnique()
                        .HasFilter("[UnidadeID] IS NOT NULL");

                    b.ToTable("Sacado");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.TaxaAntecipacao", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<long>("EmpresaID");

                    b.Property<long?>("FornecedorID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<decimal?>("Multiplicador");

                    b.Property<decimal>("PercentualPorDia");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<int?>("TipoTaxa");

                    b.Property<long?>("UnidadeID");

                    b.HasKey("ID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("FornecedorID")
                        .IsUnique()
                        .HasFilter("[FornecedorID] IS NOT NULL");

                    b.HasIndex("UnidadeID");

                    b.ToTable("TaxaAntecipacao");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Theme", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CssPath");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<int>("StatusIntegracao");

                    b.Property<string>("ThemeOptions");

                    b.HasKey("ID");

                    b.ToTable("Theme");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.TituloPagar", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DataBaixa");

                    b.Property<DateTime>("DataEmissao")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<DateTime?>("DataPagamento")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DataVencimento")
                        .HasColumnType("Date");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<long>("DocumentoPagarID");

                    b.Property<long>("EmpresaID");

                    b.Property<long?>("FaturaPagamentoID");

                    b.Property<int?>("FormaPagamento");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<string>("NumeroControleParticipante");

                    b.Property<string>("NumeroDocumento")
                        .IsRequired();

                    b.Property<Guid>("OID");

                    b.Property<string>("Parcela");

                    b.Property<decimal>("Saldo");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<long?>("UnidadeID");

                    b.Property<decimal>("ValorTitulo");

                    b.HasKey("ID");

                    b.HasIndex("DocumentoPagarID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("FaturaPagamentoID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("TituloPagar");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Token", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Chave")
                        .IsRequired();

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<DateTime>("DataHoraVencimento");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<int>("StatusIntegracao");

                    b.Property<int>("TipoToken");

                    b.Property<long>("UsuarioID");

                    b.HasKey("ID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("Token");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Unidade", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apelido");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(14);

                    b.Property<string>("Codigo")
                        .IsRequired();

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<string>("Secret_Key");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<long?>("UnidadeID");

                    b.HasKey("ID");

                    b.HasIndex("CNPJ")
                        .IsUnique();

                    b.HasIndex("EmpresaID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("Unidade");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Usuario", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<string>("Email");

                    b.Property<long>("EmpresaID");

                    b.Property<long>("GrupoUsuarioID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<string>("Nome");

                    b.Property<string>("Senha");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<int>("Tipo");

                    b.Property<string>("TokenConfirm");

                    b.Property<DateTime?>("TokenValid");

                    b.Property<DateTime?>("UltimoAcesso");

                    b.Property<long?>("UnidadeID");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("GrupoUsuarioID");

                    b.HasIndex("UnidadeID");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.UsuarioCliente", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<long>("EmpresaID");

                    b.Property<long?>("GrupoSacadoID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<long>("SacadoID");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<long?>("UnidadeID");

                    b.Property<long>("UsuarioID");

                    b.HasKey("ID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("GrupoSacadoID");

                    b.HasIndex("SacadoID");

                    b.HasIndex("UnidadeID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("UsuarioSacado");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.UsuarioFornecedor", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<long>("EmpresaID");

                    b.Property<long>("FornecedorID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<long?>("UnidadeID");

                    b.Property<long>("UsuarioID");

                    b.HasKey("ID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("FornecedorID");

                    b.HasIndex("UnidadeID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("UsuarioFornecedor");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.UsuarioGrupo", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<long>("EmpresaID");

                    b.Property<long>("GrupoUsuarioID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<long?>("UnidadeID");

                    b.Property<long>("UsuarioID");

                    b.HasKey("ID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("GrupoUsuarioID");

                    b.HasIndex("UnidadeID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("UsuarioGrupo");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.UsuarioPessoa", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DataHoraIntegracao");

                    b.Property<bool>("Deletado");

                    b.Property<long>("DeleteID");

                    b.Property<long>("EmpresaID");

                    b.Property<bool>("Habilitado");

                    b.Property<Guid?>("IDProcesso");

                    b.Property<DateTime?>("InsertDate");

                    b.Property<string>("InsertUser");

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUser");

                    b.Property<string>("MensagemRetorno");

                    b.Property<long>("PessoaID");

                    b.Property<long?>("StageID");

                    b.Property<int>("StatusIntegracao");

                    b.Property<int>("Tipo");

                    b.Property<long?>("UnidadeID");

                    b.Property<long>("UsuarioID");

                    b.HasKey("ID");

                    b.HasIndex("EmpresaID");

                    b.HasIndex("UnidadeID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("UsuarioPessoa");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Acao", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Antecipacao", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.AntecipacaoHistorico", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Antecipacao", "Antecipacao")
                        .WithMany("AntecipacaoHistorico")
                        .HasForeignKey("AntecipacaoID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.AntecipacaoItem", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Antecipacao", "Antecipacao")
                        .WithMany("AntecipacaoItem")
                        .HasForeignKey("AntecipacaoID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.TituloPagar", "TituloPagar")
                        .WithMany()
                        .HasForeignKey("TituloPagarID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Arquivo", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Cedente", "Cedente")
                        .WithMany()
                        .HasForeignKey("CedenteID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Atendimento", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.AtendimentoHistorico", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Atendimento", "Atendimento")
                        .WithMany()
                        .HasForeignKey("AtendimentoID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.AtendimentoMedicao", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Atendimento", "Atendimento")
                        .WithMany("AtendimentoMedicao")
                        .HasForeignKey("AtendimentoID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.BancoAuth", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Cedente", "Cedente")
                        .WithMany()
                        .HasForeignKey("CedenteID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Boleto", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Banco", "Banco")
                        .WithMany()
                        .HasForeignKey("BancoID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Cedente", "Cedente")
                        .WithMany()
                        .HasForeignKey("CedenteID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Lote", "Lote")
                        .WithMany("Boletos")
                        .HasForeignKey("LoteID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Sacado", "Sacado")
                        .WithMany()
                        .HasForeignKey("SacadoID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.BoletoEvento", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Boleto", "Boleto")
                        .WithMany()
                        .HasForeignKey("BoletoID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Cedente", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.ContaBancaria", "ContaBancaria")
                        .WithMany()
                        .HasForeignKey("ContaBancariaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Compra.Servico.Aplicacao", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Compra.Servico.Armazem", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Compra.Servico.ClasseValor", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Compra.Servico.ContaContabil", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Compra.Servico.Driver", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Compra.Servico.ClasseValor", "ClasseValor")
                        .WithMany()
                        .HasForeignKey("ClasseValorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Compra.Servico.ItemConta", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Compra.Servico.PrioridadeServico", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Compra.Servico.Produto", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Compra.Servico.SetorAprovacao", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Compra.Servico.SolicitacaoServico", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Compra.Servico.ClasseValor", "ClasseValor")
                        .WithMany()
                        .HasForeignKey("ClasseValorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Compra.Servico.ItemConta", "ItemConta")
                        .WithMany()
                        .HasForeignKey("ItemContaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Compra.Servico.PrioridadeServico", "PrioridadeServico")
                        .WithMany()
                        .HasForeignKey("PrioridadeServicoID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Compra.Servico.SubItemConta", "SubItemConta")
                        .WithMany()
                        .HasForeignKey("SubItemContaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Compra.Servico.SolicitacaoServicoFornecedor", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Compra.Servico.SolicitacaoServico", "SolicitacaoServico")
                        .WithMany("SolicitacaoServicoFornecedor")
                        .HasForeignKey("SolicitacaoServicoID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Compra.Servico.SolicitacaoServicoFornecedorVisitante", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Compra.Servico.SolicitacaoServicoFornecedor", "SolicitacaoServicoFornecedor")
                        .WithMany()
                        .HasForeignKey("SolicitacaoServicoFornecedorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Compra.Servico.SolicitacaoServicoItem", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Compra.Servico.Aplicacao", "Aplicacao")
                        .WithMany()
                        .HasForeignKey("AplicacaoID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Compra.Servico.Armazem", "Armazem")
                        .WithMany()
                        .HasForeignKey("ArmazemID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Compra.Servico.ContaContabil", "ContaContabil")
                        .WithMany()
                        .HasForeignKey("ContaContabilID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Compra.Servico.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Compra.Servico.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Compra.Servico.SolicitacaoServico", "SolicitacaoServico")
                        .WithMany("SolicitacaoServicoItem")
                        .HasForeignKey("SolicitacaoServicoID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Compra.Servico.TAG", "TAG")
                        .WithMany()
                        .HasForeignKey("TAGID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Compra.Servico.SolicitacaoServicoItemCotacao", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Compra.Servico.SolicitacaoServicoItem", "SolicitacaoServicoItem")
                        .WithMany("SolicitacaoServicoItemCotacao")
                        .HasForeignKey("SolicitacaoServicoItemID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Compra.Servico.SubItemConta", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Compra.Servico.ClasseValor", "ClasseValor")
                        .WithMany()
                        .HasForeignKey("ClasseValorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Compra.Servico.ItemConta", "ItemConta")
                        .WithMany()
                        .HasForeignKey("ItemContaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Compra.Servico.TAG", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Compra.Servico.ClasseValor", "ClasseValor")
                        .WithMany()
                        .HasForeignKey("ClasseValorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.ConfiguracaoArquivo", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Cedente", "Cedente")
                        .WithMany("ConfiguracoesArquivos")
                        .HasForeignKey("CedenteID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.ContaBancaria", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Banco", "Banco")
                        .WithMany()
                        .HasForeignKey("BancoID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.DocumentoPagar", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Fornecedor", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.GrupoSacado", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithOne()
                        .HasForeignKey("Facile.BusinessPortal.Model.GrupoSacado", "EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.GrupoUsuario", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.LayoutEmail", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Cedente", "Cedente")
                        .WithMany()
                        .HasForeignKey("CedenteID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Lote", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Mail", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Menu", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Menu", "MenuSuperior")
                        .WithMany()
                        .HasForeignKey("MenuSuperiorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Modulo", "Modulo")
                        .WithMany()
                        .HasForeignKey("ModuloID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.MenuAcao", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Acao", "Acao")
                        .WithMany()
                        .HasForeignKey("AcaoID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Menu", "Menu")
                        .WithMany("MenuAcao")
                        .HasForeignKey("MenuID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Modulo", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Parametro", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.PerfilEmpresa", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Permissao", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Acao", "Acao")
                        .WithMany()
                        .HasForeignKey("AcaoID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.GrupoUsuario", "GrupoUsuario")
                        .WithMany("Permissao")
                        .HasForeignKey("GrupoUsuarioID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Registro", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Arquivo", "Arquivo")
                        .WithMany("Registros")
                        .HasForeignKey("ArquivoID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Sacado", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.GrupoSacado", "Grupo")
                        .WithMany("Sacados")
                        .HasForeignKey("GrupoSacadoID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.TaxaAntecipacao", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Fornecedor", "Fornecedor")
                        .WithOne("TaxaAntecipacao")
                        .HasForeignKey("Facile.BusinessPortal.Model.TaxaAntecipacao", "FornecedorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.TituloPagar", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.DocumentoPagar", "DocumentoPagar")
                        .WithMany()
                        .HasForeignKey("DocumentoPagarID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.DocumentoPagar", "FaturaPagamento")
                        .WithMany()
                        .HasForeignKey("FaturaPagamentoID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Token", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Unidade", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.Usuario", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.GrupoUsuario", "GrupoUsuario")
                        .WithMany()
                        .HasForeignKey("GrupoUsuarioID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.UsuarioCliente", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.GrupoSacado", "Grupo")
                        .WithMany()
                        .HasForeignKey("GrupoSacadoID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Sacado", "Sacado")
                        .WithMany()
                        .HasForeignKey("SacadoID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.UsuarioFornecedor", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.UsuarioGrupo", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.GrupoUsuario", "GrupoUsuario")
                        .WithMany()
                        .HasForeignKey("GrupoUsuarioID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Facile.BusinessPortal.Model.UsuarioPessoa", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Facile.BusinessPortal.Model.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Facile.BusinessPortal.Model.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
