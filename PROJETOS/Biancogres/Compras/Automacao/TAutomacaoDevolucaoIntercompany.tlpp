#include "totvs.ch"
#include "fileio.ch"
#include "rptdef.ch"
#include "apwizard.ch"
#include "parmtype.ch"
#include "topconn.ch"
#include "fwprintsetup.ch"

static __cCRLF as character

#define __AUT_DEV_PATH__ "\P10\AUTOMACAO\DEVOLUCAO\"

/*/{Protheus.doc} TAutomacaoDevolucaoIntercompany
@author Wlysses Cerqueira (Facile)
@since 09/09/2020
@project Automação Entrada
@version 1.0
@description
@type function
/*/

function U_JOBDEVINTE()

    local oTAutDevIntCom as object

    DEFAULT __cCRLF:=CRLF

    oTAutDevIntCom:=TAutomacaoDevolucaoIntercompany():New(.F.)

    oTAutDevIntCom:PercorreFiliais()

    oTAutDevIntCom:=FreeObj(oTAutDevIntCom)

    return(nil)

function U_EJOBDEVINTE(aEmpFil)

    local aFiliais			as array

    local cEmp			 	as character
    local cFil      	 	as character

    local oTAutDevIntCom	as object

    DEFAULT __cCRLF:=CRLF

    cEmp:=aEmpFil[1]
    cFil:=aEmpFil[2]

    RpcSetEnv(cEmp,cFil,nil,"FAT")

    oTAutDevIntCom:=TAutomacaoDevolucaoIntercompany():New(.T.)

    oTAutDevIntCom:AddLog("Iniciando processo")

    oTAutDevIntCom:ProcessaSaida()

    oTAutDevIntCom:ProcessaDevolucao()

    oTAutDevIntCom:FaturarPedido()

    aFiliais:=aEmpFil[3]
    oTAutDevIntCom:ProcessaEntrada(aFiliais,.F.)

    aFiliais:=aEmpFil[3]
    oTAutDevIntCom:ProcessaEntrada(aFiliais,.T.)

    oTAutDevIntCom:AddLog("Finalizando processo")

    oTAutDevIntCom:=FreeObj(oTAutDevIntCom)

    RpcClearEnv()

    return(nil)

class TAutomacaoDevolucaoIntercompany

    Data aErros			as array
    Data aNotas			as array
    Data aFiliais		as array
    Data aDocEntrada    as array

    Data cSerieNF		as character
    Data cEmailNfDev	as character
    Data cEmailTransf   as character

    public method New(lJob) Constructor
    public method Load()
    public method LoadFiliais()
    public method PercorreFiliais()
    public method ExisteFuncaoEmProcessamento(cFuncProc,cEmp,cFil)
    public method AddLog(cMsg)
    public method AddErro(nRecno,cError)
    public method GravaErro()
    public method GetErrorLog()

    public method ProcessaDevolucao(aFiliais)
    public method ProcessaSaida()
    public method ProcessaEntrada(aFiliais,lOnlyDistr)
    public method ProcPedido(aCabSC5,aItensSC6,cDoc,cSerie,cCliente,cLoja,cEmpFilOri,cFormul,cDocOri,cSerOri,cCodFor,cLojFor)
    public method FaturarPedido()
    public method Transmissao()
    public method PDF(aNotas)
    public method EnvioNFe(aNotasEnv)
    public method ProcEntrada(aDocEntrada,lOnlyDistr)
    public method ProcFat(cDoc,cSerie,cCliente,cLoja)
    public method DocSaida(cPedido,cDoc,cSerie,cCliente,cLoja,aPvlNfs)
    public method GetDocOri(cDoc,cSerie,cCliente,cLoja)
    public method GetEndereco(cDoc,cSerie,cCodCli,cLojaCli,cCodFor,cLojaFor)
    public method fDistribui(_cDoc,_cSerie,_cCli,_cLoja,cLocaliz,cStatus)
    public method MVNumItemVld(lLock)
    public method SetStatus(cEmpOri,cFilOri,cPedOri,cDoc,cSerie,cDocDes,cSerDes,cPedDes,cEmpDes,cFilDes)
    public method SetStatusDest(cDoc,cSerie,cCliente,cLoja,cStatus,cLog)
    public method SetPedido(cDoc,cSerie,cCliente,cLoja,cPedido,cForDev,cLojaFor,aItensSC6)
    public method SetDocDev(cDoc,cSerie,cCliente,cLoja,cDocDev,cSerDev)
    public method DocOriCmpAut(nZL9RecNo)

    public method CreatePath(cPath)

    public method InputZL9(cDoc,cSerie,cCliente,cLoja,cEmpFilOri,cFormul,cDocOri,cSerOri,cCodFor,cLojFor)

endclass

method New(lJob) class TAutomacaoDevolucaoIntercompany

    DEFAULT lJob:=.F.

    DEFAULT __cCRLF:=CRLF

    self:aErros:=Array(0)
    self:aNotas:=Array(0)
    self:aFiliais:=Array(0)
    self:aDocEntrada:=Array(0)

    self:cSerieNF:=""
    self:cEmailNfDev:=""
    self:cEmailTransf:=""

    self:CreatePath(__AUT_DEV_PATH__)

    self:Load(lJob)

    return(Self)

method Load(lJob) class TAutomacaoDevolucaoIntercompany

    local aFilAux	as array

    local cEmp		as character
    local cFil		as character

    local nFilial	as numeric
    local nFiliais	as numeric

    paramtype lJob as logical optional default lJob:=.F.

    aSize(self:aFiliais,0)

    if (!lJob)

        aFilAux:=self:LoadFiliais()

        nFiliais:=Len(aFilAux)
        For nFilial:=1 To nFiliais

            cEmp:=aFilAux[nFilial][1]
            cFil:=aFilAux[nFilial][2]

            if (self:ExisteFuncaoEmProcessamento("U_EJOBDEVINTE",cEmp,cFil))

                aAdd(self:aFiliais,aFilAux[nFilial])

            endif

        Next nFilial

    endif

return

method ProcessaSaida() class TAutomacaoDevolucaoIntercompany

    local aArea         as array

    local aNotas        as array
    local aRetorno      as array
    local aNotasEnv     as array

    local cSQL          as character
    local cLog          as character
    local cZL9TmpAlias  as character

    local cSC5Filial    as character 
    local cSF2Filial    as character

    local nW            as numeric  
    local nPos          as numeric
    local nNotas        as numeric
    local nNotasEnv     as numeric

    local oTFatAut      as object

    oTFatAut:=TFaturamentoAutomatico():New()

    cSC5Filial:=xFilial("SC5")
    cSF2Filial:=xFilial("SF2")

    aArea:=getArea()

    aNotas:=array(0)
    aRetorno:=array(0)
    aNotasEnv:=array(0)

    cZL9TmpAlias:=GetNextAlias()

    cSQL:=TAutDevIntQry():ProcessaSaida()

    TCQUERY (cSQL) ALIAS (cZL9TmpAlias) NEW

    dbSelectArea("ZL9")
    ZL9->(dbSetOrder(2)) // ZL9_FILIAL,ZL9_CODEMP,ZL9_CODFIL,ZL9_PEDIDO,R_E_C_N_O_,D_E_L_E_T_

    dbSelectArea("SF2")
    SF2->(dbSetOrder(1)) // F2_FILIAL,F2_DOC,F2_SERIE,F2_CLIENTE,F2_LOJA,F2_FORMUL,F2_TIPO,R_E_C_N_O_,D_E_L_E_T_

    dbSelectArea("SC5")
    SC5->(dbSetOrder(1))

    while (cZL9TmpAlias)->(!eof())

        ZL9->(DBGoTo((cZL9TmpAlias)->ZL9RECNO))

        if (ZL9->(!eof()))

            self:AddLog("Pocessando Pedido: "+ZL9->ZL9_PEDIDO+" Nota: "+ZL9->ZL9_DOC+"-"+ZL9->ZL9_SERIE+"-"+" NF Devolucao: "+ZL9->ZL9_DOCDEV+"-"+ZL9->ZL9_SERDEV)

            if (ZL9->(RecLock("ZL9",.F.)))

                nPos:=aScan(aNotas,{|x| x[1] ==ZL9->ZL9_PEDIDO })

                if (nPos==0)

                    aAdd(aNotas,{ZL9->ZL9_PEDIDO,.T.})

                    aAdd(aNotas[Len(aNotas)],{ZL9->ZL9_DOC,ZL9->ZL9_SERIE,ZL9->(Recno())})

                else

                    aAdd(aNotas[nPos],{ZL9->ZL9_DOC,ZL9->ZL9_SERIE,ZL9->(Recno())})

                endif

                if (SC5->(!DBSeek(cSC5Filial+ZL9->ZL9_PEDIDO)))

                    ZL9->ZL9_PEDIDO:=""
                    ZL9->ZL9_STATUS:=""
                    ZL9->ZL9_STADOC:=""
                    ZL9->ZL9_DOC:=""
                    ZL9->ZL9_SERIE:=""
                    ZL9->ZL9_STAERR:=""
                    ZL9->ZL9_PDF:=""

                    aNotas[if((nPos>0),nPos,Len(aNotas))][2]:=.F.

                else

                    if !empty(ZL9->ZL9_DOC)

                        if SF2->(!DBSeek(cSF2Filial+ZL9->ZL9_DOC+ZL9->ZL9_SERIE))

                            ZL9->ZL9_STADOC:="" // 5=Cancelada
                            ZL9->ZL9_STATUS:="3"
                            ZL9->ZL9_MSBLQL:="1"
                            ZL9->ZL9_DOC:=""
                            ZL9->ZL9_SERIE:=""
                            ZL9->ZL9_STAERR:=""
                            ZL9->ZL9_PDF:=""

                            cLog:="A nota foi excluida! Para continuar o processo faça o desbloqueio!"
                            ZL9->(ZL9PutLog(@cLog))

                            aNotas[if((nPos>0),nPos,Len(aNotas))][2]:=.F.

                        endif

                    endif

                    if ZL9->ZL9_MSBLQL <> '1' .and. !empty(ZL9->ZL9_PEDIDO) .and. !empty(ZL9->ZL9_DOC)

                        if (ZL9->ZL9_STADOC=="1") // 1=Emitida

                            self:Transmissao(ZL9->ZL9_DOC,ZL9->ZL9_SERIE)

                            ZL9->ZL9_STADOC:="2"

                            aNotas[if((nPos>0),nPos,Len(aNotas))][2]:=.F.

                        elseif (ZL9->ZL9_STADOC=="2") // 2=Transmitida

                            aRetorno:=oTFatAut:MonitoraNFe(ZL9->ZL9_SERIE,ZL9->ZL9_DOC,.F.)

                            varInfo("aRetorno",aRetorno)

                            nPos:=aScan(aNotas,{|x|(x[1]==ZL9->ZL9_PEDIDO)})

                            if (Len(aRetorno)==0)

                                ZL9->ZL9_STADOC:="1" // 1=Emitida

                                aNotas[if((nPos>0),nPos,Len(aNotas))][2]:=.F.

                            elseif (!(aRetorno[1,5]$"100"))

                                if (!(upper('Aguardando processamento')$upper(AllTrim(aRetorno[1,9]))))

                                    ZL9->ZL9_STADOC:="4" // 4=Rejeitada
                                    ZL9->ZL9_MSBLQL:="1"

                                    self:AddLog(AllTrim(aRetorno[1,9]))

                                    ZL9->ZL9_RETNFE:=AllTrim(aRetorno[1,9])

                                    aNotas[if((nPos>0),nPos,Len(aNotas))][2]:=.F.

                                endif

                            elseif (aRetorno[1,5]$"100")

                                ZL9->ZL9_STADOC:="3" // 3=Autorizada

                                ZL9->ZL9_RETNFE:=AllTrim(aRetorno[1,9])

                            endif

                        elseif (ZL9->ZL9_STADOC=="4") // // 4=Rejeitada

                            aRetorno:=oTFatAut:MonitoraNFe(ZL9->ZL9_SERIE,ZL9->ZL9_DOC,.F.)

                            nPos:=aScan(aNotas,{|x| x[1] ==ZL9->ZL9_PEDIDO })

                            if (!(aRetorno[1,5]$"100"))

                                if (!(upper('Aguardando processamento')$upper(AllTrim(aRetorno[1,9]))))

                                    ZL9->ZL9_STADOC:="4" // 4=Rejeitada
                                    ZL9->ZL9_MSBLQL:="1"

                                    self:AddLog(AllTrim(aRetorno[1,9]))

                                    ZL9->ZL9_RETNFE:=AllTrim(aRetorno[1,9])

                                    aNotas[if((nPos>0),nPos,Len(aNotas))][2]:=.F.

                                endif

                            elseif (allTrim(aRetorno[1,5])$"100")

                                ZL9->ZL9_STADOC:="3" // 3=Autorizada

                                ZL9->ZL9_RETNFE:=AllTrim(aRetorno[1,9])

                            endif

                        elseif (ZL9->ZL9_STADOC=="6") // 6=PDF criado

                            nPos:=aScan(aNotasEnv,{|x|(x[1]==ZL9->ZL9_PDF)})

                            if (nPos==0)

                                aAdd(aNotasEnv,{ZL9->ZL9_PDF,.T.})

                                aAdd(aNotasEnv[Len(aNotasEnv)],{ZL9->ZL9_DOC,ZL9->ZL9_SERIE,ZL9->ZL9_PDF,ZL9->(Recno())})

                                aNotasEnv[Len(aNotasEnv)][2]:=File(AllTrim(ZL9->ZL9_PDF)) .and. !File(AllTrim(Replace(ZL9->ZL9_PDF,".pdf",".pd_")))

                            else

                                aAdd(aNotasEnv[nPos],{ZL9->ZL9_DOC,ZL9->ZL9_SERIE,ZL9->ZL9_PDF,ZL9->(Recno())})

                            endif

                            nPos:=aScan(aNotas,{|x| x[1] ==ZL9->ZL9_PEDIDO })

                            aNotas[if((nPos>0),nPos,Len(aNotas))][2]:=.F.

                        elseif (ZL9->ZL9_STADOC=="7") // 7=PDF enviado

                            ZL9->ZL9_STADOC:="8" // 8=Finalizado

                            nPos:=aScan(aNotas,{|x| x[1] ==ZL9->ZL9_PEDIDO })

                            aNotas[if((nPos>0),nPos,Len(aNotas))][2]:=.F.

                        endif

                    endif

                endif

                ZL9->(MSUnLock())

            else

                self:AddLog("Nao consegui lockar ZL9 -> "+cValToChar(ZL9->(Recno())))

            endif

        endif

        (cZL9TmpAlias)->(DBSkip())

    end while

    nNotas:=Len(aNotas)
    if (Len(aNotas)>0)

        For nW:=1 To nNotas

            if aNotas[nW][2]

                self:PDF(aNotas[nW])

            endif

        Next nW

    endif

    nNotasEnv:=Len(aNotasEnv)
    if (nNotasEnv>0)

        For nW:=1 To nNotasEnv
            if (aNotasEnv[nW][2])
                self:EnvioNFe(aNotasEnv[nW])
            endif
        Next nW

    endif

    (cZL9TmpAlias)->(dbCloseArea())
    dbSelectArea("ZL9")

    restArea(aArea)

return

method PDF(aNotas) class TAutomacaoDevolucaoIntercompany

    local cLog              as character    
    local cLocal            as character
    local cIdent            as character
    local cPedido           as character
    local cNomeArq          as character

    local lOk               as logical
    
    local lServer           as logical
    local lAdjustToLegacy   as logical
    local lDisableSetup     as logical

    local nW                as numeric

    local oSetup            as object
    local oPrint            as object

    paramtype aNotas as array optional DEFAULT array(0)

    cPedido:=ZL9->ZL9_PEDIDO
    if (empty(cPedido))
        cPedido:="SEMPED"
    endif

    cLocal:=__AUT_DEV_PATH__
    cNomeArq:=(cPedido+"_"+DtoS(Date())+"_"+Replace(Time(),":",""))
    cIdEnt:=GetCfgEntidade()
    
    lOk:=.T.

    lServer:=.F.
    lAdjustToLegacy:=.F.
    lDisableSetup:=.T.

    oPrint:=FWMSPrinter():New(cNomeArq,IMP_PDF,.F.,cLocal,.T.,,,,.T.,.F.)

    oPrint:lViewPDF:=.F.
    oPrint:cPathPDF:=cLocal
    oPrint:lServer:=.T.

    Begin Transaction

        For nW:=3 To Len(aNotas)

            ZL9->(DBGoTo(aNotas[nW][3]))

            if (!empty(cIdEnt))

                u_fautdanfe(cIdEnt ,/*cVal1*/ ,/*cVal2*/ ,oPrint ,oSetup,cNomeArq,aNotas[nW][1],aNotas[nW][2])

                if (ZL9->(Reclock("ZL9",.F.)))
                    ZL9->ZL9_STADOC:="6"
                    ZL9->ZL9_PDF:=(cLocal+cNomeArq+".pdf")
                    ZL9->(MSUnLock())
                endif

            else

                if (ZL9->(Reclock("ZL9",.F.)))
                    cLog:="Sem conexao com o TSS"
                    ZL9->ZL9_STADOC:="3"
                    ZL9->ZL9_PDF:=cLog
                    ZL9->(ZL9PutLog(@cLog))
                    ZL9->(MSUnLock())
                endif

                lOk:=.F.

            endif

        Next nW

    End Transaction

    if (lOk)
        oPrint:Print()
    endif

    FreeObj(oPrint)

    oPrint:=nil

Return(cNomeArq)

method EnvioNFe(aNotasEnv) class TAutomacaoDevolucaoIntercompany

    local nNota		as numeric
    local nNotas	as numeric

    local lEnv		as logical

    paramtype aNotasEnv as array optional default array(0)

    lEnv:=.T.

    //TODO: Incluir na rotina de Workflow de e-mail BIA191 para recuperação via u_emailWF
    //ex.: u_emailWF("TAFDEVINTC",&("cEmpAnt"))
    if (empty(self:cEmailNfDev))
        self:cEmailNfDev:=u_emailWF("TAFDEVINTC",&("cEmpAnt"))
        if (empty(self:cEmailNfDev))
            self:cEmailNfDev:="fabiana.corona@biancogres.com.br"
        endif
    endif

    nNotas:=Len(aNotasEnv)
    For nNota:=3 To nNotas
        ZL9->(DBGoTo(aNotasEnv[nNota][4]))
        if (lEnv)
            U_BIAEnvMail(nil,self:cEmailNfDev,"NF-e de Devolução de "+AllTrim(SM0->M0_NOME),"Segue nota fiscal eletrônica",nil,AllTrim(aNotasEnv[1]),.F.)
            lEnv:=.F.
        endif
        if (ZL9->(Reclock("ZL9",.F.)))
            ZL9->ZL9_STADOC:="7"
            ZL9->(MSUnLock())
        endif
    Next nNota

    return

method ProcessaDevolucao() class TAutomacaoDevolucaoIntercompany

    local aArea         as array

    local aCabSC5       as array
    local aItemSC6      as array    
    local aItensSC6     as array

    local aDocEntOri    as array

    local cSQL          as character
    local cItem         as character
    local cTmpAlias     as character

    local cCliente      as character
    local cLoja         as character

    local cDoc          as character 
    local cSerie        as character
    local cFormul       as character

    local cDocOri       as character
    local cSerOri       as character
    local cPedOri       as character
    local cCodFor       as character
    local cLojFor       as character
    
    local cEmpFilOri    as character    

    local lOrigFound    as logical

    local nW            as numeric
    local nQuant        as numeric
    local nValor        as numeric
    local nPreco        as numeric

    local nDocEntOri    as numeric

    local oEmpDestino   as object

    aArea:=GetArea()
    
    aCabSC5:=array(0)
    aItemSC6:=array(0)
    aItensSC6:=array(0)

    lOrigFound:=.T.
    aDocEntOri:=array(0)

    self:AddLog("Buscando notas de devolucao para processo intercompany")

    oEmpDestino:=TLoadEmpresa():New()
    oEmpDestino:GetCodigos()

    cSQL:=TAutDevIntQry():ProcessaDevolucao(oEmpDestino:cCodigosCli)

    cTmpAlias:=GetNextAlias()
    TCQUERY (cSQL) ALIAS (cTmpAlias) NEW

    dbSelectArea("SC5")
    SC5->(dbSetOrder(1)) // C5_FILIAL,C5_NUM,R_E_C_N_O_,D_E_L_E_T_

    dbSelectArea("SD2")
    SD2->(dbSetOrder(3)) // D2_FILIAL,D2_DOC,D2_SERIE,D2_CLIENTE,D2_LOJA,D2_COD,D2_ITEM,R_E_C_N_O_,D_E_L_E_T_

    while (cTmpAlias)->(!eof())

        cDoc:=(cTmpAlias)->D1_DOC
        cSerie:=(cTmpAlias)->D1_SERIE
        cCliente:=(cTmpAlias)->D1_FORNECE
        cLoja:=(cTmpAlias)->D1_LOJA
        cPedOri:=(cTmpAlias)->C5_YPEDORI

        cFormul:=(cTmpAlias)->F1_FORMUL

        cItem:="01"

        aSize(aCabSC5,0)
        aSize(aItensSC6,0)

        cEmpFilOri:=((cTmpAlias)->C5_YEMPPED+"01")
        oEmpDestino:SeekForCli(SubStr(cEmpFilOri,1,2),SubStr(cEmpFilOri,3,4))

        cCodFor:=oEmpDestino:cCodFor
        cLojFor:=oEmpDestino:cLojaFor

        aAdd(aCabSC5,{"C5_NUM","",nil})
        aAdd(aCabSC5,{"C5_TIPO","D",nil})

        aAdd(aCabSC5,{"C5_CLIENTE",cCodFor,nil})
        aAdd(aCabSC5,{"C5_LOJACLI",cLojFor,nil})
        aAdd(aCabSC5,{"C5_CLIENT",cCodFor,nil})
        aAdd(aCabSC5,{"C5_LOJAENT",cLojFor,nil})

        aAdd(aCabSC5,{"C5_ORIGEM","",nil})
        aAdd(aCabSC5,{"C5_YCONF","S",nil})
        aAdd(aCabSC5,{"C5_YSUBTP","O",nil})

        aAdd(aCabSC5,{"C5_TRANSP","",nil})
        aAdd(aCabSC5,{"C5_TPFRETE","S",nil})

        aAdd(aCabSC5,{"C5_CONDPAG","505",nil}) // 528??
        aAdd(aCabSC5,{"C5_VEND1","999999",nil})
        aAdd(aCabSC5,{"C5_COMIS1",0,nil})
        aAdd(aCabSC5,{"C5_COMIS2",0,nil})
        aAdd(aCabSC5,{"C5_COMIS3",0,nil})
        aAdd(aCabSC5,{"C5_COMIS4",0,nil})
        aAdd(aCabSC5,{"C5_COMIS5",0,nil})
        aAdd(aCabSC5,{"C5_EMISSAO",dDataBase,nil})
        aAdd(aCabSC5,{"C5_TPCOMPL","2",nil})

        aDocEntOri:=(cTmpAlias)->(self:GetDocOri(D1_DOC,D1_SERIE,D1_FORNECE,D1_LOJA,cCodFor,cLojFor))

        nDocEntOri:=Len(aDocEntOri)

        if ((nDocEntOri>0).and.(lOrigFound))
            lOrigFound:=.T.
        else
            self:AddLog("Nao foi encontrado nota fiscal de origem com saldo! Nao sera possivel continuar"+"[ Produto: "+(cTmpAlias)->D1_COD+"]")
            lOrigFound:=.F.
        endif
        /*
            {;
                            (cAliasTemp)->D1_DOC,;
                            (cAliasTemp)->D1_SERIE,;
                            (cAliasTemp)->D1_ITEM,;
                            (cAliasTemp)->D2_LOTECTL,;
                            (cAliasTemp)->D1_QUANT,;
                            (cAliasTemp)->D2_PRCVEN;
                        }
        */

        nW:=1

        while ((lOrigFound).and.(cTmpAlias)->(!eof().and.(cDoc+cSerie+cCliente+cLoja+cEmpFilOri)==(D1_DOC+D1_SERIE+D1_FORNECE+D1_LOJA+C5_YEMPPED+"01")))

            if ((nDocEntOri>0).and.(nW<=nDocEntOri))

                nQuant:=(cTmpAlias)->D1_QUANT
                nPreco:=aDocEntOri[nW][6]
                nValor:=A410Arred(nQuant*nPreco,"C6_VALOR")

                cDocOri:=aDocEntOri[nW][1]
                cSerOri:=aDocEntOri[nW][2]

                aAdd(aItemSC6,{"C6_NUM","",nil})
                aAdd(aItemSC6,{"C6_ITEM",cItem,nil})
                aAdd(aItemSC6,{"C6_PRODUTO",(cTmpAlias)->D1_COD,nil})
                aAdd(aItemSC6,{"C6_QTDVEN",nQuant,nil})
                aAdd(aItemSC6,{"C6_PRCVEN",nPreco,nil})
                aAdd(aItemSC6,{"C6_PRUNIT",nPreco,nil})
                aAdd(aItemSC6,{"C6_VALOR",nValor,nil})
                aAdd(aItemSC6,{"C6_TES","5I4",nil})
                aAdd(aItemSC6,{"C6_LOCAL",(cTmpAlias)->C6_LOCAL,nil})
                aAdd(aItemSC6,{"C6_LOTECTL",aDocEntOri[nW][4],nil})
                aAdd(aItemSC6,{"C6_LOCALIZ","LM",nil})
                aAdd(aItemSC6,{"C6_NFORI",aDocEntOri[nW][1],nil})
                aAdd(aItemSC6,{"C6_SERIORI",aDocEntOri[nW][2],nil})
                aAdd(aItemSC6,{"C6_ITEMORI",aDocEntOri[nW][3],nil})

                aAdd(aItensSC6,aClone(aItemSC6))
            
                aSize(aItemSC6,0)

                cItem:=Soma1(cItem)

            endif

            nW++

            (cTmpAlias)->(DBSkip())

        end while

        if (Len(aItensSC6)>0)
            if (lOrigFound)
                self:ProcPedido(aCabSC5,aItensSC6,cDoc,cSerie,cCliente,cLoja,cEmpFilOri,cFormul,cDocOri,cSerOri,cCodFor,cLojFor)
            endif
            lOrigFound:=.T.
        endif

        self:GravaErro()

    end while

    (cTmpAlias)->(dbCloseArea())

    RestArea(aArea)

    return(nil)

method FaturarPedido() class TAutomacaoDevolucaoIntercompany

    local aArea         as array

    local bError        as block
    local bErrorBlock   as block

    local cSQL          as character
    local cError        as character
    local cTmpAlias     as character

    local cSC6Filial    as character

    local lRet          as logical
    local lHasError     as logical

    aArea:=GetArea()

    cTmpAlias:=GetNextAlias()
    
    cSC6Filial:=xFilial("SC5")

    lRet:=.T.
    lHasError:=.F.

    bError:={|oError|evalBlock():BreakError(oError,@lHasError,!IsBlind(),"ProcPedido","Erro Em ProcPedido"),cError:=if(lHasError,oError:Description,"")}
    bErrorBlock:=ErrorBlock(bError)

    begin sequence

        self:AddLog("Buscando Pedidos para faturar")

        dbSelectArea("ZL9")

        cSQL:=TAutDevIntQry():FaturarPedido()

        TCQUERY (cSQL) ALIAS (cTmpAlias) NEW

        dbSelectArea("SC5")
        SC5->(dbSetOrder(1)) // C5_FILIAL,C5_NUM,R_E_C_N_O_,D_E_L_E_T_

        while (cTmpAlias)->(!eof())

            if (SC5->(DBSeek(cSC6Filial+(cTmpAlias)->ZL9_PEDIDO)))

                Begin Transaction

                    Begin Sequence

                        self:AddLog("Faturando pedido "+SC5->C5_NUM)

                        if (self:MVNumItemVld(.T.))

                            lRet:=self:ProcFat((cTmpAlias)->ZL9_DOCDEV,(cTmpAlias)->ZL9_SERDEV,(cTmpAlias)->ZL9_CLIDEV,(cTmpAlias)->ZL9_LOJDEV)
                            
                            self:MVNumItemVld(.F.)

                        endif

                    End Sequence

                    ErrorBlock(bErrorBlock)

                    if ( ValType(cError) <> "U" .and. !empty(cError) ) .or. !lRet

                        if (InTransact())
                            DisarmTransaction()
                        endif

                    else

                        self:AddLog("Pedido "+SC5->C5_NUM+" faturado")

                    endif

                End Transaction

            endif

            (cTmpAlias)->(DBSkip())

        end while

        (cTmpAlias)->(dbCloseArea())

        self:GravaErro()

    end sequence

    RestArea(aArea)

return

method ProcPedido(aCabSC5,aItensSC6,cDoc,cSerie,cCliente,cLoja,cEmpFilOri,cFormul,cDocOri,cSerOri,cCodFor,cLojFor) class TAutomacaoDevolucaoIntercompany

    local aArea         as array

    local bError        as block
    local bErrorBlock   as block

    local cNumPed       as character

    local cLog          as character
    local cLogTxt       as character   

    local cError        as character

    local cSC5Filial    as character
    
    local lHasError     as logical

    DEFAULT aCabSC5:=array(0)
    DEFAULT aItensSC6:=array(0)
    DEFAULT cDoc:=""
    DEFAULT cSerie:=""
    DEFAULT cEmpFilOri:=""
    DEFAULT cFormul:=""

    private lMsErroAuto as logical
    lMsErroAuto:=.F.

    private lMsHelpAuto as logical
    lMsHelpAuto:=.T.
    
    private lAutoErrNoFile as logical
    lAutoErrNoFile:=.T.

    aArea:=GetArea()
    lHasError:=.F.

    bError:={|oError|evalBlock():BreakError(oError,@lHasError,!IsBlind(),"ProcPedido","Erro Em ProcPedido"),cError:=if(lHasError,oError:Description,"")}
    bErrorBlock:=ErrorBlock(bError)

    begin sequence

        if (self:InputZL9(cDoc,cSerie,cCliente,cLoja,cEmpFilOri,cFormul,cDocOri,cSerOri,cCodFor,cLojFor))

            Begin Transaction

                Begin Sequence

                    if (self:fDistribui(cDoc,cSerie,cCliente,cLoja,"LM","2"))

                        self:AddLog("Criando pedido referente nota "+cDoc+"-"+cSerie)

                        cNumPed:=GetSxENum("SC5","C5_NUM")
                        RollBackSX8()

                        aCabSC5[1][2]:=cNumPed

                        aEval(aItensSC6,{|x| (x[1][2]:=cNumPed) })

                        cSC5Filial:=xFilial("SC5")
                        dbSelectArea("SC5")
                        cMay:=("SC5"+Alltrim(cSC5Filial))
                        SC5->(dbSetOrder(1))

                        while (SC5->((DBSeek(cSC5Filial+cNumPed).or.!MayIUseCode(cMay+cNumPed))))
                            cNumPed:=Soma1(cNumPed,Len(cNumPed))
                            aCabSC5[1][2]:=cNumPed
                            aEval(aItensSC6,{|x|x[1][2]:=cNumPed })
                        end while

                        lMsErroAuto:=.F.
                        lMsHelpAuto:=.T.
                        lAutoErrNoFile:=.T.

                        cacheData():Set("ProcPedido","aCabSC5",aClone(aCabSC5))
                        cacheData():Set("ProcPedido","aItensSC6",aClone(aItensSC6))

                        MsExecAuto({|x,y,z| Mata410(x,y,z)},aCabSC5,aItensSC6,3)

                        cacheData():clear()

                        if (lMsErroAuto)

                            cLogTxt:=self:GetErrorLog()

                            cLog:="Erro ao incluir pedido de venda "+__cCRLF+cLogTxt

                            VarInfo("cLogTxt",cLog)

                            VarInfo("aCabSC5",aCabSC5)

                            VarInfo("aItensSC6",aItensSC6)

                            if (InTransact())
                                RollBackSX8()
                                DisarmTransaction()
                            endif

                            self:SetStatus(cDoc,cSerie,cCliente,cLoja,"E",@cLog)

                        else

                            ConfirmSX8()

                            self:SetPedido(cDoc,cSerie,cCliente,cLoja,SC5->C5_NUM,SC5->C5_CLIENTE,SC5->C5_LOJACLI,aItensSC6)
                            self:SetStatus(cDoc,cSerie,cCliente,cLoja,"3",@cLog)

                        endif

                    endif

                End Sequence

                if ( lHasError .or. lMsErroAuto )

                    if (empty(cError))
                        cError:="Ocorreram erros no Processamento."
                    endif

                    cError+=__cCRLF
                    cError+=self:GetErrorLog()
                    cError+=__cCRLF

                    self:AddLog(cError)

                    if (InTransact())
                        RollBackSX8()
                        DisarmTransaction()
                    endif

                endif

            End Transaction

        else

            self:AddLog("ZL9 ja existe!")

        endif

    recover

        if (InTransact())
            RollBackSX8()
            DisarmTransaction()
        endif

        if (empty(cError))
            cError:="Ocorreram erros no Processamento."
        endif

        cError+=__cCRLF
        cError+=self:GetErrorLog()
        cError+=__cCRLF

        self:AddLog(cError)

    end sequence

    ErrorBlock( bErrorBlock )

    RestArea(aArea)

Return(!lMsErroAuto)

method GetEndereco(cDoc,cSerie,cCodCli,cLojaCli,cCodFor,cLojaFor) class TAutomacaoDevolucaoIntercompany

    local aArea     as array
    
    local cSQL      as character
    local cAlias4   as character
    local cEnderec  as character

    aArea:=getArea()
    cAlias4:=GetNextAlias()

    cSQL:=TAutDevIntQry():GetEndereco(cCodCli,cLojaCli,cDoc,cSerie)

    TCQUERY (cSQL) ALIAS (cAlias4) NEW

    if ((cAlias4)->(!eof()))

        if ((cAlias4)->Z25_RETMRC=="S")

            cEnderec:="DEVOLUCAO"

        else

            cEnderec:="P. DEVOL"

        endif

    else

        cEnderec:="NOTFOUND"

    endif

    (cAlias4)->(dbCloseArea())

    restArea(aArea)

    return(cEnderec)

method fDistribui(cDoc,cSerie,cCliente,cLoja,cLocaliz,cStatus,lDestino,cCodFor,cLojaFor) class TAutomacaoDevolucaoIntercompany

    local aArea     as array
    local aCabSDA   as array
    local aItemSDB  as array
    local aItensSDB as array

    local cLog      as character
    local cSQL      as character
    local cLogTxt   as character
    local cSDATmp   as character

    local lRet      as logical

    local nSDARecNo as numeric

    DEFAULT lDestino:=.F.
    DEFAULT cCodFor:=""
    DEFAULT cLojaFor:=""

    private lMsErroAuto as logical
    lMsErroAuto:=.F.

    private lMsHelpAuto as logical
    lMsHelpAuto:=.T.
    
    private lAutoErrNoFile as logical
    lAutoErrNoFile:=.T.

    aArea:=getArea()

    aCabSDA:=array(0)
    aItemSDB:=array(0)
    aItensSDB:=array(0)

    cSDATmp:=GetNextAlias()

    lRet:=.T.

    cSQL:=TAutDevIntQry():fDistribui(cDoc,cSerie,cCliente,cLoja)

    TCQUERY (cSQL) ALIAS (cSDATmp) NEW

    if ((cSDATmp)->(!eof()))

        while ((cSDATmp)->(!eof()))

            nSDARecNo:=(cSDATmp)->SDARECNO
            SDA->(dbGoTo(nSDARecNo))

            if (SDA->DA_SALDO>0)

                aSize(aCabSDA,0)
                aSize(aItemSDB,0)
                aSize(aItensSDB,0)

                aAdd(aCabSDA,{"DA_PRODUTO",SDA->DA_PRODUTO ,nil})
                aAdd(aCabSDA,{"DA_NUMSEQ",SDA->DA_NUMSEQ,nil})

                aAdd(aItemSDB,{"DB_ITEM","0001",nil})
                aAdd(aItemSDB,{"DB_ESTORNO"," ",nil})
                aAdd(aItemSDB,{"DB_LOCALIZ",cLocaliz,nil})
                aAdd(aItemSDB,{"DB_DATA",Date(),nil})
                aAdd(aItemSDB,{"DB_QUANT",SDA->DA_SALDO,nil})

                aAdd(aItensSDB,aItemSDB)

                lMsErroAuto:=.F.
                lMsHelpAuto:=.T.
                lAutoErrNoFile:=.T.

                cacheData():set("fDistribui","aCabSDA",aCabSDA)
                cacheData():set("fDistribui","aItemSDB",aItensSDB)
                cacheData():set("fDistribui","nSDARecNo",nSDARecNo)

                MsExecAuto({|x,y,z| MATA265(x,y,z) },aCabSDA,aItensSDB,3)

                cacheData():clear()

                if (lMsErroAuto)

                    cLogTxt:=self:GetErrorLog()

                    cLog:="Distribuicao - ERRO: "+cLogTxt

                    varInfo("cLogTxt",cLog)

                    if (lDestino)

                        self:SetStatusDest(cDoc,cSerie,cCliente,cLoja,"E",@cLog)

                    else

                        self:SetStatus(cDoc,cSerie,cCliente,cLoja,"E",@cLog)

                    endif

                    lRet:=	.F.

                    Exit

                else

                    cLog:="Distribuicao - Produto "+SDA->DA_PRODUTO+" Distribuído com Sucesso!"

                    if (lDestino)

                        self:SetStatusDest(cDoc,cSerie,cCodFor,cLojaFor,cStatus,@cLog)

                    else

                        self:SetStatus(cDoc,cSerie,cCodFor,cLojaFor,cStatus,@cLog)

                    endif

                endif

            else

                cLog:="Distribuicao - Produto "+SDA->DA_PRODUTO+" JA ESTAVA DISTRIBUIDO!"

                if (lDestino)

                    self:SetStatusDest(cDoc,cSerie,cCodFor,cLojaFor,cStatus,@cLog)

                else

                    self:SetStatus(cDoc,cSerie,cCliente,cLoja,cStatus,@cLog)

                endif

            endif

            (cSDATmp)->(DBSkip())

        end while

    else

        self:AddLog('Distribuicao - ERRO: Nao foram encontrados registros' )

        lRet:=	.F.

    endif

    if (select(cSDATmp)>0)
        (cSDATmp)->(dbCloseArea())
    endif

    restArea(aArea)


Return(lRet)

method GetDocOri(cDoc,cSerie,cCliente,cLoja,cCodFor,cLojaFor) class TAutomacaoDevolucaoIntercompany

    local aArea			as array
    local aDocEntOri	as array

    local cQuery		as character
    local cAliasTemp    as character

    local nSD1RecNo     as numeric

    paramtype cDoc as character
    paramtype cSerie as character
    paramtype cCliente as character
    paramtype cLoja as character
    paramtype cCodFor as character
    paramtype cLojaFor as character

    aArea:=getArea()
    aDocEntOri:=array(0)
    cAliasTemp:=GetNextAlias()

    cQuery:=TAutDevIntQry():GetDocOri(@cDoc,@cSerie,@cCliente,@cLoja,@cCodFor,@cLojaFor)

    TCQUERY (cQuery) ALIAS (cAliasTemp) NEW

    while (cAliasTemp)->(!eof())

        nSD1RecNo:=(cAliasTemp)->SD1RECNO
        SD1->(dbGoTo(nSD1RecNo))

        SD1->(;
            aAdd(aDocEntOri,;
                    {;
                        D1_DOC,;
                        D1_SERIE,;
                        D1_ITEM,;
                        D1_LOTECTL,;
                        D1_QUANT,;
                        D1_VUNIT;
                    };
                );
            )

        (cAliasTemp)->(DBSkip())

    end while

    (cAliasTemp)->(dbCloseArea())

    restArea(aArea)

Return(aDocEntOri)

method InputZL9(cDoc,cSerie,cCliente,cLoja,cEmpFilOri,cFormul,cDocOri,cSerOri,cCodFor,cLojFor) class TAutomacaoDevolucaoIntercompany

    local cZL9Filial    as character

    local lRet          as logical

    local lFound        as logical
    local lAddNew       as logical

    lRet:=.F.

    cZL9Filial:=xFilial("ZL9")

    dbSelectArea("ZL9")
    ZL9->(dbSetOrder(1)) // ZL9_FILIAL,ZL9_CODEMP,ZL9_CODFIL,ZL9_DOCDEV,ZL9_SERDEV,ZL9_CLIDEV,ZL9_LOJDEV,R_E_C_N_O_,D_E_L_E_T_

    lFound:=ZL9->(DBSeek(cZL9Filial+cEmpAnt+cFilAnt+cDoc+cSerie+cCliente+cLoja))
    lAddNew:=(!lFound)

    if (ZL9->(RecLock("ZL9",lAddNew)))
        ZL9->ZL9_FILIAL:=cZL9Filial
        ZL9->ZL9_CODEMP:=cEmpAnt
        ZL9->ZL9_CODFIL:=cFilAnt
        ZL9->ZL9_EMPORI:=SubStr(cEmpFilOri,1,2)
        ZL9->ZL9_FILORI:=SubStr(cEmpFilOri,3,4)
        ZL9->ZL9_DOCDEV:=cDoc
        ZL9->ZL9_SERDEV:=cSerie
        ZL9->ZL9_CLIDEV:=cCliente
        ZL9->ZL9_LOJDEV:=cLoja
        ZL9->ZL9_FORMUL:=cFormul
        ZL9->ZL9_DATAIN:=MsDate()
        ZL9->ZL9_HORAIN:=Time()
        ZL9->ZL9_STATUS:=if(lFound,ZL9->ZL9_STATUS,"1") // Devolucao Cliente - NF Incluida
        ZL9->ZL9_MSBLQL:="2"
        ZL9->ZL9_STAERR:=""
        ZL9->ZL9_DOCORI:=cDocOri
        ZL9->ZL9_SERORI:=cSerOri
        ZL9->ZL9_FORNEC:=cCodFor
        ZL9->ZL9_LOJFOR:=cLojFor
        ZL9->(MSUnLock())
        lRet:=((lAddNew).or.(empty(ZL9->ZL9_PEDIDO)))
    endif

    if ((!lAddNew).and.!(lRet))
        lRet:=((lFound).and.(empty(ZL9->ZL9_PEDIDO)))
    endif

Return(lRet)

method ProcessaEntrada(aFiliais,lOnlyDistr) class TAutomacaoDevolucaoIntercompany

    local aArea         as array

    local aCabSF1       as array
    local aItemSF1      as array
    local aItensSF1     as array

    local aDocEntItem   as array
    local aDocEntrada   as array

    local cSQL          as character
    local cTmpAlias     as character

    local bDocEntrada   as block

    local cEmpOri       as character
    local cFilOri       as character
    local cPedOri       as character
    local cCodFor       as character
    local cLojaFor      as character
    local cDoc          as character
    local cSerie        as character
    local cCliente      as character
    local cLoja         as character
    local cCondPag      as character
    local cSM0KeySeek   as character

    local nW            as numeric
    local nSM0RecNo     as numeric

    local oEmpFilVen    as object
    local oEmpFilCom    as object

    paramtype aFiliais as array optional default array(0)
    paramtype lOnlyDistr as logical optional default .F.

    aArea:=GetArea()

    oEmpFilVen:=TLoadEmpresa():New()
    oEmpFilCom:=TLoadEmpresa():New()

    aCabSF1:=array(0)
    aItemSF1:=array(0)
    aItensSF1:=array(0)

    aDocEntrada:=array(0)

    cSM0KeySeek:=cEmpAnt
    cSM0KeySeek+=cFilAnt
    if (SM0->(MsSeek(cSM0KeySeek,.F.)))
        nSM0RecNo:=SM0->(RecNo())
    endif

    oEmpFilCom:SeekForCli(cEmpAnt,cFilAnt,nSM0RecNo)

    bDocEntrada:={||{aCabSF1,aItensSF1,cEmpOri,cFilOri,cPedOri,cDoc,cSerie,cCodFor,cLojaFor,cCondPag,oEmpFilVen:cCodCli,oEmpFilVen:cLojaCli}}

    For nW:=1 To Len(aFiliais)

        if ((cEmpAnt+cFilAnt)<>(aFiliais[nW][1]+AllTrim(aFiliais[nW][2])))

            self:AddLog("Buscando notas de devolucao na filial: "+aFiliais[nW][1]+AllTrim(aFiliais[nW][2])+" para dar entrada")

            nSM0RecNo:=aFiliais[nW][4]
            SM0->(MsGoTo(nSM0RecNo))

            oEmpFilVen:SeekForCli(aFiliais[nW][1],aFiliais[nW][2],nSM0RecNo)

            if (oEmpFilCom:lFornecedor)

                cTmpAlias:=GetNextAlias()

                cSQL:=" SELECT SF2.F2_COND"+__cCRLF

                cSQL+="       ,SD2.D2_FILIAL"+__cCRLF
                cSQL+="       ,SD2.D2_LOCAL"+__cCRLF
                cSQL+="       ,SD2.D2_DOC"+__cCRLF
                cSQL+="       ,SD2.D2_SERIE"+__cCRLF
                cSQL+="       ,SD2.D2_CLIENTE"+__cCRLF
                cSQL+="       ,SD2.D2_LOJA"+__cCRLF
                cSQL+="       ,SD2.D2_EMISSAO"+__cCRLF
                cSQL+="       ,SD2.D2_COD"+__cCRLF
                cSQL+="       ,SD2.D2_QUANT"+__cCRLF
                cSQL+=" 	  ,SD2.D2_TES"+__cCRLF
                cSQL+=" 	  ,SD2.D2_ITEM"+__cCRLF
                cSQL+=" 	  ,SD2.D2_PRCVEN"+__cCRLF
                cSQL+=" 	  ,SD2.D2_TOTAL"+__cCRLF
                cSQL+=" 	  ,SD2.D2_LOTECTL"+__cCRLF
                cSQL+=" 	  ,SD2.D2_DTVALID"+__cCRLF
                cSQL+=" 	  ,SD2.D2_PEDIDO"+__cCRLF
                cSQL+=" 	  ,SD2.D2_ITEMPV"+__cCRLF
                cSQL+=" 	  ,SD2.D2_NFORI"+__cCRLF
                cSQL+=" 	  ,SD2.D2_SERIORI"+__cCRLF
                cSQL+=" 	  ,SD2.D2_ITEMORI"+__cCRLF

                cSQL+=" 	  ,SPED.DOC_CHV CHAVE"+__cCRLF

                cSQL+=" 	  ,SC5.C5_TIPO"+__cCRLF
                cSQL+=" 	  ,SC5.C5_TRANSP"+__cCRLF
                cSQL+=" 	  ,SC5.C5_TPFRETE"+__cCRLF
                cSQL+=" 	  ,SC5.C5_CONDPAG"+__cCRLF

                cSQL+=" 	  ,SC6.C6_ITEM"+__cCRLF
                cSQL+=" 	  ,SC6.C6_LOCAL"+__cCRLF

                cSQL+=" FROM "+RetFullName("SF2",oEmpFilVen:cCodEmp)+" SF2 ( NOLOCK )"+__cCRLF

                cSQL+=" JOIN "+RetFullName("SD2",oEmpFilVen:cCodEmp)+" SD2 (NOLOCK) ON"+__cCRLF
                cSQL+=" ( "+__cCRLF
                cSQL+=" 	    SD2.D2_FILIAL=SF2.F2_FILIAL"+__cCRLF
                cSQL+=" 	AND SD2.D2_DOC=SF2.F2_DOC"+__cCRLF
                cSQL+=" 	AND SD2.D2_SERIE=SF2.F2_SERIE"+__cCRLF
                cSQL+=" 	AND SD2.D2_CLIENTE=SF2.F2_CLIENTE"+__cCRLF
                cSQL+=" 	AND SD2.D2_LOJA=SF2.F2_LOJA"+__cCRLF
                cSQL+=" 	AND SD2.D_E_L_E_T_=''"+__cCRLF
                cSQL+=" )"+__cCRLF

                cSQL+=" JOIN "+RetFullName("SC5",oEmpFilVen:cCodEmp)+" SC5 (NOLOCK) ON"+__cCRLF
                cSQL+=" ("+__cCRLF
                cSQL+=" 	    SC5.C5_FILIAL=SD2.D2_FILIAL"+__cCRLF
                cSQL+=" 	AND SC5.C5_NUM =SD2.D2_PEDIDO"+__cCRLF
                cSQL+=" 	AND SC5.D_E_L_E_T_=''"+__cCRLF
                cSQL+=" )"+__cCRLF

                cSQL+=" JOIN "+RetFullName("SC6",oEmpFilVen:cCodEmp)+" SC6 (NOLOCK) ON"+__cCRLF
                cSQL+=" ("+__cCRLF
                cSQL+=" 	    SC6.C6_FILIAL=SC5.C5_FILIAL"+__cCRLF
                cSQL+=" 	AND SC6.C6_NUM=SD2.D2_PEDIDO"+__cCRLF
                cSQL+=" 	AND SC6.C6_ITEM=SD2.D2_ITEMPV"+__cCRLF
                cSQL+=" 	AND SC6.D_E_L_E_T_=''"+__cCRLF
                cSQL+=" )"+__cCRLF

                cSQL+=" JOIN SPED050 SPED (NOLOCK) ON"+__cCRLF
                cSQL+=" ("+__cCRLF
                cSQL+=" 	SPED.ID_ENT="+ValToSql(oEmpFilVen:cIdEnt)+__cCRLF
                cSQL+=" 	AND SPED.NFE_ID=SF2.F2_SERIE+SF2.F2_DOC"+__cCRLF
                cSQL+=" 	AND SPED.STATUS=6"+__cCRLF
                cSQL+=" 	AND SPED.D_E_L_E_T_=''"+__cCRLF
                cSQL+=" )"+__cCRLF

                cSQL+=" WHERE SF2.F2_FILIAL="+ValToSql(oEmpFilVen:cCodFil)+__cCRLF
                cSQL+="   AND SF2.F2_TIPO="+ValToSql("D")+__cCRLF
                cSQL+="   AND SF2.F2_CLIENTE="+ValToSql(oEmpFilCom:cCodFor)+__cCRLF
                cSQL+="   AND SF2.F2_LOJA="+ValToSql(oEmpFilCom:cLojaFor)+__cCRLF

                if (!lOnlyDistr)
                    cSQL+=" AND NOT EXISTS"+__cCRLF
                    cSQL+=" ("+__cCRLF
                    cSQL+=" 	SELECT 1"+__cCRLF
                    cSQL+=" 	 FROM "+RetSQLName("SF1")+" SF1 (NOLOCK)"+__cCRLF
                    cSQL+=" 	WHERE SF1.F1_FILIAL="+ValToSql(cFilAnt)+__cCRLF
                    cSQL+=" 	  AND SF1.F1_FORNECE="+ValToSql(oEmpFilVen:cCodCli)+__cCRLF
                    cSQL+=" 	  AND SF1.F1_LOJA="+ValToSql(oEmpFilVen:cLojaCli)+__cCRLF
                    cSQL+=" 	  AND SF1.F1_DOC=SF2.F2_DOC"+__cCRLF
                    cSQL+=" 	  AND SF1.F1_SERIE =SF2.F2_SERIE"+__cCRLF
                    cSQL+=" 	  AND SF1.D_E_L_E_T_=''"+__cCRLF // Caso o usuario exclua a nota,iria ficar fazendo entrada a todo momento.
                    cSQL+=" )"+__cCRLF
                endif

                cSQL+=" AND EXISTS"+__cCRLF
                cSQL+=" ("+__cCRLF
                cSQL+=" 	SELECT 1"+__cCRLF
                cSQL+=" 	  FROM "+RetSQLName("ZL9")+" ZL9 (NOLOCK)"+__cCRLF
                cSQL+=" 	 WHERE ZL9_FILIAL="+ValToSql(xFilial("ZL9"))+__cCRLF
                cSQL+=" 	   AND ZL9.ZL9_CODEMP="+ValToSql(oEmpFilVen:cCodEmp)+__cCRLF
                cSQL+=" 	   AND ZL9.ZL9_CODFIL="+ValToSql(oEmpFilVen:cCodFil)+__cCRLF
                cSQL+="      AND ZL9.ZL9_EMPORI="+ValToSql(cEmpAnt)+__cCRLF
                cSQL+="      AND ZL9.ZL9_FILORI="+ValToSql(cFilAnt)+__cCRLF
                cSQL+="      AND ZL9.ZL9_MSBLQL<>'1'"+__cCRLF
                cSQL+="      AND ZL9.ZL9_STAERR<>'E'"+__cCRLF
                cSQL+="      AND ZL9.ZL9_STATUS<>'F'"+__cCRLF
                cSQL+="      AND ZL9.ZL9_PEDIDO=SD2.D2_PEDIDO"+__cCRLF
                cSQL+="      AND ZL9.ZL9_DOC<>' ' "+__cCRLF
                cSQL+="      AND ZL9.ZL9_SERIE<>' ' "+__cCRLF
                cSQL+=" 	   AND ZL9.D_E_L_E_T_='' "+__cCRLF
                cSQL+=" )"+__cCRLF

                cSQL+=" AND SF2.D_E_L_E_T_ =''"+__cCRLF

                cSQL+=" ORDER BY SD2.D2_FILIAL,SD2.D2_DOC,SD2.D2_SERIE,SD2.D2_CLIENTE,SD2.D2_LOJA"+__cCRLF

                TCQUERY (cSQL) ALIAS (cTmpAlias) NEW

                while ((cTmpAlias)->(!eof()))

                    aSize(aCabSF1,0)
                    aSize(aItensSF1,0)
                    aSize(aDocEntrada,0)

                    cEmpOri:=oEmpFilVen:cCodEmp
                    cFilOri:=(cTmpAlias)->D2_FILIAL
                    cPedOri:=(cTmpAlias)->D2_PEDIDO

                    cCodFor:=oEmpFilCom:cCodFor
                    cLojaFor:=oEmpFilCom:cLojaFor
                    cDoc:=(cTmpAlias)->D2_DOC
                    cSerie:=(cTmpAlias)->D2_SERIE
                    cCliente:=(cTmpAlias)->D2_CLIENTE
                    cLoja:=(cTmpAlias)->D2_LOJA
                    cCondPag:=(cTmpAlias)->C5_CONDPAG

                    aAdd(aCabSF1,{"F1_TIPO","D",nil,nil})
                    aAdd(aCabSF1,{"F1_FORMUL","N",nil,nil})
                    aAdd(aCabSF1,{"F1_ESPECIE","SPED",nil,nil})

                    aAdd(aCabSF1,{"F1_DOC",cDoc,nil,nil})
                    aAdd(aCabSF1,{"F1_SERIE",cSerie,nil,nil})
                    aAdd(aCabSF1,{"F1_FORNECE",oEmpFilVen:cCodCli,nil,nil})
                    aAdd(aCabSF1,{"F1_LOJA",oEmpFilVen:cLojaCli,nil,nil})
                    aAdd(aCabSF1,{"F1_EMISSAO",STOD((cTmpAlias)->D2_EMISSAO),nil,nil})
                    aAdd(aCabSF1,{"F1_CHVNFE",(cTmpAlias)->CHAVE,nil,nil})

                    while ((cTmpAlias)->(!eof().and.(cDoc+cSerie+cCliente+cLoja)==(D2_DOC+D2_SERIE+D2_CLIENTE+D2_LOJA)))

                        aSize(aItemSF1,0)

                        aAdd(aItemSF1,{"D1_ITEM",(cTmpAlias)->D2_ITEM,nil,nil})
                        aAdd(aItemSF1,{"D1_COD",(cTmpAlias)->D2_COD,nil,nil})
                        aAdd(aItemSF1,{"D1_DOC",(cTmpAlias)->D2_DOC,nil,nil})
                        aAdd(aItemSF1,{"D1_SERIE",(cTmpAlias)->D2_SERIE,nil,nil})
                        aAdd(aItemSF1,{"D1_FORNECE",oEmpFilVen:cCodCli,nil,nil})
                        aAdd(aItemSF1,{"D1_LOJA",oEmpFilVen:cLojaCli,nil,nil})
                        aAdd(aItemSF1,{"D1_TES","034",nil,nil})
                        aAdd(aItemSF1,{"D1_QUANT",(cTmpAlias)->D2_QUANT,nil,nil})
                        aAdd(aItemSF1,{"D1_VUNIT",(cTmpAlias)->D2_PRCVEN,nil,nil})
                        aAdd(aItemSF1,{"D1_TOTAL",(cTmpAlias)->D2_TOTAL,nil,nil})
                        aAdd(aItemSF1,{"D1_LOCAL",(cTmpAlias)->D2_LOCAL,nil,nil})
                        aAdd(aItemSF1,{"D1_LOTECTL",(cTmpAlias)->D2_LOTECTL,nil,nil})

                        aAdd(aItemSF1,{"D1_NFORI",(cTmpAlias)->D2_NFORI,nil})
                        aAdd(aItemSF1,{"D1_SERIORI",(cTmpAlias)->D2_SERIORI,nil})
                        aAdd(aItemSF1,{"D1_ITEMORI",(cTmpAlias)->D2_ITEMORI,nil})

                        aAdd(aItensSF1,aClone(aItemSF1))

                        (cTmpAlias)->(DBSkip())

                    End while

                    if (Len(aItensSF1)>0)
                        aDocEntItem:=eval(bDocEntrada)
                        if (aScan(self:aDocEntrada,{|aDoc|aUtils():Compare(aDoc,aDocEntItem)})==0)
                            aAdd(self:aDocEntrada,aDocEntItem)
                            aAdd(aDocEntrada,aDocEntItem)
                        endif
                    endif

                    if (Len(aDocEntrada)>0)
                        self:ProcEntrada(aDocEntrada,lOnlyDistr)
                    endif

                End while

                (cTmpAlias)->(dbCloseArea())
                dbSelectArea("SF1")

            endif

        endif

    Next nW

    self:GravaErro()

    RestArea(aArea)

return

method Transmissao(cDoc,cSerie) class TAutomacaoDevolucaoIntercompany

    local aArea     as array

    local cError    as character
    
    local lRet      as logical

    paramtype cDoc as character
    paramtype cSerie as character

    aArea:=GetArea()

    lRet:=.T.

    private cIdEnt as character
    cIdEnt:=GetCfgEntidade(@cError)

    if (empty(cIdent))
        lRet:=.F.
        self:AddLog("TAutomacaoDevolucaoIntercompany -> TSS não responde")
    else
        StaticCall(BACP0011,fSendDanfe,cDoc,cDoc,cSerie)
    endif

    RestArea(aArea)

    return(lRet)

method SetStatus(cDoc,cSerie,cCliente,cLoja,cStatus,cLog) class TAutomacaoDevolucaoIntercompany

    local aArea         as array
    local aAreaZL9      as array

    DEFAULT cStatus:=""
    DEFAULT cLog:=""

    aArea:=GetArea()
    aAreaZL9:=ZL9->(GetArea())

    dbSelectArea("ZL9")
    ZL9->(dbSetOrder(1)) // ZL9_FILIAL,ZL9_CODEMP,ZL9_CODFIL,ZL9_DOCDEV,ZL9_SERDEV,ZL9_CLIDEV,ZL9_LOJDEV,R_E_C_N_O_,D_E_L_E_T_

    self:AddLog(cLog)

    if (ZL9->(MsSeek(xFilial("ZL9")+cEmpAnt+cFilAnt+cDoc+cSerie+cCliente+cLoja)))

        if (ZL9->(RecLock("ZL9",.F.)))
            if (cStatus=="E")
                ZL9->(ZL9PutLog(@cLog))      
            else
                ZL9->ZL9_STATUS:=if(empty(cStatus),ZL9->ZL9_STATUS,cStatus)
                ZL9->(ZL9PutLog(@cLog))
            endif
            ZL9->(MsUnLock())
        endif

    endif

    RestArea(aArea)
    RestArea(aAreaZL9)

    return(nil)

method SetStatusDest(cDoc,cSerie,cCliente,cLoja,cStatus,cLog) class TAutomacaoDevolucaoIntercompany

    local aArea     as array
    local aAreaZL9  as array

    DEFAULT cStatus:=""
    DEFAULT cLog:=""

    aArea:=GetArea()
    aAreaZL9:=ZL9->(GetArea())

    self:AddLog(cLog)

    dbSelectArea("ZL9")
    ZL9->(dbSetOrder(3)) // ZL9_FILIAL,ZL9_EMPORI,ZL9_FILORI,ZL9_DOC,ZL9_SERIE,ZL9_FORNEC,ZL9_LOJFOR,R_E_C_N_O_,D_E_L_E_T_

    if (ZL9->(MsSeek(xFilial("ZL9")+cEmpAnt+cFilAnt+cDoc+cSerie+cCliente+cLoja)))

        if (ZL9->(RecLock("ZL9",.F.)))
            if (cStatus=="E")
                ZL9->(ZL9PutLog(@cLog))
            else
                ZL9->ZL9_STATUS:=if(empty(cStatus),ZL9->ZL9_STATUS,cStatus)
                ZL9->(ZL9PutLog(@cLog))
            endif
            ZL9->(MsUnLock())
        endif

    endif

    RestArea(aArea)
    RestArea(aAreaZL9)

    return(nil)

method SetPedido(cDoc,cSerie,cCliente,cLoja,cPedido,cForDev,cLojaFor,aItensSC6) class TAutomacaoDevolucaoIntercompany

    local aArea         as array
    local aAreaZL9      as array

    local cSC6KeySeek   as character

    local nSC6Item      as numeric
    local nSC6Itens     as numeric

    local nATItem       as numeric
    local nATValor      as numeric
    local nATPRUnit     as numeric
    local nATPRCVen     as numeric
    local nATQTDVen     as numeric
    local nATProduto    as numeric

    DEFAULT cPedido:=""

    aArea:=GetArea()
    aAreaZL9:=ZL9->(GetArea())

    SC5->(dbSetOrder(RetOrder("SC5","C5_FILIAL+C5_NUM")))
    if (SC5->(MsSeek(xFilial("SC5")+cPedido,.F.)))

        dbSelectArea("ZL9")
        ZL9->(dbSetOrder(1)) // ZL9_FILIAL,ZL9_CODEMP,ZL9_CODFIL,ZL9_DOCDEV,ZL9_SERDEV,ZL9_CLIDEV,ZL9_LOJDEV,R_E_C_N_O_,D_E_L_E_T_

        if (ZL9->(MsSeek(xFilial("ZL9")+cEmpAnt+cFilAnt+cDoc+cSerie+cCliente+cLoja)))
            if (ZL9->(RecLock("ZL9",.F.)))
                ZL9->ZL9_PEDIDO:=cPedido
                ZL9->ZL9_FORNEC:=cForDev
                ZL9->ZL9_LOJFOR:=cLojaFor
                ZL9->(MsUnLock())
            endif
        endif

        SC6->(dbSetOrder(RetOrder("SC5","C6_FILIAL+C6_NUM+C6_ITEM+C6_PRODUTO")))
        nSC6Itens:=len(aItensSC6)
        for nSC6Item:=1 to nSC6Itens
            nATItem:=aScan(aItensSC6[nSC6Item],{|x|x[1]=="C6_ITEM"})
            if (nATItem==0)
                loop
            endif
            nATProduto:=aScan(aItensSC6[nSC6Item],{|x|x[1]=="C6_PRODUTO"})
            if (nATProduto==0)
                loop
            endif
            cSC6KeySeek:=SC5->C5_FILIAL
            cSC6KeySeek+=SC5->C5_NUM
            cSC6KeySeek+=PadR(aItensSC6[nSC6Item][nATItem][2],getSX3Cache("C6_ITEM","X3_TAMANHO"))
            cSC6KeySeek+=PadR(aItensSC6[nSC6Item][nATProduto][2],getSX3Cache("C6_PRODUTO","X3_TAMANHO"))
            if (SC6->(dbSeek(cSC6KeySeek,.F.)))
                if (SC6->(recLock("SC6",.F.)))
                    nATQTDVen:=aScan(aItensSC6[nSC6Item],{|x|x[1]=="C6_QTDVEN"})
                    if (nATQTDVen>0)
                        SC6->C6_QTDVEN:=Max(SC6->C6_QTDVEN,aItensSC6[nSC6Item][nATQTDVen][2])
                    endif
                    nATPRCVen:=aScan(aItensSC6[nSC6Item],{|x|x[1]=="C6_PRCVEN"})
                    if (nATPRCVen>0)
                        SC6->C6_PRCVEN:=Max(SC6->C6_PRCVEN,aItensSC6[nSC6Item][nATPRCVen][2])
                    endif
                    nATPRUnit:=aScan(aItensSC6[nSC6Item],{|x|x[1]=="C6_PRUNIT"})
                    if (nATPRUnit>0)
                        SC6->C6_PRUNIT:=Max(SC6->C6_PRCVEN,aItensSC6[nSC6Item][nATPRUnit][2])
                    endif
                    nATValor:=aScan(aItensSC6[nSC6Item],{|x|x[1]=="C6_VALOR"})
                    if (nATValor>0)
                        SC6->C6_VALOR:=Max(SC6->C6_VALOR,aItensSC6[nSC6Item][nATValor][2])
                    endif
                    SC6->(MsUnLock())
                endif
            endif
        next nSC6Item

    endif

    RestArea(aArea)
    RestArea(aAreaZL9)

    return(nil)

method SetDocDev(cDoc,cSerie,cCliente,cLoja,cDocDev,cSerDev) class TAutomacaoDevolucaoIntercompany

    local aArea     as array
    local aAreaZL9  as array

    aArea:=GetArea()
    aAreaZL9:=ZL9->(GetArea())

    DEFAULT cDocDev:=""
    DEFAULT cSerDev:=""

    dbSelectArea("ZL9")
    ZL9->(dbSetOrder(1)) // ZL9_FILIAL,ZL9_CODEMP,ZL9_CODFIL,ZL9_DOCDEV,ZL9_SERDEV,ZL9_CLIDEV,ZL9_LOJDEV,R_E_C_N_O_,D_E_L_E_T_

    if (ZL9->(DBSeek(xFilial("ZL9")+cEmpAnt+cFilAnt+cDoc+cSerie+cCliente+cLoja)))

        if (ZL9->(RecLock("ZL9",.F.)))
            ZL9->ZL9_DOC:=cDocDev
            ZL9->ZL9_SERIE:=cSerDev
            ZL9->ZL9_STADOC:="1"
            ZL9->(MsUnLock())
            ZL9->(self:DocOriCmpAut(RecNo()))
        endif

    endif

    RestArea(aArea)
    RestArea(aAreaZL9)

return

method DocOriCmpAut(nZL9RecNo) class TAutomacaoDevolucaoIntercompany

    local aArea         as array
    local aPerg         as array

    local aNF           as array
    local aPA_NDF       as array

    local aRecSE5       as array
    local aEstorno      as array

    local aNDFDados     as array
    local aContabil     as array

    local bBlock        as block

    local cMsg          as character
    local cLog          as character
    local cSQL          as character
    local cTblTmp       as character

    local dDataBase     as date

    local lHelp         as logical
    local lDigita       as logical
    local lCompTit      as logical
    local lAglutina     as logical
    local lContabiliza  as logical

    local nHdl          as numeric
    local nTaxaPA       as numeric
    local nTaxaNF       as numeric
    local nSldComp      as numeric
    local nOperacao     as numeric
    local nSE2RECNO     as numeric

    paramtype nZL9RecNo as numeric optional default ZL9->(recNo())

    aArea:=getArea()

    ZL9->(MsGoTo(nZL9RecNo))

    cLog:="Pedido: "+ZL9->ZL9_PEDIDO
    cLog+=" Nota: "+ZL9->ZL9_DOC
    cLog+="-"
    cLog+=ZL9->ZL9_SERIE
    cLog+="-"+" NF Devolucao: "
    cLog+=ZL9->ZL9_DOCDEV
    cLog+="-"
    cLog+=ZL9->ZL9_SERDEV
    cLog+=" NF Original: "
    cLog+=ZL9->ZL9_DOCORI
    cLog+="-"
    cLog+=ZL9->ZL9_SERORI

    self:AddLog("Inicio Compensação Titulos: "+cLog )

    cSQL:=TAutDevIntQry():DocOriCmpAut(nZL9RecNo)
    
    cTblTmp:=MpSysOpenQuery(cSQL)

    aNF:=array(0)
    aPA_NDF:=array(0)

    while ((cTblTmp)->(!eof()))
        nSE2RECNO:=(cTblTmp)->SE2RECNO
        SE2->(DbGoTo(nSE2RECNO))
        if (SE2->E2_TIPO$(MVPAGANT+"|"+MV_CPNEG))
            aAdd(aPA_NDF,nSE2RECNO)
        else
            aAdd(aNF,nSE2RECNO)
        endif 
        (cTblTmp)->(DbSkip())
    end while

    (cTblTmp)->(dbCloseArea())

    lCompTit:=(!empty(aPA_NDF).and.(!empty(aNF)))

    if (lCompTit)
    
        Pergunte("AFI340",.F.,,,,,@aPerg)
        MV_PAR09:=2
        __SaveParam("AFI340",@aPerg)

        lDigita:=(MV_PAR09==1)
        lAglutina:=(MV_PAR08==1)
        lContabiliza:=(MV_PAR11==1)

        dDatabase:=Date()

        lCompTit:=FinCmpAut(@aNF,@aPA_NDF,@aContabil,@bBlock,@aEstorno,@nSldComp,@dDatabase,@nTaxaPA,@nTaxaNF,@nHdl,@nOperacao,@aRecSE5,@aNDFDados,@lHelp)

    endif

    cMsg:=cLog

    if (lCompTit)
        cMsg+=":: Compensação realizada com sucesso"
    else
        cMsg+=":: Ocorreu um erro no processo de compensação"
        varInfo("aNF",aNF)
        varInfo("aPA_NDF",aPA_NDF)
        if ZL9->(RecLock("ZL9",.F.))
            ZL9->(ZL9PutLog(@cMsg))
            ZL9->(MsUnLock())
        endif
    endif

    self:AddLog("Final Compensação Titulos: "+cMsg )

    self:AddLog("Final Compensação Titulos: "+cLog )

    restArea(aArea)

    return(lCompTit)

method ProcFat(cDoc,cSerie,cCliente,cLoja) class TAutomacaoDevolucaoIntercompany

    local aPerg         as array

    local aAreaSC5      as array
    local aAreaSC6      as array
    
    local aPvlNfs       as array
    local aBloqueio     as array
    local aRecSC6       as array
    local aSC9RecNos    as array

    local cEspecie      as character

    local cNumPed       as character

    local cSB1Filial    as character
    local cSC6Filial    as character
    local cSC9Filial    as character

    local nW            as numeric
    local nX            as numeric

    local nPesoLiq      as numeric
    local nVolumes      as numeric
    local nPesoBrut     as numeric
    local nQtdJaEnt     as numeric

    local nSC6RecNo     as numeric
    local nSC9RecNo     as numeric

    local lMa410LbNfs   as logical
    local xRetorno      as logical

    local uMa410LbNfs
    local uMaLibDoFat

    aAreaSC5:=SC5->(GetArea())
    aAreaSC6:=SC6->(GetArea())

    public xBiaVTotNf   as numeric
    xBiaVTotNf:=0

    public _XCRGATFAT   as logical
    _XCRGATFAT:=.T.

    public nFlagFT      as character
    nFlagFT:="S"

    public xVlFrtInf    as numeric
    xVlFrtInf:=0

    public nNovaCond:=nil

    private nTpFrete    as numeric
    nTpFrete:=2

    private nTransp     as character
    nTransp:=""

    aSize(self:aNotas,0)

    aPvlNfs:=array(0)
    aRecSC6:=array(0)
    aBloqueio:=array(0)
    aSC9RecNos:=array(0)

    cSB1Filial:=xFilial("SB1")
    cSC6Filial:=xFilial("SC6")
    cSC9Filial:=xFilial("SC9")

    xRetorno:=.T.

    if (empty(SC5->C5_NOTA))

        self:cSerieNF:=PADR(GetNewPar("MV_YSERFTP","1"),getSX3Cache("F2_DOC","X3_TAMANHO"))

        if (!empty(self:cSerieNF))

            xBiaVTotNf:=0
            _XCRGATFAT:=.T.
            nFlagFT:="S"
            xVlFrtInf:=0
            nNovaCond:=nil
            nTpFrete:=2
            nTransp:=SC5->C5_TRANSP
            cNumPed:=SC5->C5_NUM

            dbSelectArea("SC5")
            SC6->(dbSetOrder(1))

            if (SC6->(DBSeek(SC5->C5_FILIAL+cNumPed)))

                nVolumes:=0
                nPesoBrut:=0
                nPesoLiq:=0

                while (SC6->(!eof() .and. SC5->C5_FILIAL+cNumPed==SC6->C6_FILIAL+SC6->C6_NUM))

                    nQtdJaEnt:=SC6->C6_QTDENT

                    if ((SC6->C6_QTDVEN-nQtdJaEnt)>0)

                        nPos01:=aScan(aRecSC6,{|x|(x[1]=="") .and. (x[2]=="")})

                        if (nPos01==0)

                            aAdd(aRecSC6,{"","",array(0)})

                            nPos01:=Len(aRecSC6)

                        endif

                        aAdd(aRecSC6[nPos01][3],{SC6->(Recno()),SC6->C6_QTDVEN-nQtdJaEnt})

                        //capta os volumes dos itens que tem faturamento direto
                        SB1->(dbSetOrder(1))
                        SB1->(DBSeek(cSB1Filial+SC6->C6_PRODUTO))

                        nVolumes+=SC6->C6_QTDVEN-nQtdJaEnt
                        nPesoBrut+=SB1->B1_PESO*(SC6->C6_QTDVEN-nQtdJaEnt)
                        nPesoLiq+=SB1->B1_PESO*(SC6->C6_QTDVEN-nQtdJaEnt)
                        cEspecie:="VOLUME(S)"

                    endif

                    SC6->(DBSkip())

                end while

            endif

            aSC9RecNos:=array(0)

            //FATURAMENTO DOS ITENS APTOS
            For nW:=1 to Len(aRecSC6)

                //Realiza estorno de liberaÃ§Ã£o de estoque e credito
                SC9->(dbSetOrder(1))
                if (SC9->(DBSeek(cSC9Filial+cNumPed)))

                    while (SC9->(!eof() .and. cSC9Filial+cNumPed ==SC9->C9_FILIAL+SC9->C9_PEDIDO))

                        if (empty(SC9->C9_NFISCAL))

                            SC6->(dbSetOrder(1))
                            SC6->(DBSeek(cSC6Filial+SC9->C9_PEDIDO+SC9->C9_ITEM))

                            //Begin Transaction
                            SC9->(a460Estorna())
                            //End Transaction

                        endif

                        SC9->(DBSkip())

                    end while

                endif

                cCodProduto:=''

                For nX:=1 to Len(aRecSC6[nW][3])

                    nSC6RecNo:=aRecSC6[nW][3][nX][1]
                    SC6->(dbGoTo(nSC6RecNo))

                    nQtdLib:=aRecSC6[nW][3][nX][2]

                    if (nQtdLib>0)

                        cCodProduto:=SC6->C6_PRODUTO

                        lLiberado:=.T.

                        SC6->(self:AddLog(C6_FILIAL+C6_NUM+C6_ITEM+C6_PRODUTO+"MaLibDoFatself: " +cValToChar(uMaLibDoFat:=MaLibDoFat(nSC6RecNo,@nQtdLib,.F.,.F.,.T.,.T.,.F.,.F.))))

                        if (!empty(uMaLibDoFat))
                            SC9->(dbSetOrder(retOrder("SC9","C9_FILIAL+C9_PRODUTO+C9_PEDIDO+C9_ITEM")))
                            if (SC9->(dbSeek(SC6->(C6_FILIAL+C6_PRODUTO+C6_NUM+C6_ITEM),.F.)))
                                nSC9RecNo:=SC9->(RecNo())
                                if (aScan(aSC9RecNos,{|nRecNo|(nRecno==nSC9RecNo)})==0)
                                    aAdd(aSC9RecNos,nSC9RecNo)
                                endif
                            endif
                        endif

                    endif

                Next nX

                self:AddLog("MaLiberOk ==>"+cValToChar(MaLiberOk({SC5->C5_NUM},.F.)))

                aSize(aPvlNfs,0)
                aSize(aBloqueio,0)

                //Checa itens liberados

                SX1->(dbSetOrder(1))
                if (SX1->(dbSeek(PadR("MTA440",Len(X1_GRUPO))+"01",.F.)))
                    if SX1->(recLock("SX1",.F.))
                        SX1->X1_PRESEL:=1
                        SX1->(MsUnLock())
                        recLock("SX1",.F.)
                    endif
                endif
                if (SX1->(dbSeek(PadR("MTA440",Len(X1_GRUPO))+"02",.F.)))
                    if SX1->(recLock("SX1",.F.))
                        SX1->X1_PRESEL:=1
                        SX1->(MsUnLock())
                        recLock("SX1",.F.)
                    endif
                endif

                Pergunte("MTA440",.F.,,,,,@aPerg)
                MV_PAR01:=1
                MV_PAR02:=1
                __SaveParam("MTA440",@aPerg)

                lMa410LbNfs:=.F.

                if (select("MA410PVNFS")>0)
                    //Alias already in use: MA410PVNFS on MA410LBNFS(MATN410C.PRW)
                    MA410PVNFS->(dbCloseArea())
                    dbSelectArea("SC9")
                endif

                if (select("Ma410PvlNfs")>0)
                    //Alias already in use: Ma410PvlNfs on MA410LBNFS(MATN410C.PRW)
                    Ma410PvlNfs->(dbCloseArea())
                    dbSelectArea("SC9")
                endif

                uMa410LbNfs:=Ma410LbNfs(2,@aPvlNfs,@aBloqueio)
                lMa410LbNfs:=((valType(uMa410LbNfs)=="L").and.(uMa410LbNfs))

                self:AddLog("Ma410LbNfs 2 ==>"+cValToChar(lMa410LbNfs))
                lMa410LbNfs:=((valType(uMa410LbNfs)=="L").and.(uMa410LbNfs))

                if (lMa410LbNfs)

                    if (select("MA410PVNFS")>0)
                        //Alias already in use: MA410PVNFS on MA410LBNFS(MATN410C.PRW)
                        MA410PVNFS->(dbCloseArea())
                        dbSelectArea("SC9")
                    endif

                    if (select("Ma410PvlNfs")>0)
                        //Alias already in use: Ma410PvlNfs on MA410LBNFS(MATN410C.PRW)
                        Ma410PvlNfs->(dbCloseArea())
                        dbSelectArea("SC9")
                    endif

                    uMa410LbNfs:=Ma410LbNfs(1,@aPvlNfs,@aBloqueio)
                    lMa410LbNfs:=((valType(uMa410LbNfs)=="L").and.(uMa410LbNfs))

                    self:AddLog("Ma410LbNfs 1 ==>"+cValToChar(lMa410LbNfs))

                endif

                if (SX1->(dbSeek(PadR("MTA440",Len(X1_GRUPO))+"01",.F.)))
                    SX1->(MsUnLock())
                endif

                if (SX1->(dbSeek(PadR("MTA440",Len(X1_GRUPO))+"02",.F.)))
                    SX1->(MsUnLock())
                endif

                if ((lMa410LbNfs).and.(empty(aPvlNfs).and.empty(aBloqueio)))
                    SC5->(aPvlNfs:=getaPvlNfs(aSC9RecNos))
                endif

                if ((Len(aBloqueio)>0).or.(Len(aPvlNfs)==0))

                    self:AddLog(if(Len(aBloqueio)>0,"Bloqueio -> Credito: ["+aBloqueio[1][6]+"] - Estoque: ["+aBloqueio[1][7]+"]","Ma410LbNfs -> aPvlNfs vazio!"))

                    xRetorno:=.F.

                else

                    //apos acerto de volumes realiza o faturamento
                    xRetorno:=self:DocSaida(SC5->C5_NUM,cDoc,cSerie,cCliente,cLoja,aPvlNfs)

                endif

            Next nW

        else

            xRetorno:=.F.

            self:AddLog("Serie ["+self:cSerieNF+"]"+SC5->C5_NUM+" não identificada na Empresa\Filial "+cEmpAnt+"\"+cFilAnt+"!")

        endif

    endif

    if (!xRetorno)

        if (InTransact())
            DisarmTransaction()
        endif

    endif

    _XCRGATFAT:=.F.

    RestArea(aAreaSC5)
    RestArea(aAreaSC6)

Return(xRetorno)

method DocSaida(cPedido,cDoc,cSerie,cCliente,cLoja,aPvlNfs) class TAutomacaoDevolucaoIntercompany

    local aAreaSC5      as array
    local aAreaSC6      as array

    local aPerg         as array
    local aNotas 	    as array
    local aTotPvlNfs    as array

    local bAtuPGerNF    as block

    local cNota		    as character
    local cSerie		as character
    
    local cSF2Filial    as character
    local cSF2KeySeek   as character

    local nX		    as numeric
    local nItemNf	    as numeric

    local lSF2Foud      as logical

    cSF2Filial:=xFilial("SF2")

    aAreaSC5:=SC5->(GetArea())
    aAreaSC6:=SC6->(GetArea())

    aPerg:=array(0)
    aNotas:=array(0)
    aTotPvlNfs:=array(0)
    nItemNf:=0
    cNota:=""
    cSerie:=self:cSerieNF

    //inclui no vetor principal para faturamento
    aAdd(aTotPvlNfs,{cCliente+cLoja,cSerie,aPvlNfs})

    For nX:=1 to Len(aTotPvlNfs)

        aSize(aNotas,0)

        nItemNf:=a460NumIt(aTotPvlNfs[nX][2])

        aAdd(aNotas,{aTotPvlNfs[nX][2],array(0)})

        //Quebra o pedido em notas caso tenha mais itens do que o determinado em parametro
        if (Len(aTotPvlNfs[nX][3])>=nItemNf)

            For nX:=1 To Len(aTotPvlNfs[nX][3])

                if (Len(aNotas[Len(aNotas)][2]) >=nItemNf)

                    aAdd(aNotas,{aTotPvlNfs[nX][2],array(0)})

                endif

                aAdd(aNotas[Len(aNotas)][2],aClone(aTotPvlNfs[nX][3][nX]))

            Next nX

        else

            aNotas[Len(aNotas)][2]:=aClone(aTotPvlNfs[nX][3])

        endif

        For nX:=1 To Len(aNotas)

            //Chama grupo de perguntas para emissão da nf fiscal
            Pergunte("MT460A",.F.,,,,,@aPerg)

            MV_PAR01:=2 // Mostra Lanç.Contab ?
            MV_PAR02:=1 // Aglut. Lançamentos ?
            MV_PAR03:=1 // Lanç.Contab.On-Line ?

            MV_PAR17:=1 // Gera Titulo da guia (SE2) ?
            MV_PAR18:=1 // Gera guia recolhimento (SF6) ?
            MV_PAR19:=2 // Gera Titulo ICMS Próprio ?
            MV_PAR20:=2 // Gera Guia ICMS Próprio ?

            MV_PAR22:=2 // Gera Titulo por Produto ?
            MV_PAR23:=2 // Gera Guia por Produto ?
            MV_PAR24:=1 // Gera Guia ICM Compl. UF Dest (DifAL) ?
            MV_PAR25:=1 // Gera Guia FECP da UF Destino ?

            __SaveParam("MT460A",@aPerg)

            //Rotina para geração da nf fiscal
            bAtuPGerNF:={||AtuPGerNF()}
            cNota:=MaPvlNfs(aNotas[nX][2],aNotas[nX][1],(MV_PAR01==1),(MV_PAR02==1),(MV_PAR03==1),(MV_PAR04==1),(MV_PAR05==1),MV_PAR07,MV_PAR08,(MV_PAR15==1),(MV_PAR16==2),nil,nil,bAtuPGerNF)

            cNota:=PadR(cNota,getsx3cache("F2_DOC","X3_TAMANHO"))
            cSerie:=PadR(cSerie,getsx3cache("F2_SERIE","X3_TAMANHO"))
            cCliente:=PadR(cCliente,getsx3cache("F2_CLIENTE","X3_TAMANHO"))
            cLoja:=PadR(cLoja,getsx3cache("F2_LOJA","X3_TAMANHO"))

            cSF2KeySeek:=cSF2Filial
            cSF2KeySeek+=cNota
            cSF2KeySeek+=cSerie
            /*
			cSF2KeySeek+=cCliente
			cSF2KeySeek+=cLoja
            */
            SF2->(dbSetOrder(retOrder("SF2","F2_FILIAL+F2_DOC+F2_SERIE+F2_CLIENTE+F2_LOJA")))
            lSF2Foud:=(SF2->(MsSeek(cSF2KeySeek,.F.)))

            if (!empty(cNota).and.(lSF2Foud))

                aAdd(self:aNotas,{cNota,cSerie,""})

                self:SetDocDev(cDoc,cSerie,cCliente,cLoja,cNota,cSerie)

                self:SetStatus(cDoc,cSerie,cCliente,cLoja,"4","Pedido faturado") // "Devolucao Intercompany - Pedido Faturado"

            else

                self:SetStatus(cDoc,cSerie,cCliente,cLoja,"E","Ocorreu erro ao gerar a nota fiscal de saida!")

                Return .F.

            endif

        Next nX

    Next nX

    RestArea(aAreaSC5)
    RestArea(aAreaSC6)

Return(.T.)

static function AtuPGerNF()
    if (SF2->(recLock("SF2",.F.)))
        SF2->F2_YSUBTP:="DC"
        SF2->F2_YDES:=Date()
        SF2->(MsUnLock())
    endif
return

method ProcEntrada(aDocEntrada,lOnlyDistr) class TAutomacaoDevolucaoIntercompany

    local aArea         as array
    local aPerg         as array
    local aCabSF1       as array
    local aItensSF1     as array

    local bError        as block
    local bErrorBlock   as block

    local cError        as character
    local cLogTxt       as character
    local cBckFunc      as character
    local cCondPag      as character

    local cEmpOri       as character
    local cFilOri       as character
    local cPedOri       as character

    local cDoc          as character
    local cSerie        as character
    local cCodFor       as character
    local cLojaFor      as character
    local cCodCli       as character
    local cLojaCli      as character
    local cEnderec      as character

    local cSA1Filial    as character

    local lHasError     as logical

    local nY            as numeric

    lHasError:=.F.

    DEFAULT aDocEntrada:=array(0)

    aArea:=GetArea()

    aPerg:=array(0)
    aCabSF1:=array(0)
    aItensSF1:=array(0)

    cBckFunc:=FunName()

    private lMsErroAuto as logical
    lMsErroAuto:=.F.

    private lMsHelpAuto as logical
    lMsHelpAuto:=.T.
    
    private lAutoErrNoFile as logical
    lAutoErrNoFile:=.T.

    cSA1Filial:=xFilial("SA1")

    Begin Transaction

        bError:={|oError|evalBlock():BreakError(oError,@lHasError,!IsBlind(),"ProcEntrada","Erro Em ProcEntrada"),cError:=if(lHasError,oError:Description,"")}
        bErrorBlock:=ErrorBlock(bError)

        Begin Sequence

            // Processa primeiro Documentos de entrada
            For nY:=1 To Len(aDocEntrada)

                aCabSF1:=aClone(aDocEntrada[nY][1])
                aItensSF1:=aClone(aDocEntrada[nY][2])

                cEmpOri:=aDocEntrada[nY][3]
                cFilOri:=aDocEntrada[nY][4]
                cPedOri:=aDocEntrada[nY][5]
                cDoc:=aDocEntrada[nY][6]
                cSerie:=aDocEntrada[nY][7]
                cCodFor:=aDocEntrada[nY][8]
                cLojaFor:=aDocEntrada[nY][9]
                cCondPag:=aDocEntrada[nY][10]
                cCodCli:=aDocEntrada[nY][11]
                cLojaCli:=aDocEntrada[nY][12]

                aSize(aPerg,0)

                lMsErroAuto:=.F.
                lMsHelpAuto:=.T.
                lAutoErrNoFile:=.T.

                if (!lOnlyDistr)

                    self:AddLog("Incluindo documento de entrada "+cDoc+"/"+ cSerie)

                    SetFunName("MATA103")

                    Pergunte("MTA103",.F.,,,,,@aPerg)

                    MV_PAR01:=2 // Mostra Lanç.Contab ?
                    MV_PAR02:=1 // Aglut Lançamentos ?
                    MV_PAR06:=1 // Lancto.Cont.On-Line ?

                    __SaveParam("MTA103",@aPerg)

                    SA1->(dbSetOrder(1))
                    SA1->(DbSeek(cSA1Filial+PADR(cCodCli,GetSX3Cache("D1_FORNECE","X3_TAMANHO"))+PADR(cLojaCli,GetSX3Cache("D1_LOJA","X3_TAMANHO"))))

                    // __cInternet:=""

                    VarInfo("aCabSF1",aCabSF1)

                    VarInfo("aItensSF1",aItensSF1)

                    MSExecAuto({|x,y,z| MATA103(x,y,z)},aCabSF1,aItensSF1,3,.T.)

                    SetFunName(cBckFunc)

                    //TODO: Remover o WorkAround abaixo revisando a logica 
                    if (lMsErroAuto)
                        if (InTransact())
                            lMsErroAuto:=!(SF1->F1_DOC==aCabSF1[4][2])
                            lMsErroAuto:=((lMsErroAuto).and.!(SF1->F1_SERIE==aCabSF1[5][2]))
                            lMsErroAuto:=((lMsErroAuto).and.!(SF1->F1_FORNECE==aCabSF1[6][2]))
                            lMsErroAuto:=((lMsErroAuto).and.!(SF1->F1_LOJA==aCabSF1[7][2]))
                            lMsErroAuto:=((lMsErroAuto).and.!(SF1->F1_EMISSAO==aCabSF1[8][2]))
                            lMsErroAuto:=((lMsErroAuto).and.!(SF1->F1_CHVNFE==aCabSF1[9][2]))
                        endif
                    endif

                endif

                if (lMsErroAuto)

                    cLogTxt:="Erro ao gerar documento de entrada "
                    cLogTxt+=cDoc
                    cLogTxt+="/"
                    cLogTxt+=cSerie+"-"
                    cLogTxt+=__cCRLF
                    cLogTxt+=self:GetErrorLog()

                    VarInfo("cLogTxt",cLogTxt)

                    VarInfo("aCabSF1",aCabSF1)

                    VarInfo("aItensSF1",aItensSF1)

                    if (InTransact())
                        DisarmTransaction()
                    endif

                    self:SetStatusDest(cDoc,cSerie,cCodFor,cLojaFor,"E",@cLogTxt)

                else

                    if (!lOnlyDistr)
                        cLogTxt:="Documento de entrada incluido"
                        self:SetStatusDest(cDoc,cSerie,cCodFor,cLojaFor,"5",@cLogTxt) // "Devolucao Intercompany - NF Incluida"
                    endif

                    cEnderec:=self:GetEndereco(aItensSF1[1][13][2],aItensSF1[1][14][2],cCodCli,cLojaCli,cCodFor,cLojaFor)

                    if (self:fDistribui(cDoc,cSerie,cCodCli,cLojaCli,cEnderec,"6",.T.,cCodFor,cLojaFor)) // "Devolucao Intercompany - NF Enderecada"

                        cLogTxt:="Processo finalizado"
                        self:SetStatusDest(cDoc,cSerie,cCodFor,cLojaFor,"F",@cLogTxt) // "Processo Finalizado"

                    endif

                endif

            Next nY

        End Sequence

        ErrorBlock(bErrorblock)

        if (((ValType(cError)<>"U").and.!empty(cError) ).or.(lMsErroAuto))

            RollBackSX8()

            if (InTransact())
                DisarmTransaction()
            endif

            DEFAULT cDoc:=""
            DEFAULT cSerie:=""

            DEFAULT cError:="UNEXPECTED EXCEPTION"

            self:AddLog("EXCEPTION "+cDoc+"/"+cSerie+"-"+cError)

        endif

    End Transaction

    RestArea(aArea)

    Return(!lMsErroAuto)

method LoadFiliais() class TAutomacaoDevolucaoIntercompany

    local aArea     as array
    local aFiliais  as array

    local lOpenSM0  as logical
    local lSM0Open  as logical

    aArea:=getArea()
    aFiliais:=array(0)

    lOpenSM0:=.F.
    lSM0Open:=.F.

    lSM0Open:=(!Select("SM0")==0)

    // abre o sigamat.emp
    if (!lSM0Open)
        private cArqEmp:="sigamat.emp"
        lOpenSM0:=OpenSM0()
    endif

    // le o sigamat.emp
    SM0->( DBGoTop() )

    while SM0->( !eof() )
        if SM0->( !Deleted() )
            if ( AllTrim(SM0->M0_CODIGO)$"01|05|07|13" )
                SM0->(aAdd(aFiliais,{M0_CODIGO,M0_CODFIL,M0_CGC,RECNO()}))
            endif
        endif
        SM0->( DBSkip() )
    end while

    if (.F.)
        SM0->(dbCloseArea())
    endif

    restArea(aArea)

Return(aFiliais)

method PercorreFiliais() class TAutomacaoDevolucaoIntercompany

    local nFilial   as numeric
    local nFiliais  as numeric

    nFiliais:=Len(self:aFiliais)
    for nFilial:=1 to nFiliais
        U_EJOBDEVINTE({self:aFiliais[nFilial][1],self:aFiliais[nFilial][2],self:aFiliais})
    next nFilial

    return

method ExisteFuncaoEmProcessamento(cFuncProc,cEmp,cFil) class TAutomacaoDevolucaoIntercompany

    local aThreads  as array

    local lRet      as logical

    local nW        as numeric

    aThreads:=GetUserInfoArray()

    lRet:=.T.

    For nW:=1 To Len(aThreads)

        if ((aThreads[nW,5]$cFuncProc).and.(aThreads[nW,3]<>ThreadId()))

            if (empty(aThreads[nW,11]))

                lRet:=.F.

                Exit

            elseif ((cFuncProc+"|"+cEmp+"|"+cFil+"|")$aThreads[nW,11])

                lRet:=.F.

                Exit

            endif

        endif

    Next nW

Return(lRet)

method AddLog(cMsg) class TAutomacaoDevolucaoIntercompany
    paramtype cMsg as character default ""
    cMsg:=("["+cEmpAnt+cFilAnt +"] ["+DToC(Date())+"] ["+Time() +"] "+"["+PadR("TAutomacaoDevolucaoIntercompany",32)+"] "+cMsg)
    ConOut(cMsg)
    FWLogMsg("MESSAGE"/*<cSeverity>*/,/*[cTransactionId]*/,"LOG"/*<cGroup>*/,"TAutomacaoDevolucaoIntercompany"/*<cCategory>*/,ProcName()/*<cStep >*/,"TAutomacaoDevolucaoIntercompany"/*<cMsgId>*/,cMsg/*<cMessage>*/,0/*<nMensure>*/,0/*<nElapseTime>*/,array(0)/*<aMessage>*/)
    return

method AddErro(nRecno,cError) class TAutomacaoDevolucaoIntercompany

    paramtype nRecno as numeric optional default ZL9->(recNo())
    paramtype cError as character optional default ""

    if (!empty(cError).and.(nRecno>0))
        aAdd(self:aErros,{nRecno,cError})
    endif

    return

method GravaErro() class TAutomacaoDevolucaoIntercompany

    local aArea     as array
    
    local nErro     as numeric
    local nErros    as numeric
    local nZL9RecNo as numeric

    aArea:=getArea()

    nErros:=Len(self:aErros)

    if (nErros>0)
        dbSelectArea("ZL9")
        self:AddLog("Gravando logs de erros") // Gravo aqui pois eh depois do rollback
        For nErro:=1 To nErros
            nZL9RecNo:=self:aErros[nW][1]
            ZL9->(MsGoTo(nZL9RecNo))
            if (ZL9->(!eof().and.(RecNo()==nZL9RecNo)))
                if (ZL9->(Reclock("ZL9",.F.)))
                    ZL9->ZL9_STAERR:="E"
                    ZL9->(ZL9PutLog(@self:aErros[nErro][2]))
                    ZL9->(MSUnLock())
                endif
            endif
        Next nErro
        aSize(self:aErros,0)
    endif

    restArea(aArea)

    return(nil)

method GetErrorLog() class TAutomacaoDevolucaoIntercompany

    local aError    as array

    local cError     as character
    
    local nError    as numeric
    local nErrors   as numeric

    DEFAULT __cCRLF:=CRLF

    aError:=GetAutoGrLog()

    cError:=""

    nErrors:=len(aError)
    for nError:=1 to nErrors
        cError+=aError[nError]
        cError+=__cCRLF
    next nError

    return(cError)

method CreatePath(cPath) class TAutomacaoDevolucaoIntercompany

    local lCreate   as logical

    lCreate:=dirTools():MakeDir(cPath)

    if (!lCreate)
        Conout("TAutomacaoDevolucaoIntercompany - Erro ao criar pasta")
    endif

    return(lCreate)

method MVNumItemVld(lLock) class TAutomacaoDevolucaoIntercompany

    local aArea     as array
    local aAreaSX6  as array
    
    local lLockX6   as logical

    aArea:=getArea()
    aAreaSX6:=SX6->(GetArea())

    dbSelectArea( "SX6" )

    lLockX6:=GetMV("MV_NUMITEN",.T.)

    if (lLockX6)

        DEFAULT lLock:=.T.
        if (lLock)
            lLockX6:=SX6->(MsRLock())
            self:AddLog('TAutomacaoDevolucaoIntercompany - lock -> MV_NUMITEN '+if(lLockX6,".T.",".F. (travado! [Feche a tela de pedido de venda]) "+TcInternal(53)))
        else
            lLockX6:=.F.
            SX6->(MsUnLock())
            self:AddLog('TAutomacaoDevolucaoIntercompany - lock -> MV_NUMITEN '+if(lLockX6,".T.",".F. (liberado!) "+TcInternal(53)))
        endif
    endif

    restArea(aAreaSX6)
    restArea(aArea)

Return(lLockX6)

static function getaPvlNfs(aSC9RecNos as array) as array

    local aPvlNfs 		as array

    local nRecNo 		as numeric
    local nRecNos		as numeric
    local nSC9RecNo		as numeric

    aPvlNfs:=array(0)

    nRecNos:=len(aSC9RecNos)
    for nRecNo:=1 to nRecNos

        nSC9RecNo:=aSC9RecNos[nRecNo]
        SC9->(dbGoTo(nSC9RecNo))

        SC6->(dbSetOrder(1))
        SC6->(MsSeek(xFilial("SC6")+SC9->(C9_PEDIDO+C9_ITEM+C9_PRODUTO)))

        SE4->(dbSetOrder(1))
        SE4->(MsSeek(xFilial("SE4")+SC5->C5_CONDPAG) )

        SB1->(dbSetOrder(1))
        SB1->(MsSeek(xFilial("SB1")+SC6->C6_PRODUTO))

        SB2->(dbSetOrder(1))
        SB2->(MsSeek(xFilial("SB2")+SC9->(C9_PRODUTO+C9_LOCAL)))

        SF4->(dbSetOrder(1))
        SF4->(MsSeek(xFilial("SF4")+SC6->C6_TES))

        SC9->(aAdd(aPvlNfs,{;
                    C9_PEDIDO,;
                    C9_ITEM,;
                    C9_SEQUEN,;
                    C9_QTDLIB,;
                    C9_PRCVEN,;
                    C9_PRODUTO,;
                    (SF4->F4_ISS=="S"),;
                    nSC9RecNo,;
                    SC5->(RecNo()),;
                    SC6->(RecNo()),;
                    SE4->(RecNo()),;
                    SB1->(RecNo()),;
                    SB2->(RecNo()),;
                    SF4->(RecNo()),;
                    C9_LOCAL,;
                    0,;
                    C9_QTDLIB2,;
                    (SF4->F4_DUPLIC=="S");
                    };
                );
        )

    next nRecNo

    return(aPvlNfs)

static function ZL9PutLog(cLog as character) as logical
    
    local cZL9Log       as character
    
    local lZL9Lock      as logical
    local lZL9IsLocked  as logical
    
    DEFAULT cLog:=""
    
    if (!empty(cLog))

        lZL9IsLocked:=ZL9->(IsLocked())
        lZL9Lock:=((lZL9IsLocked).or.(ZL9->((!eof()).and.(recLock("ZL9",.F.)))))

        if (lZL9Lock)
            DEFAULT __cCRLF:=CRLF
            cZL9Log:=DToS(Date())
            cZL9Log+="T"
            cZL9Log+=Time()
            cZL9Log+=__cCRLF
            cZL9Log+=cLog
            cZL9Log+=__cCRLF
            cZL9Log+=replicate("-",80)
            cZL9Log+=__cCRLF
            cZL9Log+=ZL9->ZL9_LOG
            ZL9->ZL9_LOG:=cZL9Log
            if (!lZL9IsLocked)
                SZ9->(MsUnLock())
            endif
        endif

        cLog:=""

    endif

    DEFAULT lZL9Lock:=.F.

    return(lZL9Lock)
