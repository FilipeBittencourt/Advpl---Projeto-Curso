#Include "TOTVS.CH"
#Include "Protheus.CH"
#INCLUDE "TOPCONN.CH"

Class TCotacaoCompra from LongClassName

	Public Data oObj
	Public Data oItem
	Public Data oResult	
	
	Method GatCab()
	Method GatItem()
	Method ValidaCab()
	Method ValidaItem()
	Method GetCabecalho()
	Method GetItens()
	Method Ordem(aLinha)
	Method ForneceUnico() 
	
	Public Method Incluir()
	Public Method SetItemCotacao()
	Public Method Atualizar()
	Public Method Execute()
	Public Method New() Constructor		
EndClass

Method New() Class TCotacaoCompra
	::oResult 	:= TCCResultStruct():New()
Return

Method GatCab() Class TCotacaoCompra
Return 

Method GatItem(oObj) Class TCotacaoCompra
Return 

//todas validações do cabecalho
Method ValidaCab() Class TCotacaoCompra
Return 

//todas validações do item
Method ValidaItem(oObj) Class TCotacaoCompra		
Return 


Method GetCabecalho(cChaveFornece) Class TCotacaoCompra

	Local aCabec	:= {}
	Local oItem		:= Nil
	Local nI		:= 0
		
	For nI := 1 To ::oObj:oItens:GetCount()
	
		oItem	:= ::oObj:oItens:GetItem(nI)
		
		If (cChaveFornece == oItem:cFornece+oItem:cLoja)
			
			::GatCab() 
			::ValidaCab() 
			
			aAdd(aCabec,{"C8_FILIAL"	, cFilAnt								            })   
			aAdd(aCabec,{"C8_NUM" 		, PADR(::oObj:cNumero, TamSx3("C8_NUM")[1])			})
			aAdd(aCabec,{"C8_FORNECE"	, PADR(oItem:cFornece, TamSx3("C8_FORNECE")[1])		})
			aAdd(aCabec,{"C8_LOJA"		, PADR(oItem:cLoja, TamSx3("C8_LOJA")[1])			})
			aAdd(aCabec,{"C8_COND"		, PADR(oItem:cCond, TamSx3("C8_COND")[1])			})
			aAdd(aCabec,{"C8_CONTATO"	, PADR(oItem:cContato, TamSx3("C8_CONTATO")[1])		})
			aAdd(aCabec,{"C8_MOEDA" 	, 1													})	
			aAdd(aCabec,{"C8_EMISSAO"	, oItem:dEmissao									})
			
			aAdd(aCabec,{"C8_TOTFRE" 	, 0													})
			aAdd(aCabec,{"C8_DESPESA" 	, 0													})
			aAdd(aCabec,{"C8_DESPESA" 	, 0													})
			aAdd(aCabec,{"C8_SEGURO" 	, 0													})
			aAdd(aCabec,{"C8_DESC1" 	, 0													})
			aAdd(aCabec,{"C8_DESC2" 	, 0													})
			aAdd(aCabec,{"C8_DESC3" 	, 0													})
				
			aCabec := aClone(::Ordem(aCabec))
				
			
			Return aCabec
		EndIf
		
	Next nI		
			
Return aCabec

Method GetItens(cChaveFornece) Class TCotacaoCompra
	
	Local aItens   := {}
	Local aItem    := {}
	Local oItem    := Nil
	Local nI       := 0
	Local lSeekSC8 := .F.
	
	For nI := 1 To ::oObj:oItens:GetCount()
	
		aItem 	:= {}
		oItem	:= ::oObj:oItens:GetItem(nI)
		
		If (cChaveFornece == oItem:cFornece+oItem:cLoja)
		
			cChave	:= ""
			cChave	+= xFilial('SC8')
			cChave	+= PADR(::oObj:cNumero		, TamSx3("C8_NUM")[1])
			cChave	+= PADR(oItem:cFornece		, TamSx3("C8_FORNECE")[1])
			cChave	+= PADR(oItem:cLoja			, TamSx3("C8_LOJA")[1])	
			cChave	+= PADR(oItem:cItem			, TamSx3("C8_ITEM")[1])	
			cChave	+= PADR(oItem:cNumPro		, TamSx3("C8_NUMPRO")[1])	
			
			conout("cChave: "+cChave)
			
			DBSelectArea("SC8")
			SC8->(dbSetOrder(1)) // C8_FILIAL, C8_NUM, C8_FORNECE, C8_LOJA, C8_ITEM, C8_NUMPRO, C8_ITEMGRD, R_E_C_N_O_, D_E_L_E_T_	

			lSeekSC8	:= SC8->( dbSeek(cChave) )

			//|Tratamento para quando a cotação começa com a proposta 02 ou maior |
			If !lSeekSC8 .And. AllTrim( oItem:cNumPro ) != "01"

				cChave	:= ""
				cChave	+= xFilial('SC8')
				cChave	+= PADR(::oObj:cNumero		, TamSx3("C8_NUM")[1])
				cChave	+= PADR(oItem:cFornece		, TamSx3("C8_FORNECE")[1])
				cChave	+= PADR(oItem:cLoja				, TamSx3("C8_LOJA")[1])	
				cChave	+= PADR(oItem:cItem				, TamSx3("C8_ITEM")[1])	
				cChave	+= PADR("01"							, TamSx3("C8_NUMPRO")[1])	

				If SC8->( dbSeek(cChave) )

					lSeekSC8	:= .T.

					RecLock("SC8", .F.)
					SC8->C8_NUMPRO	:= oItem:cNumPro
					SC8->( MsUnLock() )

				EndIf

			EndIf

		  If lSeekSC8
		    	
		    _cTpFreteA	:= oItem:cTipoFrete
			
				aAdd(aItem, 	{ "C8_ITEM"    		, SC8->C8_ITEM   			, Nil })
				aAdd(aItem, 	{ "C8_NUMPRO"  		, SC8->C8_NUMPRO 			, Nil })
		    aAdd(aItem, 	{ "C8_PRODUTO" 		, SC8->C8_PRODUTO 			, Nil })
				
				aAdd(aItem, 	{ "C8_UM"      		, SC8->C8_UM   				, Nil })
				aAdd(aItem, 	{ "C8_SEGUM"   		, SC8->C8_SEGUM   			, Nil })
				aAdd(aItem, 	{ "C8_QTSEGUM" 		, SC8->C8_QTSEGUM   		, Nil })
								
				aAdd(aItem,		{"C8_FILENT"   		, cFilAnt            		, Nil })
				aAdd(aItem, 	{ "C8_QUANT"   		, SC8->C8_QUANT      		, Nil })
				aAdd(aItem, 	{ "C8_PRECO"   		, oItem:nPreco				, Nil })
				//aAdd(aItem, 	{ "C8_TOTAL"   		, oItem:nTotal		  		, Nil })
				aAdd(aItem, 	{ "C8_DESC"    		, SC8->C8_DESC		   		, Nil })
				aAdd(aItem, 	{ "C8_TES"     		, SC8->C8_TES        		, Nil })
				
				aAdd(aItem, 	{ "C8_YMARCA"  		, PADR(oItem:cMarca	, TamSx3("C8_YMARCA")[1])			, Nil })
				aAdd(aItem, 	{ "C8_YOBSCOM"    	, PADR(oItem:cObervacao, TamSx3("C8_YOBSCOM")[1])   	, Nil })
				aAdd(aItem, 	{ "C8_PRAZO"   		, oItem:nPrazo 											, Nil })
				aAdd(aItem, 	{ "C8_TPFRETE" 		, _cTpFreteA											, Nil })
				aAdd(aItem, 	{ "C8_ORCFOR"  		, PADR(oItem:cOrcForn, TamSx3("C8_ORCFOR")[1]) 			, Nil })
				aAdd(aItem, 	{ "C8_VALIDA"  		, stod(oItem:dValidade) 								, Nil })
				aAdd(aItem, 	{ "C8_YCOND"   		, oItem:cCondCotacao									, Nil })
				aAdd(aItem, 	{ "C8_YDATCHE" 		, dDataBase + oItem:nPrazo								, Nil })
				aAdd(aItem, 	{ "C8_DATPRF" 		, stod(oItem:dNecessidade)								, Nil })
				
				aAdd(aItem, 	{ "C8_CONTATO" 		, SC8->C8_CONTATO										, Nil })
				
				//aAdd(aItem, 	{ "C8_ALIIPI"  		, SC8->C8_ALIIPI  										, Nil })		
				//aAdd(aItem, 	{ "C8_YFLAG"   		, SC8->C8_YFLAG  										, Nil })
				//aAdd(aItem, 	{ "C8_YVLSUB"  		, SC8->C8_YVLSUB						 				, Nil })
							
				aAdd(aItem, 	{ "C8_YPRCBIZ" 		, SC8->C8_YPRCBIZ										, Nil })
				aAdd(aItem, 	{ "C8_YEMAIL"  		, SC8->C8_YEMAIL										, Nil })
				aAdd(aItem, 	{ "C8_FORMAIL" 		, SC8->C8_FORMAIL										, Nil })
				aAdd(aItem, 	{ "C8_YTPPSS" 		, cValtoChar(oItem:cTipoServico)						, Nil })
				
				aAdd(aItem,		{ "C8_YFINAL"  		, "S" 													, Nil })
				
				aItem := aClone(::Ordem(aItem))
		    	
				AAdd(aItens, aItem)
		
		    EndIf			
		
		EndIf
		    
    Next nI        
	    
Return aItens


Method SetItemCotacao() Class TCotacaoCompra
	
	Local cNumSC		:= ''
	Local cItemSC		:= ''
	Local nI			:= 0
	
	For nI := 1 To ::oObj:oItens:GetCount()
		cNumSC 	:= ::oObj:oItens:GetItem(nI):cNumSc
		cItemSc	:= ::oObj:oItens:GetItem(nI):cItemSc 
		
		//C8_FILIAL, C8_NUMSC, C8_ITEMSC, R_E_C_N_O_, D_E_L_E_T_	
		DbSelectArea('SC8')
		SC8->(DbSetOrder(12))
		If (SC8->(DbSeek(xFilial('SC8')+cNumSC+cItemSc)))
			::oObj:oItens:GetItem(nI):cItem := SC8->C8_ITEM
			Conout('SetItemCotacao: '+ SC8->C8_ITEM)
		EndIf
	Next nI
	
Return 

//ExecAuto MVC, diferente dos outros
Method Incluir() Class TCotacaoCompra
	
	Local lOk          := .T.
	Local cMsgLog      := ""
	
	Local oModel       := Nil
	Local oModGrp      := Nil
	Local oModCot      := Nil
	Local oModPrd      := Nil
	Local lBloq        := .F.
	
	Local cAliasTemp   := Nil
	Local cQuery       := ""
	
	Local nSBM         := 0
	Local nSC1         := 0
	Local nSC8         := 0
	Local aErros       := {}
	
	Local aListFornece := {} // A2_COD+A2_LOJA
	Local cNumSC       := ''
	
	Private l150Propost	:= .F. 
		
	If (::oObj:oItens:GetCount() > 0)
		cNumSC := ::oObj:oItens:GetItem(1):cNumSc
	EndIf
	aListFornece := ::ForneceUnico()
	
	VarInfo("aListFornece => ", aListFornece)
	
	If (Len(aListFornece) > 0)
		
		oModel  := FWLoadModel( "MATA131" )

		oModel:SetOperation(3)
		oModel:Activate()
			
		oModel:GetModel("SC1DETAIL"):SetNoUpdateLine(lBloq)
		oModel:GetModel("SBMDETAIL"):SetNoUpdateline(lBloq)
		oModel:GetModel("SC1DETAIL"):SetNoInsertLine(lBloq)
		oModel:GetModel("SBMDETAIL"):SetNoInsertLine(lBloq)
		
		nSBM		:= 1
		
		cAliasTemp	:= GetNextAlias()
		
		cQuery := " SELECT GRUPO=C1_YGRUPO											"
		cQuery += " FROM "+RetSqlName("SC1")+"	SC1									"
		cQuery += " WHERE SC1.C1_FILIAL			= '" + xFilial('SC1') +"'			"
		cQuery += " AND SC1.C1_NUM				= '" + cNumSC +"'					"
		cQuery += " AND SC1.D_E_L_E_T_			= ''								"
		cQuery += " GROUP BY SC1.C1_YGRUPO											"
	     
	     
		TcQuery cQuery New Alias (cAliasTemp)
		While !(cAliasTemp)->( EoF() )
	    	
	    oModGrp		:= oModel:GetModel('SBMDETAIL')
			If (nSBM != 1)//primeira item não precisa adicionar linha no grid
				oModGrp:AddLine()
			EndIf
			
			DbSelectArea('SBM')
			SBM->(DbSetOrder(1))
			SBM->(DbSeek(xFilial('SBM')+(cAliasTemp)->GRUPO))
		
			oModGrp:LoadValue("BM_GRUPO"		, SBM->BM_GRUPO) 
			oModGrp:LoadValue("BM_DESC"			, SBM->BM_DESC)
			
			Conout("BM_GRUPO => "+  SBM->BM_GRUPO)
			
			DbSelectArea('SC1')
			SC1->(DbSetOrder(1))
			SC1->(DbSeek(xFilial('SC1')+cNumSC))
			
			nSC1	:= 1
			While (!SC1->(Eof()) .And. xFilial('SC1')+cNumSC == SC1->(C1_FILIAL+C1_NUM))
				
				DbSelectArea('SB1')
				SB1->(DbSetOrder(1))
				SB1->(DbSeek(xFilial('SB1')+SC1->C1_PRODUTO))
				
				//desconsiderar produtos que não so do grupo corrente
				If (Alltrim(SB1->B1_GRUPO) != AllTrim(SBM->BM_GRUPO)) 
					SC1->(DbSkip())
					Loop
				EndIf
				
				oModPrd	:= oModel:GetModel('SC1DETAIL')
				If (nSC1 != 1)//primeira item não precisa adicionar linha no grid
					oModPrd:AddLine()
				EndIf
				
				Conout("C1_NUM+C1_ITEM+C1_ITEMGRD => "+  SC1->(C1_NUM+C1_ITEM+C1_ITEMGRD))
			
				
				oModPrd:LoadValue("ITEMSC"			, SC1->(C1_NUM+C1_ITEM+C1_ITEMGRD)) 
				oModPrd:LoadValue("C1_PRODUTO"		, SC1->C1_PRODUTO) 
				oModPrd:LoadValue("C1_DESCRI"		, SC1->C1_DESCRI) 
				oModPrd:LoadValue("C1_QUANT"		, SC1->C1_QUANT) 
				oModPrd:LoadValue("C1_DATPRF"		, SC1->C1_DATPRF) 
				oModPrd:LoadValue("C1_OBS"			, SC1->C1_OBS) 
				
				For nSC8 := 1 To Len (aListFornece)
					
					oModCot := oModel:GetModel('SC8DETAIL')
					If (nSC8 != 1)//primeira item não precisa adicionar linha no grid
						oModCot:AddLine()
					EndIf
					
					DbSelectArea('SA2')
					SA2->(DbSetOrder(1))
					SA2->(DbSeek(xFilial('SA2')+aListFornece[nSC8]))
					
					Conout("A2_COD"+ SA2->A2_COD)
					
					oModCot:SetValue("C8_FORNECE"		, SA2->A2_COD) 
					oModCot:SetValue("C8_LOJA"			, SA2->A2_LOJA) 
					oModCot:SetValue("C8_FORNOME"		, SA2->A2_NOME) 
					oModCot:SetValue("C8_FORMAIL"		, SA2->A2_EMAIL) 
					oModCot:SetValue("C8_OBS"			, '') 
					oModCot:SetValue("C8_CRITER"		, 'INCLUSAO MANUAL') 
					oModCot:SetValue("C8_COND"			, SA2->A2_COND) 
					oModCot:SetValue("C8_CONTATO"		, 'AUTO') 
					
				Next nSC8
				
				nSC1 := nSC1 + 1
				SC1->(DbSkip())
			EndDo
			
			nSBM := nSBM + 1
	    (cAliasTemp)->(DbSkip())
	  EndDo
	    
		(cAliasTemp)->(DbCloseArea())
		
		If oModel:VldData()
			oModel:CommitData()
			::oObj:cNumero 		:= oModel:GetModel("SC8DETAIL"):Getvalue("C8_NUM")
			
			lOk			:= .T.
			cMsgLog 	:= ""
			Conout("::oObj:cNumero => "+ ::oObj:cNumero)
		Else
			
			aErros := oModel:GetErrorMessage()
			
			lOk			:= .F.
			cMsgLog 	:= "[Cotação da SC: "+cNumSC+"] Erro => "+ CRLF
			cMsgLog 	+= "Id do formulário de origem:"  + ' [' + cValToChar(aErros[01]) + '], '	
		    cMsgLog 	+= "Id do campo de origem: "      + ' [' + cValToChar(aErros[02]) + '], '
		    cMsgLog 	+= "Id do formulário de erro: "   + ' [' + cValToChar(aErros[03]) + '], '
		    cMsgLog 	+= "Id do campo de erro: "        + ' [' + cValToChar(aErros[04]) + '], '
		    cMsgLog 	+= "Id do erro: "                 + ' [' + cValToChar(aErros[05]) + '], '
		    cMsgLog 	+= "Mensagem do erro: "           + ' [' + cValToChar(aErros[06]) + '], '
		    cMsgLog 	+= "Mensagem da solução: "        + ' [' + cValToChar(aErros[07]) + '], '
		    cMsgLog 	+= "Valor atribuído: "            + ' [' + cValToChar(aErros[08]) + '], '
		    cMsgLog 	+= "Valor anterior: "             + ' [' + cValToChar(aErros[09]) + ']'
		    
		    ConOut("Erro: " + cMsgLog)
			
		EndIf
		
		oModel:DeActivate()
	Else
		lOk			:= .F.
		cMsgLog 	:= "[Cotação da SC: "+cNumSC+"] Erro => "+ CRLF
		cMsgLog 	+= " nenhum fornecedor encontrado.		"
	EndIf
	
	::oResult:Add(lOk, cMsgLog)
	
Return ::oResult

Method ForneceUnico() Class TCotacaoCompra
	
	Local aListFornece	:= {} // A2_COD+A2_LOJA
	Local oItem			:= ""
	Local nI			:= 0
	Local cChave		:= ""
	Local nPos			:= 0
	
	For nI := 1 To ::oObj:oItens:GetCount()
		oItem	:= ::oObj:oItens:GetItem(nI)
		
		cChave	:= oItem:cFornece+oItem:cLoja
		nPos	:= ASCAN(aListFornece, { |x| x == cChave } )
		If (nPos < 1)
			Aadd(aListFornece, cChave)
		EndIf
		
	Next nI
	
Return aListFornece


Method Atualizar() Class TCotacaoCompra

	Local aCabec           := {}
	Local aItens           := {}
	
	Local lOk              := .F.
	Local cMsgLog          := ""
	Local nI               := 0
	Local nJ               := 0
	Local aListFornece     := {}
	
	Local aErroAuto        := {}
	
	Private lMsErroAuto    := .F.
	Private lMsHelpAuto    := .T.
	Private lAutoErrNoFile := .T.
	
	Private l150Propost    := .F.
	
	If (!Empty(::oObj:cNumero))	
		
		aListFornece := ::ForneceUnico()
		
		aSort(::oObj:oItens:ToArray(),,,{|x,y| x:cFornece + x:cLoja + x:cNumPro + x:cItem < y:cFornece + y:cLoja + y:cNumPro + y:cItem })
		
		For nI := 1 To Len(aListFornece) //atualiza cotação individual por fornecedor/loja
		
			cChaveFornece := aListFornece[nI]
			
			aCabec 	:= ::GetCabecalho(cChaveFornece)
      aItens	:= ::GetItens(cChaveFornece)
        	
      If (Len(aCabec) > 0 .And. Len(aItens))
        		
        lMsErroAuto    := .F.
				lMsHelpAuto    := .T.
				lAutoErrNoFile := .T.
				
				SetModulo("SIGACOM", "COM")
				SetFunName("MATA150")
        	
				MSExecAuto({|v,x,y| MATA150(v, x, y)}, aCabec, aItens, 3)
		
				If (!lMsErroAuto)
				
					lOk			:= .T.
					cMsgLog 	:= "[Cotação de Compra Numero: "+::oObj:cNumero+"] => atualizada com sucesso."
				
				Else
					
					lOk			:= .F.
					cMsgLog 	:= "[Cotação de Compra Numero: "+::oObj:cNumero+"] Erro => "+ CRLF
					
					aErroAuto	:= GetAutoGRLog()
					
					For nJ := 1 To Len(aErroAuto)
						cMsgLog += StrTran(StrTran(aErroAuto[nJ], "<", ""), "-", "") + " "
					Next nJ		
					
				EndIf
				
      Else
        		
				lOk			:= .F.
				cMsgLog 	:= "[Cotação de Compra Numero: "+::oObj:cNumero+"] Erro => "+ CRLF
				cMsgLog 	:= " item não encontrados "
				
      EndIf
        	
		Next nI
			
	Else
			
		lOk			:= .F.
		cMsgLog 	:= "[Cotação de Compra Numero: "+::oObj:cNumero+"] => não encontrada."
		
	EndIf
		
	::oResult:Add(lOk, cMsgLog)
	
Return ::oResult


Method Execute(_oObj, _lNovo) Class TCotacaoCompra

	::oObj 			:= _oObj
				
	Begin Transaction
		
		If (_lNovo)
			::Incluir()//inserir registro da cotação
			If(::oResult:lOk)
				If (!Empty(::oObj:cNumero))
					::SetItemCotacao()
					::Atualizar() //atualiza os registro inseridos
					If(!::oResult:lOk)
						DisarmTransaction()
					EndIf
				Else
					DisarmTransaction()
				EndIf
			Else
				DisarmTransaction()
			EndIf
		Else
			::Atualizar()
		EndIf
		
   End Transaction 
		
Return ::oResult


Method Ordem(aLinha) Class TCotacaoCompra

    Local nW := 0
    Local nX := 0
    Local lRet := .T.
    Local aLinhaNew := {}
    Local aObrigat := {}
    Local aAreaSX3 := SX3->(GetArea())

    DBSelectArea("SX3")
    SX3->(DBSetOrder(1))
    SX3->(DBGoTop())

    If SX3->(DBSeek("SC8"))

        While !SX3->(EOF()) .And. SX3->X3_ARQUIVO == "SC8"

            If Subs(Bin2Str(SX3->X3_OBRIGAT),1,1) == "x"

                aAdd(aObrigat, SX3->X3_CAMPO)

            EndIf

            For nW := 1 To Len(aLinha)

                If AllTrim(SX3->X3_CAMPO) == AllTrim(aLinha[nW][1])

                    aAdd(aLinhaNew, aLinha[nW])

                    If Subs(Bin2Str(SX3->X3_OBRIGAT),1,1) == "x" .And. Empty(aLinha[nW][2])

                        ConOut("TCotacaoCompra: Campo " + SX3->X3_CAMPO + " é obrigatório e seu conteúdo está vazio!")

                    EndIf

                EndIf

            Next nW

            SX3->(DBSkip())

        EndDo

    EndIf

    For nW := 1 To Len(aObrigat)

        lRet := .F.

        For nX := 1 To Len(aLinha)

            If AllTrim(aObrigat[nW]) == AllTrim(aLinha[nX][1])

                lRet := .T.

            EndIf

        Next nX

        If !lRet

            ConOut("TBizagiIntegracaoCotacao: Campo " +aObrigat[nW] + " é obrigatório e não esta no ExecAuto!")

        EndIf

    Next nW

    RestArea(aAreaSX3)

Return(aLinhaNew)



Class TCCStruct from LongClassName

	Public Data cNumero
	Public Data cEmp
	Public Data cFil
	Public Data cID
	Public Data oItens

	Public Method New() Constructor

EndClass

Method New() Class TCCStruct

	::cNumero		:= ""
	::cEmp          := ""
	::cFil          := ""
	::cID           := ""
	::oItens	    := ArrayList():New()

Return()

Class TCCItemStruct From LongClassName
	
	Public Data cID
	
	Public Data cFornece
	Public Data cLoja
	Public Data cNomeFornece
	
	Public Data cCond
	Public Data cContato
	Public Data cTipoFrete
	Public Data cMoeda
	Public Data dEmissao
	
	
	Public Data cNumSc        	
	Public Data cItemSc       	
	Public Data cNumPro
	Public Data cProd
	Public Data cItem
	Public Data cUM
	Public Data cSegUM
	Public Data nQuantSegUM
	Public Data nQuant
	Public Data nPreco
	Public Data nTotal
	Public Data nDesc
	Public Data cTes
	Public Data cMarca
	Public Data nAliqIpi
	Public Data cObervacao
	Public Data nPrazo
	Public Data cOrcForn
	Public Data dValidade
	Public Data cFlag
	Public Data nValorSub
	Public Data cForMail
	Public Data cEmail
	Public Data dDataChe
	Public Data cTipoServico
	Public Data dInicioContrato
	Public Data dFinalContrato
	Public Data cCondCotacao
	Public Data dNecessidade
	
	Public Method New() Constructor

EndClass

Method New() Class TCCItemStruct
	
	::cID           := ""
	::cFornece      := ""
	::cLoja			:= ""
	::cContato      := ""
	::cCond         := ""
	::cNomeFornece	:= ""
	::cTipoFrete    := ""
	::cMoeda        := ""
	::dEmissao      := Date()
	
	::cNumSc        := ""	
	::cItemSc  		:= ""
	::cNumPro		:= ""
	::cProd         := ""
	::cItem         := ""
	::cUM           := ""
	::cSegUM        := ""
	::nQuantSegUM   := 0
	::nQuant        := 0
	::nPreco        := 0
	::nTotal        := 0
	::nDesc         := 0
	::cTes          := ""
	::cMarca        := ""
	::nAliqIpi      := 0
	::cObervacao    := ""
	::nPrazo        := 0
	::cOrcForn      := ""
	::dValidade     := Date()
	::cFlag         := ""
	::nValorSub     := 0
	::cForMail      := ""
	::cEmail        := ""
	::dDataChe      := Date()
	::cTipoServico	:= ""
	
	::dInicioContrato	:= Date()
	::dFinalContrato	:= Date()
	::dNecessidade	:= Date()
	
	::cCondCotacao	:= ""		
		
Return()


Class TCCResultStruct From LongClassName
	
	Public Data lOk		as logical
	Public Data cMensagem	as character
	Public Data oResult	

	Public Method New() Constructor
	Public Method Add()
	
EndClass

Method New() Class TCCResultStruct

	::lOk		:= .T.
	::cMensagem	:= ""
	::oResult	:= Nil
Return()

Method Add(lOk, cMensagem, oResult) Class TCCResultStruct

	::lOk		:= lOk
	::cMensagem	+= cMensagem
	::oResult	:= oResult

Return()
