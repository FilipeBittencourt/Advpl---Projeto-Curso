#Include "TOTVS.CH"
#Include "Protheus.CH"
#Include "topconn.ch"

Class TBizagiIntegracaoAE from LongClassName
	
	Public Data nPreco
	Public Data cTipo
	
	
	Public Method New() Constructor
	Public Method Get()
	Public Method PrecoItem()	
	Public Method ConfirmReg()	
	
EndClass


Method New() Class TBizagiIntegracaoAE
	::nPreco := 0
	::cTipo  := ""	
Return


Method ConfirmReg(cID, cNUser) Class TBizagiIntegracaoAE
	
	Local cQuery 		:= ""
	Local nStatus		:= 0
	Local lRet			:= .T.
	
	Default cNUser	:= 'JOB'
	Conout("cID: "+cvaltochar(cID))
	cQuery := " update [BPORTAL_SA].[dbo].[Medicao] SET DataIntegracaoERP 	= GETDATE(), Status='P',StatusIntegracao		= '0'  		  WHERE ID = '"+cvaltochar(cID)+"'"
	Conout("Query: "+cQuery)
	nStatus := TCSqlExec(cQuery)
   
	If (nStatus < 0)
		lRet	:= .F.
	EndIf
	
Return lRet


Method PrecoItem(cContrato, cItem, nQuant) Class TBizagiIntegracaoAE
	
	Local cAliasTrab		:= GetNextAlias()
	Local cQuery			:= ""
	
	//cQuery	+= " select * from " + RetSQLName("ZG3")+"	 											"
	cQuery	+= " select * from ZG3010				 											"
	//cQuery	+= " where ZG3_FILIAL 		= '"+xFilial('ZG3')+"'										"
	cQuery	+= " where ZG3_FILIAL 		= '01'										"
	
	cQuery	+= " AND ZG3_NUMERO 		= '"+cContrato+"'											"
	cQuery	+= " AND ZG3_ITEM	 		= '"+cItem+"'												"
	cQuery	+= " AND "+cvaltochar(nQuant)+" BETWEEN  ZG3_VLINI AND ZG3_VLFIN						"
	cQuery	+= " AND D_E_L_E_T_ 		= ''														"
	
	TcQuery cQuery New Alias (cAliasTrab)
	
	If (!(cAliasTrab)->(EoF()))
		
		::cTipo 	:= (cAliasTrab)->ZG3_TIPO
		::nPreco 	:= (cAliasTrab)->ZG3_VALOR
				
	EndIf
	
	(cAliasTrab)->(DbCloseArea())
Return 


Method Get() Class TBizagiIntegracaoAE
	
	Local cAliasTemp		:= GetNextAlias()
	Local cQuery			:= ""
	Local oAEStruct			:= Nil
	Local oList				:= ArrayList():New()
	
	cQuery	+= " select * from [BPORTAL_SA].[dbo].[Medicao] A							"
	cQuery	+= " where Status = 'A' AND DataIntegracaoERP IS NULL						"
	
	cQuery += " AND NOT EXISTS  														"
    cQuery += " ( 																		"
    cQuery += "     SELECT 1 															"
    cQuery += "     FROM [BPORTAL_SA].[dbo].[Medicao] B 								"
    cQuery += "     WHERE B.Empresa  		= A.Empresa 								"
    cQuery += "     AND B.Filial     		= A.Filial 									"
    cQuery += "     AND B.Contrato			= A.Contrato 								"
    cQuery += "     AND B.ContratoItem	= A.ContratoItem 						"
    cQuery += "     AND B.ChaveUnica		= A.ChaveUnica 							"
    cQuery += "     AND B.Status        	<> 'A'										"
    cQuery += " ) 																		"
	
	
	TcQuery cQuery New Alias (cAliasTemp)
	
	While (!(cAliasTemp)->(EoF()))
		
		DbSelectArea("SC3")
		SC3->(DbSetOrder(1))
		
		If SC3->(DbSeek(xFilial('SC3')+PADR(AllTrim((cAliasTemp)->Contrato), TamSx3("C3_NUM")[1])))
			
			oAEStruct				:= TAEStruct():New()
			oAEStruct:cContrato		:= SC3->C3_NUM
			oAEStruct:cFornece		:= SC3->C3_FORNECE
			oAEStruct:cLoja			:= SC3->C3_LOJA
			oAEStruct:cCond			:= SC3->C3_COND
			//oAEStruct:cContato		:= (cAliasTemp)->CONTATO
			oAEStruct:cTipoFrete	:= SC3->C3_TPFRETE
			oAEStruct:cMoeda		:= SC3->C3_MOEDA
			oAEStruct:cEmp			:= (cAliasTemp)->Empresa
			oAEStruct:cFil			:= (cAliasTemp)->Filial
			oAEStruct:cID			:= (cAliasTemp)->ID
			
			While (!(cAliasTemp)->(EoF())  .And. AllTrim((cAliasTemp)->Contrato) == AllTrim(SC3->C3_NUM))
			
				DbSelectArea("SC3")
				SC3->(DbSetOrder(1))
				
				cChave := xFilial('SC3')
				cChave += PADR(AllTrim((cAliasTemp)->Contrato)	, TamSx3("C3_NUM")[1])
				cChave += PADR(AllTrim((cAliasTemp)->ContratoItem)		, TamSx3("C3_ITEM")[1])
				
				If SC3->(DbSeek(cChave))
					
					DbSelectArea("SB1")
					SB1->(DbSetOrder(1))
					SB1->(DbSeek(xFilial("SB1")+SC3->C3_PRODUTO))		
					
					oAEItemStruct	 			:= TAEItemStruct():New()
				
					oAEItemStruct:cID			:= (cAliasTemp)->ID
					oAEItemStruct:cCC			:= SC3->C3_CC
					oAEItemStruct:cClVl			:= SC3->C3_YCLVL
					oAEItemStruct:cDriver		:= SC3->C3_YDRIVER
					oAEItemStruct:cAplicacao	:= (cAliasTemp)->Aplicacao
					oAEItemStruct:cTag			:= (cAliasTemp)->TAG
					
					oAEItemStruct:cNumSc        := SC3->C3_NUM
					oAEItemStruct:cItemSc       := SC3->C3_ITEM
					oAEItemStruct:nQuantSc		:= 0
						
					oAEItemStruct:cCodTab       := ''
					
					oAEItemStruct:cCodProd      := SC3->C3_PRODUTO
					oAEItemStruct:cDescProd		:= (cAliasTemp)->Descricao
					oAEItemStruct:cLocal        := SC3->C3_LOCAL
					
					//oAEItemStruct:cDescProd     := SB1->B1_DESC	
					
					If ((cAliasTemp)->Valor == 0)
						::PrecoItem(SC3->C3_NUM, SC3->C3_ITEM, (cAliasTemp)->Quantidade)
						//TODO VERIFICAR QUANTIDADE
						If (::cTipo == '1')//valor fixo
							oAEItemStruct:nQuant		:= 1
							oAEItemStruct:nPreco	 	:= ::nPreco
						ElseIf (::cTipo == '2')//valor por quantidade
							oAEItemStruct:nQuant		:= 1
							oAEItemStruct:nPreco	 	:= ::nPreco * (cAliasTemp)->Quantidade
						EndIf
					Else
						oAEItemStruct:nQuant		:= (cAliasTemp)->Quantidade
						oAEItemStruct:nPreco	 	:= (cAliasTemp)->Valor
					EndIf
		
					oAEItemStruct:nTotal	 	:= oAEItemStruct:nQuant * oAEItemStruct:nPreco
					oAEItemStruct:cTES          := ''	
					oAEItemStruct:cTransp		:= ''
					
					cDiaEnt	:= U_GETBIAPAR('PORTAL_SS_DIAENT')
					cDiaChe	:= U_GETBIAPAR('PORTAL_SS_DIACHE')
					
					If (!Empty(cDiaEnt) .And. !Empty(cDiaChe))
						
						cDataEnt := ctod(cDiaEnt+'/'+Month2Str(Date())+'/'+Year2Str(Date()))
						cDataChe := MonthSum(ctod(cDiaChe+'/'+Month2Str(Date())+'/'+Year2Str(Date())), 1)
						
						If (dDataBase > cDataEnt)
							cDataEnt := MonthSum(ctod(cDiaEnt+'/'+Month2Str(Date())+'/'+Year2Str(Date())), 1)
						EndIf
						
						If (cDataChe < cDataEnt)
							cDataChe := MonthSum(ctod(cDiaChe+'/'+Month2Str(Date())+'/'+Year2Str(Date())), 2)
						EndIf
						
						
						cDataEnt := DataValida(cDataEnt, .F.)
						cDataChe := DataValida(cDataChe, .F.)
						
						If (cDataEnt != Nil .And. cDataChe != Nil)
							
							oAEItemStruct:dDataEntrega	:= cDataEnt
							oAEItemStruct:dDataChegada	:= cDataChe
						EndIf
					
					EndIf				
					
					varinfo( "", oAEItemStruct )	
						
					oAEStruct:oItens:Add(oAEItemStruct)
					
				EndIf		
			
				(cAliasTemp)->(DbSkip())
			EndDo
			
			oList:Add(oAEStruct)
		
		EndIf
				
	EndDo
	
	(cAliasTemp)->(DbCloseArea())
	
Return(oList)
