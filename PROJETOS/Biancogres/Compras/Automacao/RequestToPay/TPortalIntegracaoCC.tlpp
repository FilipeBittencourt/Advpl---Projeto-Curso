#Include "TOTVS.CH"
#Include "Protheus.CH"
#Include "topconn.ch"

Class TPortalIntegracaoCC from LongClassName
	
	Public Method New() Constructor
	Public Method Get()
	Public Method List()
	public Method GetPorContrato()
	Public Method ConfirmReg()	
	Public Method AtualizaContrato()
	Public Method AtualizaPedido()
	Public Method AtualizaVencedor()
	
EndClass


Method New() Class TPortalIntegracaoCC

Return


Method ConfirmReg(lNovo, cID, cCotacao, cItem, cNUser) Class TPortalIntegracaoCC
	
	Local cQuery 		:= ""
	Local nStatus		:= 0
	Local lRet			:= .T.
	
	Default cNUser		:= 'JOB'
	
	cQuery := " UPDATE [BPORTAL_SA].[dbo].[CotacaoCompra] SET 					"
	cQuery += " DataIntegracaoERP 	= GETDATE()									"
	cQuery += " ,Status 				= 'P'  									"
	cQuery += " ,StatusIntegracao		= '0'  									"
	
	If(lNovo)
		cQuery += " ,Cotacao			= '"+cCotacao+"' 	 					"
		cQuery += " ,CotacaoItem	 	= '"+cItem+"'	 						"
	EndIf
	cQuery += " WHERE ID 		= '"+AllTrim(cvaltochar(cID))+"'				"
	
	Conout("Portal Integração - Query: "+cQuery)
	
	nStatus := TCSqlExec(cQuery)
   
	If (nStatus < 0)
		lRet	:= .F.
	EndIf
	
Return lRet

Method AtualizaContrato(cCotacao, cCotacaoItem, cFornece, cLoja, cProduto, cProposta, cContrato, cItemContrato) Class TPortalIntegracaoCC
	
	Local cQuery 		:= ""
	Local nStatus		:= 0
	Local lRet			:= .T.
	
	Default cNUser		:= 'JOB'
	
	cQuery := " UPDATE [BPORTAL_SA].[dbo].[CotacaoCompra] SET 										"
	cQuery += " Contrato		 	= '"+cContrato+"'  ,											"
	cQuery += " ContratoItem	 	= '"+cItemContrato+"',	 										"
	cQuery += " StatusIntegracao	= '0',	  														"
	cQuery += " TipoEvento			= (CASE WHEN TipoEvento='NC' THEN TipoEvento ELSE 'AC' END)		"
	cQuery += " WHERE Cotacao 		= '"+AllTrim(cCotacao)+"'										"
	cQuery += " AND CotacaoItem		= '"+AllTrim(cCotacaoItem)+"'									"
	cQuery += " AND FornecedorCodigo= '"+AllTrim(cFornece)+"'										"
	cQuery += " AND FornecedorLoja	= '"+AllTrim(cLoja)+"'											"
	cQuery += " AND Produto			= '"+AllTrim(cProduto)+"'										"
	cQuery += " AND Proposta		= '"+AllTrim(cProposta)+"'										"
	
	//propostas vinda do portal
	If (AllTrim(cProposta) == '01')
		cQuery += " AND TipoEvento	IN ('NCP', 'AC') AND Origem=1									"
	EndIf
	
	Conout("Portal Integração - AtualizaContrato - Query: "+cQuery)
	
	nStatus := TCSqlExec(cQuery)
   
	If (nStatus < 0)
		lRet	:= .F.
	EndIf
	
Return lRet

Method AtualizaPedido(cCotacao, cCotacaoItem, cFornece, cLoja, cProduto, cProposta, cPedido, cItemPedido) Class TPortalIntegracaoCC
	
	Local cQuery 		:= ""
	Local nStatus		:= 0
	Local lRet			:= .T.
	
	Default cNUser		:= 'JOB'
	
	cQuery := " UPDATE [BPORTAL_SA].[dbo].[CotacaoCompra] SET 									"
	cQuery += " Pedido			 	= '"+cPedido+"' , 											"
	cQuery += " PedidoItem		 	= '"+cItemPedido+"',			 							"
	cQuery += " StatusIntegracao	= '0',	  													"
	cQuery += " TipoEvento			= (CASE WHEN TipoEvento='NC' THEN TipoEvento ELSE 'AC' END)	"
	cQuery += " WHERE Cotacao 		= '"+AllTrim(cCotacao)+"'									"
	cQuery += " AND CotacaoItem		= '"+AllTrim(cCotacaoItem)+"'								"
	cQuery += " AND FornecedorCodigo= '"+AllTrim(cFornece)+"'									"
	cQuery += " AND FornecedorLoja	= '"+AllTrim(cLoja)+"'										"
	cQuery += " AND Produto			= '"+AllTrim(cProduto)+"'									"
	cQuery += " AND Proposta		= '"+AllTrim(cProposta)+"'									"
	
	//propostas vinda do portal
	If (AllTrim(cProposta) == '01')
		cQuery += " AND TipoEvento	IN ('NCP', 'AC') AND Origem=1										"
	EndIf
	
	Conout("Portal Integração - AtualizaPedido - Query: "+cQuery)
	
	nStatus := TCSqlExec(cQuery)
   
	If (nStatus < 0)
		lRet	:= .F.
	EndIf
	
Return lRet

Method AtualizaVencedor(cCotacao, cCotacaoItem, cFornece, cLoja, cProduto, cProposta) Class TPortalIntegracaoCC
	
	Local cQuery 		:= ""
	Local nStatus		:= 0
	Local lRet			:= .T.
	
	Default cNUser		:= 'JOB'
	
	
	cQuery := " UPDATE [BPORTAL_SA].[dbo].[CotacaoCompra] SET 									"
	cQuery += " Vencedor			= '1',		 			 									"
	cQuery += " StatusIntegracao	= '0',	  													"
	cQuery += " TipoEvento			= (CASE WHEN TipoEvento='NC' THEN TipoEvento ELSE 'AC' END)	"
	cQuery += " WHERE Cotacao 		= '"+AllTrim(cCotacao)+"'									"
	cQuery += " AND CotacaoItem		= '"+AllTrim(cCotacaoItem)+"'								"
	cQuery += " AND FornecedorCodigo= '"+AllTrim(cFornece)+"'									"
	cQuery += " AND FornecedorLoja	= '"+AllTrim(cLoja)+"'										"
	cQuery += " AND Produto			= '"+AllTrim(cProduto)+"'									"
	cQuery += " AND Proposta		= '"+AllTrim(cProposta)+"'									"
	
	//propostas vinda do portal
	If (AllTrim(cProposta) == '01')
		cQuery += " AND TipoEvento	IN ('NCP', 'AC') AND Origem=1								"
	EndIf
	
	Conout("Portal Integração - AtualizaPedido - Query: "+cQuery)
		
	nStatus := TCSqlExec(cQuery)
   
	If (nStatus < 0)
		lRet	:= .F.
	EndIf
	
Return lRet


Method Get() Class TPortalIntegracaoCC
	
	Local cQuery			:= ""
	Local oList				:= ArrayList():New()
	
	cQuery	+= " select 								 									"
	cQuery	+= "  DtIniCon = CONVERT(varchar(8), DataInicioContrato, 112), 					"
	cQuery	+= "  DtFinCon = CONVERT(varchar(8), DataFinalContrato, 112),                   "
	cQuery	+= "  DtValidade = CONVERT(varchar(8), DataValidade, 112),	                    "
	cQuery	+= "  DtNecessidade = CONVERT(varchar(8), DataNecessidade, 112),                "
	cQuery	+= "  DtEmissao = CONVERT(varchar(8), DataEmissao, 112),                        "
	cQuery	+= "  ForneCodigo = FornecedorCodigo,                                           "
	cQuery	+= "  ForneLoja = FornecedorLoja,                                               "
	cQuery	+= "  ForneOrcamento = FornecedorOrcamento,                                     "
	cQuery	+= "  CondPag = CondicaoPagamento,                                              "
	cQuery	+= "  ValorSub = ValorSubstituicao,		                                        "

	cQuery	+= " * from																		"
	cQuery	+= " [BPORTAL_SA].[dbo].[CotacaoCompra]	A										"
	cQuery	+= " where Status = 'A' AND DataIntegracaoERP IS NULL	AND NumeroSC <> ''		"
	cQuery	+= " AND Origem = '1'															"
	
	cQuery += " AND NOT EXISTS  															"
    cQuery += " ( 																			"
    cQuery += "     SELECT 1 																"
    cQuery += "     FROM [BPORTAL_SA].[dbo].[CotacaoCompra] B 								"
    cQuery += "     WHERE B.Empresa  		= A.Empresa 									"
    cQuery += "     AND B.Filial     		= A.Filial 										"
    cQuery += "     AND B.Numero			= A.Numero	 									"
    cQuery += "     AND B.Status        	<> 'A'											"
    cQuery += "     AND Origem				= '1'											"
    cQuery += " ) 																			"
	
	cQuery	+= "  order by (CASE WHEN Cotacao is null or Cotacao=''  THEN Numero ELSE Cotacao END)	"
	
	
	oList	:= ::List(cQuery)
	
Return(oList)


Method GetPorContrato(_cContra, _cContraItem) Class TPortalIntegracaoCC
	
	Local cQuery			:= ""
	Local oList				:= ArrayList():New()
	
	cQuery	+= " select 								 										"
	cQuery	+= "  DtIniCon = CONVERT(varchar(8), DataInicioContrato, 112), 						"
	cQuery	+= "  DtFinCon = CONVERT(varchar(8), DataFinalContrato, 112),                   	"
	cQuery	+= "  DtValidade = CONVERT(varchar(8), DataValidade, 112),	                    	"
	cQuery	+= "  DtNecessidade = CONVERT(varchar(8), DataNecessidade, 112),                	"
	cQuery	+= "  DtEmissao = CONVERT(varchar(8), DataEmissao, 112),                        	"
	cQuery	+= "  ForneCodigo = FornecedorCodigo,                                           	"
	cQuery	+= "  ForneLoja = FornecedorLoja,                                               	"
	cQuery	+= "  ForneOrcamento = FornecedorOrcamento,                                     	"
	cQuery	+= "  CondPag = CondicaoPagamento,                                              	"
	cQuery	+= "  ValorSub = ValorSubstituicao,		                                        	"
	cQuery	+= " * from																			"
	cQuery	+= " [BPORTAL_SA].[dbo].[CotacaoCompra]												"
	cQuery	+= " where Contrato = '"+_cContra+"'												"
	cQuery	+= " AND ContratoItem = '"+_cContraItem+"'											"
	cQuery	+= " AND Origem = '1'																"
	
	
	
	conout(cQuery)
	oList	:= ::List(cQuery)
	
	
Return(oList)


Method List(cQuery) Class TPortalIntegracaoCC
	
	Local cAliasTemp		:= GetNextAlias()
//	Local cQuery			:= ""
	Local oCCStruct			:= Nil
	Local oList				:= ArrayList():New()
	Local lOk				:= .T.
	Local cCodigo			:= ""
	Local cMsgLog			:= ""
	
	TcQuery cQuery New Alias (cAliasTemp)
	
	While (!(cAliasTemp)->(EoF()))
		
		lOk					:= .T.
		cMsgLog				:= ""
		oCCStruct			:= TCCStruct():New()
		
		oCCStruct:cNumero	:= (cAliasTemp)->Cotacao
		oCCStruct:cEmp      := (cAliasTemp)->Empresa
		oCCStruct:cFil      := (cAliasTemp)->Filial
		oCCStruct:cID 	    := (cAliasTemp)->Numero
		
		cChave := ""
		bValid	:= {|| }
		
		If (Empty((cAliasTemp)->Cotacao))
			cChave	:= AllTrim((cAliasTemp)->Numero)
			bValid	:= {|| AllTrim((cAliasTemp)->Numero) == cChave }
		Else
			cChave	:= AllTrim((cAliasTemp)->Cotacao)
			bValid	:= {|| AllTrim((cAliasTemp)->Cotacao) == cChave }
		EndIf
		
		
		While (!(cAliasTemp)->(EoF())  .And.;
		 Eval(bValid))
			
			DbSelectArea('SA2')
			SA2->(DbSetOrder(1))
			
			If (SA2->(DbSeek(xFilial('SA1')+PADR((cAliasTemp)->ForneCodigo, TamSx3("A2_COD")[1])+PADR((cAliasTemp)->ForneLoja, TamSx3("A2_LOJA")[1]))))
				
				DbSelectArea('SB1')
				SB1->(DbSetOrder(1))
				If (SB1->(DbSeek(xFilial('SB1')+PADR((cAliasTemp)->Produto, TamSx3("B1_COD")[1]))))
					
					oCCItemStruct	 				:= TCCItemStruct():New()
					oCCItemStruct:cID		 	   	:= (cAliasTemp)->ID
					oCCItemStruct:cNomeFornece 	   	:= SA2->A2_NOME
					oCCItemStruct:cForMail			:= SA2->A2_EMAIL
					oCCItemStruct:cFornece 	    	:= (cAliasTemp)->ForneCodigo
					oCCItemStruct:cLoja	    		:= (cAliasTemp)->ForneLoja
					oCCItemStruct:cCond      	  	:= SA2->A2_COND 
					oCCItemStruct:cContato   	  	:= (cAliasTemp)->Contato
					oCCItemStruct:cTipoFrete	   	:= IIF((cAliasTemp)->TipoFrete == '1', 'C', 'F')
					oCCItemStruct:cMoeda       		:= (cAliasTemp)->Moeda
					oCCItemStruct:dEmissao  	   	:= (cAliasTemp)->DtEmissao
						
					oCCItemStruct:cNumSc        	:= (cAliasTemp)->NumeroSC
					oCCItemStruct:cItemSc       	:= (cAliasTemp)->ItemSC
					
					oCCItemStruct:cNumPro			:= (cAliasTemp)->Proposta
					oCCItemStruct:cProd            	:= (cAliasTemp)->Produto
					oCCItemStruct:cItem            	:= (cAliasTemp)->Item
					
					If (!Empty((cAliasTemp)->CotacaoItem))
						oCCItemStruct:cItem			:= (cAliasTemp)->CotacaoItem
					EndIf
					
					oCCItemStruct:cUM				:= SB1->B1_UM 
					oCCItemStruct:cSegUM			:= SB1->B1_SEGUM //TODO tratar fator conversão
					oCCItemStruct:nQuantSegUM 	    := (cAliasTemp)->Quantidade
					
					oCCItemStruct:nQuant          	:= (cAliasTemp)->Quantidade
					oCCItemStruct:nPreco          	:= (cAliasTemp)->Preco
					oCCItemStruct:nTotal          	:= ((cAliasTemp)->Quantidade * (cAliasTemp)->Preco)
					oCCItemStruct:nDesc           	:= 0
					
					oCCItemStruct:cTes            	:= ""
					oCCItemStruct:cMarca          	:= (cAliasTemp)->Marca
					oCCItemStruct:nAliqIpi        	:= (cAliasTemp)->Ipi
					oCCItemStruct:cObervacao      	:= (cAliasTemp)->Observacao
					oCCItemStruct:nPrazo          	:= (cAliasTemp)->Prazo
					oCCItemStruct:cOrcForn        	:= (cAliasTemp)->ForneOrcamento
					oCCItemStruct:dValidade       	:= (cAliasTemp)->DtValidade
					oCCItemStruct:cFlag           	:= ""
					
					oCCItemStruct:nValorSub      	:= (cAliasTemp)->ValorSub
					
					oCCItemStruct:dInicioContrato  	:= (cAliasTemp)->DtIniCon
					oCCItemStruct:dFinalContrato   	:= (cAliasTemp)->DtFinCon
					oCCItemStruct:dNecessidade		:= (cAliasTemp)->DtNecessidade
					
					oCCItemStruct:cCondCotacao		:= (cAliasTemp)->CondPag
					
					//oCCItemStruct:cEmail          := ""
					//oCCItemStruct:dDataChe		:= ""
					
					oCCItemStruct:cTipoServico		:= (cAliasTemp)->TipoCompra
					
					oCCStruct:oItens:Add(oCCItemStruct)
				
				Else
					lOk			:= .F.
					cMsgLog 	+= "[Portal Integração - Solicitação Servico/Produto:  "+cCodigo+"/"+(cAliasTemp)->Produto+"] => não encontrado."+ CRLF
				EndIf
			Else	
				lOk			:= .F.
				cMsgLog 	+= "[Portal Integração - Solicitação Servico/Fornecedor: "+cCodigo+"/"+(cAliasTemp)->FornecedorCodigo+"] => não encontrado."+ CRLF
			EndIf
			
			(cAliasTemp)->(DbSkip())
		EndDo
		
		If (lOk)
			oList:Add(oCCStruct)
		Else
			ConOut(cMsgLog)
		EndIf		
	EndDo
	
	(cAliasTemp)->(DbCloseArea())
	
Return(oList)
