#Include "TOTVS.CH"
#Include "Protheus.CH"


Class TNotaEntrada from TAbstractClass

	Public Data oNota
	Public Data oResult	
	Public Data lPreNota
	
	Method GatCab()
	Method GatItem()
	Method ValidaCab()
	Method ValidaItem()
	Method GetCabecalho()
	Method GetItens()
	Method Remove()
	
	Public Method Execute()
	Public Method DelPorChave()
	Public Method DelPorDocFor()
	Public Method New() Constructor		
EndClass

Method New() Class TNotaEntrada
	_Super:New()	
	::oResult 	:= TNFeEntradaResultStruct():New()
	::lPreNota	:= .F.
Return

Method GatCab() Class TNotaEntrada
Return 

Method GatItem(nPosicao) Class TNotaEntrada
Return 

//todas validações do cabecalho
Method ValidaCab() Class TNotaEntrada
Return 

//todas validações do item
Method ValidaItem(oObj) Class TNotaEntrada		
Return 


Method GetCabecalho() Class TNotaEntrada

	Local aCabec	:= {}
	
	::GatCab() 
	::ValidaCab() 
	
	aAdd(aCabec,{"F1_TIPO"    	, ::oNota:cTipo      													, NIL, Nil})
	aAdd(aCabec,{"F1_FORMUL"  	, PADR('N', TamSx3("F1_FORMUL")[1])										, NIL, Nil})
	aAdd(aCabec,{"F1_ESPECIE" 	, ::oNota:cEspecie	 													, NIL, Nil})	
	
	If (!Empty(::oNota:cCond))
		aAdd(aCabec,{"F1_COND"    	, ::oNota:cCond														, NIL, Nil})
	EndIf
	
	aAdd(aCabec,{"F1_DOC"     	, PADR(::oNota:cDoc, TamSx3("D1_DOC")[1]) 		 						, NIL, Nil})
	aAdd(aCabec,{"F1_SERIE"   	, PADR(::oNota:cSerie, TamSx3("D1_SERIE")[1])			 				, NIL, Nil})
	aAdd(aCabec,{"F1_FORNECE" 	, PADR(::oNota:cFornece, TamSx3("D1_FORNECE")[1]) 		   				, NIL, Nil})
	aAdd(aCabec,{"F1_LOJA"    	, PADR(::oNota:cLoja, TamSx3("D1_LOJA")[1]) 				  			, NIL, Nil})		
	aAdd(aCabec,{"F1_EMISSAO" 	, ::oNota:dDataEmissao													, NIL, Nil})
	
	If (!Empty(::oNota:cChave))
		aAdd(aCabec,{"F1_CHVNFE"  	, ::oNota:cChave														, NIL, Nil})
	EndIf
	
	If (::lPreNota)
		aAdd(aCabec,{"F1_STATUS"     	, PADR('', TamSx3("F1_STATUS")[1]) 		 						, NIL, Nil})
	EndIf
	
	
Return aCabec

Method GetItens() Class TNotaEntrada
	
	Local nI		:= 0
	Local aItens	:= {}
	Local aItem 	:= {}
	Local oItem		:= Nil
	
	For nI := 1 To ::oNota:oNotaItens:GetCount()
		
		aItem	:= {}
		oItem := ::oNota:oNotaItens:GetItem(nI)
		
		::GatItem(nI) 
		::ValidaItem(oItem) 
		
		
		aAdd(aItem,{"D1_ITEM" 		, PADR(cValToChar(nI), TamSx3("D1_ITEM")[1])					, NIL, Nil})
		aAdd(aItem,{"D1_COD" 		, PADR(oItem:cProduto, TamSx3("D1_COD")[1])   				  	, NIL, Nil})
		
		aAdd(aItem,{"D1_DOC"    	, PADR(::oNota:cDoc, TamSx3("D1_DOC")[1])     					, Nil, Nil})
		aAdd(aItem,{"D1_SERIE"    	, PADR(::oNota:cSerie, TamSx3("D1_SERIE")[1])      				, Nil, Nil})
		aAdd(aItem,{"D1_FORNECE"   	, PADR(::oNota:cFornece, TamSx3("D1_FORNECE")[1])      			, Nil, Nil})
		aAdd(aItem,{"D1_LOJA"    	, PADR(::oNota:cLoja, TamSx3("D1_LOJA")[1])     				, Nil, Nil})
		
		If (::lPreNota)
			aAdd(aItem,{"D1_TES"    	, PADR(oItem:cTES, TamSx3("D1_TES")[1])   						, Nil, Nil})
			//aAdd(aItem,{"D1_YTESPN"    	, PADR(oItem:cTES, TamSx3("D1_YTESPN")[1])   					, Nil, Nil})
		Else
			aAdd(aItem,{"D1_TES"    	, PADR(oItem:cTES, TamSx3("D1_TES")[1])   						, Nil, Nil})
		EndIf
		
		aAdd(aItem,{"D1_QUANT"    	, oItem:nQuantidade  											, Nil, Nil})
		aAdd(aItem,{"D1_VUNIT"    	, oItem:nValor   												, Nil, Nil})
		aAdd(aItem,{"D1_TOTAL"    	, (oItem:nQuantidade * oItem:nValor)/*oItem:nTotal*/   			, Nil, Nil})
		
		If !Empty(oItem:cPedido) .And. !Empty(oItem:cItemPed)

			aAdd(aItem,{"D1_PEDIDO"   	, oItem:cPedido 									, ".T.", Nil})
			aAdd(aItem,{"D1_ITEMPC"   	, PADR(oItem:cItemPed, TamSx3("D1_ITEMPC")[1]) 		, ".T.", Nil})
			aAdd(aItem,{"D1_LOCAL"		, PADR(oItem:cLocal, TamSx3("D1_LOCAL")[1]) 		, ".T.", Nil})
					
		EndIf
		
		If (oItem:nQuantTicket > 0)
			aAdd(aItem,{"D1_YTICKET"    , oItem:nQuantTicket 		 											, Nil, Nil})
		EndIf
		
		If (!Empty(oItem:cNumTicket))
			aAdd(aItem,{"D1_YNUMTK"    , oItem:cNumTicket 		 											, Nil, Nil})
			aAdd(aItem,{"D1_YDTENT"    , dDataBase		 		 											, Nil, Nil})
		EndIf
		
		
		If (oItem:nAliqICMS > 0)
			aAdd(aItem,{"D1_PICM"    	, oItem:nAliqICMS  										, Nil, Nil})
		EndIf
		
		If (oItem:nValICMS > 0)
			aAdd(aItem,{"D1_VALICM"    	, oItem:nValICMS  										, Nil, Nil})
		EndIf
		
		If (!Empty(oItem:cNfOri) .And. !Empty(oItem:cSerieOri))
			aAdd(aItem,{"D1_NFORI"    	, oItem:cNfOri  										, Nil, Nil})
			aAdd(aItem,{"D1_SERIORI"   	, oItem:cSerieOri  										, Nil, Nil})
		EndIf
		
		AAdd(aItens, aItem)
	
	Next nI   
	
Return aItens

Method DelPorChave(cChave) Class TNotaEntrada
	
	Local lOk		:= .T.
	Local cMsgLog	:= ""
	
	Default lPreNota	:= .F.
	
	DbSelectArea("SF1")
	SF1->(DbSetOrder(8))
	
	If SF1->(DbSeek(xFilial('SF1')+PADR(cChave, TamSx3("F1_CHVNFE")[1])))
	
		Return ::Remove()
	
	//Else
		
	 //	lOk			:= .F.
	//	cMsgLog 	:= "[NFe: "+cChave+"] => não encontrada."
		
	EndIf
	
	::oResult:Add(lOk, cMsgLog)
	
Return ::oResult

Method DelPorDocFor(cDoc, cSerie, cFornece, cLoja, lPreNota) Class TNotaEntrada
	
	Local lOk			:= .T.
	Local cMsgLog		:= ""
	
	Default lPreNota	:= .F.
	
	::lPreNota			:= lPreNota
	
	
	DbSelectArea("SF1")
	SF1->(DbSetOrder(1))
	
	If SF1->(DbSeek(xFilial('SF1')+PADR(cDoc, TamSx3("F1_DOC")[1])+PADR(cSerie, TamSx3("F1_SERIE")[1])+PADR(cFornece, TamSx3("F1_FORNECE")[1])+PADR(cLoja, TamSx3("F1_LOJA")[1])))
	
		Return ::Remove()
	
	//Else
		
	//	lOk			:= .F.
	//	cMsgLog 	:= "[Nota: "+cDoc+", Serie: "+cSerie+", Fornecedor: "+cFornece+", Loja: "+cLoja+"] => não encontrada."
		
	EndIf
	
	::oResult:Add(lOk, cMsgLog)
	
Return ::oResult


Method Remove() Class TNotaEntrada

	Local aCabec			:= {}
	Local aItens			:= {}
	Local aItem				:= {}
	
	Local lOk				:= .F.
	Local cMsgLog			:= ""
	Local nI				:= 0
	Local aErroAuto			:= {}
	
	Private lMsErroAuto 	:= .F.
	Private lMsHelpAuto 	:= .T.
	Private lAutoErrNoFile	:= .T.

	aAdd(aCabec,{"F1_DOC"     	, PADR(SF1->F1_DOC, TamSx3("D1_DOC")[1]) 		 					, NIL, Nil})
	aAdd(aCabec,{"F1_SERIE"   	, PADR(SF1->F1_SERIE, TamSx3("D1_SERIE")[1])			 			, NIL, Nil})
	aAdd(aCabec,{"F1_FORNECE" 	, PADR(SF1->F1_FORNECE, TamSx3("D1_FORNECE")[1]) 		   			, NIL, Nil})
	aAdd(aCabec,{"F1_LOJA"    	, PADR(SF1->F1_LOJA, TamSx3("D1_LOJA")[1]) 				  			, NIL, Nil})		
	
	aAdd(aItem,{"D1_DOC"    	, PADR(SF1->F1_DOC, TamSx3("D1_DOC")[1])     						, Nil, Nil})
	aAdd(aItem,{"D1_SERIE"    	, PADR(SF1->F1_SERIE, TamSx3("D1_SERIE")[1])      					, Nil, Nil})
	aAdd(aItem,{"D1_FORNECE"   	, PADR(SF1->F1_FORNECE, TamSx3("D1_FORNECE")[1])      				, Nil, Nil})
	aAdd(aItem,{"D1_LOJA"    	, PADR(SF1->F1_LOJA, TamSx3("D1_LOJA")[1])     						, Nil, Nil})
	
	aAdd(aItens, aItem)
	
	Begin Transaction
		
		
		If (::lPreNota)
			If (!Empty(SF1->F1_STATUS))//pre-nota já classificada
				MSExecAuto({|x,y,z| MATA103(x,y,z)}, aCabec, aItens, 5,.T.)
			Else
				MSExecAuto({|x,y,z,a,b| MATA140(x,y,z,a,b)}, aCabec,aItens, 5,,)
			EndIf
			
		Else
			MSExecAuto({|x,y,z| MATA103(x,y,z)}, aCabec, aItens, 5,.T.)
		EndIf
		
		
		If (!lMsErroAuto)
		
			lOk			:= .T.
			cMsgLog 	:= "[Nota: "+SF1->F1_DOC+", Serie:"+SF1->F1_SERIE+", Fornecedor: "+SF1->F1_FORNECE+"] => excluida com sucesso."
		
		Else
			
			DisarmTransaction()
			
			lOk			:= .F.
			cMsgLog 	:= "[Nota: "+SF1->F1_DOC+", Serie:"+SF1->F1_SERIE+", Fornecedor: "+SF1->F1_FORNECE+"] Erro => "+ CRLF
			
			aErroAuto	:= GetAutoGRLog()
			
			For nI := 1 To Len(aErroAuto)
				cMsgLog += StrTran(StrTran(aErroAuto[nI], "<", ""), "-", "") + " "
			Next nI		
			
		EndIf
		
	End Transaction 	

	::oResult:Add(lOk, cMsgLog)

Return ::oResult


Method Execute(_oNotaResulStruct, lPreNota) Class TNotaEntrada

	
	Local aCabec			:= {}
	Local aItens			:= {}
	
	Local lOk				:= .F.
	Local cMsgLog			:= ""
	Local nI				:= 0
	Local nOpc				:= 0
	
	Local aErroAuto			:= {}
	
	Private lMsErroAuto 	:= .F.
	Private lMsHelpAuto 	:= .T.
	Private lAutoErrNoFile	:= .T.

	Default lPreNota		:= .F.
	
	::oNota 		:= _oNotaResulStruct
	::lPreNota		:= lPreNota
	
	DbSelectArea("SF1")
	SF1->(DbSetOrder(1))
	
	If !SF1->(DbSeek(xFilial('SF1')+PADR(::oNota:cDoc, TamSx3("D1_DOC")[1])+PADR(::oNota:cSerie, TamSx3("D1_SERIE")[1])+PADR(::oNota:cFornece, TamSx3("D1_FORNECE")[1])+PADR(::oNota:cLoja, TamSx3("D1_LOJA")[1])))
		
		aCabec	:= ::GetCabecalho()
		aItens	:= ::GetItens()
		
		Begin Transaction
			
			If (::lPreNota)
				MSExecAuto({|x,y,z,a,b| MATA140(x,y,z,a,b)}, aCabec,aItens, 3,,)
			Else
				MSExecAuto({|x,y,z| MATA103(x,y,z)}, aCabec,aItens, 3, .T.)
			EndIf
    		
			If (!lMsErroAuto)
			
				lOk			:= .T.
				cMsgLog 	:= "[Nota: "+::oNota:cDoc+", Serie:"+::oNota:cSerie+", Fornecedor: "+::oNota:cFornece+"] => inserido com sucesso."
			
			Else
				
				DisarmTransaction()
				
				lOk			:= .F.
				cMsgLog 	:= "[Nota: "+::oNota:cDoc+", Serie:"+::oNota:cSerie+", Fornecedor: "+::oNota:cFornece+"] Erro => "+ CRLF
				
				aErroAuto	:= GetAutoGRLog()
				
				For nI := 1 To Len(aErroAuto)
					cMsgLog += StrTran(StrTran(aErroAuto[nI], "<", ""), "-", "") + " "
				Next nI		
				
			EndIf
			
		End Transaction 	
	
	Else
		
		lOk			:= .F.
		cMsgLog 	:= "[Nota: "+::oNota:cDoc+", Serie:"+::oNota:cSerie+", Fornecedor: "+::oNota:cFornece+"] => já existe."
		
	EndIf
	
	::oResult:Add(lOk, cMsgLog)
	

Return ::oResult


Class TNFeEntradaResultStruct From LongClassName
	
	Public Data lOk			as logical 
	Public Data cMensagem		as character 
	
	Public Method New() Constructor
	Public Method Add()
	
EndClass

Method New() Class TNFeEntradaResultStruct

	::lOk		:= .T.
	::cMensagem	:= ""
Return()

Method Add(lOk, cMensagem) Class TNFeEntradaResultStruct

	::lOk		:= lOk
	::cMensagem	+= cMensagem
	
Return()
