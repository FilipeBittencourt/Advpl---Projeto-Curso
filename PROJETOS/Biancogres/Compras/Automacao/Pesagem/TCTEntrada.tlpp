#Include "TOTVS.CH"
#Include "Protheus.CH"


Class TCTEntrada from TAbstractClass

	Public Data oCTe
	Public Data oResult	
	
	Method GatCab()
	Method GatItem()
	Method ValidaCab()
	Method ValidaItem()
	Method GetCabecalho()
	Method GetItens()
	
	Public Method Execute()
	Public Method New() Constructor		
EndClass

Method New() Class TCTEntrada
	_Super:New()	
	::oResult 	:= TCTeEntradaResultStruct():New()
Return

Method GatCab() Class TCTEntrada
Return 

Method GatItem(nPosicao) Class TCTEntrada
Return 

//todas validações do cabecalho
Method ValidaCab() Class TCTEntrada
Return 

//todas validações do item
Method ValidaItem(oObj) Class TCTEntrada		
Return 


Method GetCabecalho() Class TCTEntrada

	Local aCabec	:= {}
	
	::GatCab() 
	::ValidaCab() 
	
	
	Aadd(aCabec,{""				, dDataBase-90})       //Data Inicial       
    Aadd(aCabec,{""				, dDataBase})          //Data Final       
    Aadd(aCabec,{""				, 2})                  //2-Inclusao;1=Exclusao       
    Aadd(aCabec,{""				, PADR(::oCTe:cRemet, TamSx3("F1_FORNECE")[1])})           //Fornecedor do documento de Origem         
    Aadd(aCabec,{""				, PADR(::oCTe:cRemetLoja, TamSx3("F1_LOJA")[1])})               //Loja de origem       
    Aadd(aCabec,{""				, 1})                  //Tipo da nota de origem: 1=Normal;2=Devol/Benef       
    Aadd(aCabec,{""				, 2})                  //1=Aglutina;2=Nao aglutina       
    Aadd(aCabec,{"F1_EST"		, PADR(::oCTe:cForneceEst, TamSx3("F1_EST")[1])})       
    Aadd(aCabec,{""				, ::oCTe:nValorServico})               //Valor do conhecimento       
    Aadd(aCabec,{"F1_FORMUL"	, 1})       
    Aadd(aCabec,{"F1_DOC"		, PADR(::oCTe:cDoc, TamSx3("F1_DOC")[1])})   
    Aadd(aCabec,{"F1_SERIE"		, PADR(::oCTe:cSerie, TamSx3("F1_SERIE")[1])})       
    Aadd(aCabec,{"F1_FORNECE"	, PADR(::oCTe:cFornece, TamSx3("F1_FORNECE")[1])})       
    Aadd(aCabec,{"F1_LOJA"		, PADR(::oCTe:cLoja, TamSx3("F1_LOJA")[1])})       
    Aadd(aCabec,{""				, ::oCTe:cTes/*"073"*/})              //TES
           
    Aadd(aCabec,{"F1_BASERET", 0})       
    Aadd(aCabec,{"F1_ICMRET", 0})       
    
    
    If (!Empty(::oCTe:cCond))
		aAdd(aCabec,{"F1_COND"    	, ::oCTe:cCond															, NIL, Nil})
	EndIf
	
    Aadd(aCabec,{"F1_EMISSAO"		, ::oCTe:dDataEmissao})       
    Aadd(aCabec,{"F1_ESPECIE"		, ""})
    Aadd(aCabec,{"E2_NATUREZ"		, ""})      
     
    If (!Empty(::oCTe:cChave))
		aAdd(aCabec,{"F1_CHVNFE"  	, ::oCTe:cChave														, NIL, Nil})
	EndIf
    
	
Return aCabec

Method GetItens() Class TCTEntrada
	
	Local nI		:= 0
	Local aItens	:= {}
	Local oItem		:= Nil
	Local cChave	:= Nil
	
	For nI := 1 To ::oCTe:oCTeItens:GetCount()
		
		oItem := ::oCTe:oCTeItens:GetItem(nI)
		
		::GatItem(nI) 
		::ValidaItem(oItem) 
		
		DbSelectArea("SF1")
		SF1->(DbSetOrder(8))
		
		If SF1->(DbSeek(xFilial('SF1')+PADR(oItem:cChaveNFe, TamSx3("F1_CHVNFE")[1])))
			
			cChave := PADR(oItem:cDoc, TamSx3("F1_DOC")[1])+PADR(oItem:cSerie, TamSx3("F1_SERIE")[1])+PADR(oItem:cFornece, TamSx3("F1_FORNECE")[1])+PADR(oItem:cLoja, TamSx3("F1_LOJA")[1])
					
			Aadd(aItens,{{"PRIMARYKEY", cChave}})            
    	
		EndIf
			
	Next nI   
	
Return aItens

Method Execute(_oCTeResulStruct) Class TCTEntrada

	Local aCabec			:= {}
	Local aItens			:= {}
	
	Local lOk				:= .F.
	Local cMsgLog			:= ""
	Local nI				:= 0
	Local aErroAuto			:= {}
	Local _lImpfor			:= Nil
	
	Private lMsErroAuto 	:= .F.
	Private lMsHelpAuto 	:= .T.
	Private lAutoErrNoFile	:= .T.

	::oCTe 	:= _oCTeResulStruct
	
	
	DbSelectArea("SF1")
	SF1->(DbSetOrder(1))
	
	If !SF1->(DbSeek(xFilial('SF1')+PADR(::oCTe:cDoc, TamSx3("F1_DOC")[1])+PADR(::oCTe:cSerie, TamSx3("F1_SERIE")[1])+PADR(::oCTe:cFornece, TamSx3("F1_FORNECE")[1])+PADR(::oCTe:cLoja, TamSx3("F1_LOJA")[1])))
		
		aCabec	:= ::GetCabecalho()
		aItens	:= ::GetItens()
		
		Begin Transaction
		
			If (::oCTe:lImpFor)
				_lImpfor := SuperGetMv("MV_M116FOR",.F.,.F.)
				SuperGetMv()//limpar __GetMV
				PUTMV("MV_M116FOR", .T.)
			EndIf
			
			MSExecAuto({|x,y| Mata116(x,y)},aCabec, aItens)
			
			If (::oCTe:lImpFor)
				SuperGetMv()//limpar __GetMV
				PUTMV("MV_M116FOR", _lImpfor)
			EndIf
		
			
			If (!lMsErroAuto)
			
				lOk			:= .T.
				cMsgLog 	:= "[CTe: "+::oCTe:cDoc+", Serie:"+::oCTe:cSerie+", Fornecedor: "+::oCTe:cFornece+"] => inserido com sucesso."
			
			Else
				
				DisarmTransaction()
				
				lOk			:= .F.
				cMsgLog 	:= "[CTe: "+::oCTe:cDoc+", Serie:"+::oCTe:cSerie+", Fornecedor: "+::oCTe:cFornece+"] Erro => "+ CRLF
				
				aErroAuto	:= GetAutoGRLog()
				
				For nI := 1 To Len(aErroAuto)
					cMsgLog += StrTran(StrTran(aErroAuto[nI], "<", ""), "-", "") + " "
				Next nI		
				
			EndIf
			
		End Transaction 	
	
	Else
		
		lOk			:= .F.
		cMsgLog 	:= "[CTe: "+::oCTe:cDoc+", Serie:"+::oCTe:cSerie+", Fornecedor: "+::oCTe:cFornece+"] => já existe."
		
	EndIf
	
	::oResult:Add(lOk, cMsgLog)
	

Return ::oResult

Class TCTeEntradaResultStruct From LongClassName
	
	Public Data lOk			as logical 
	Public Data cMensagem		as character 
	
	Public Method New() Constructor
	Public Method Add()
	
EndClass

Method New() Class TCTeEntradaResultStruct

	::lOk		:= .T.
	::cMensagem	:= ""
Return()

Method Add(lOk, cMensagem) Class TCTeEntradaResultStruct

	::lOk		:= lOk
	::cMensagem	+= cMensagem
	
Return()
