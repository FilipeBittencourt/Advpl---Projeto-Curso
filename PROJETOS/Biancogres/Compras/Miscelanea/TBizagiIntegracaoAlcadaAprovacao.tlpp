#INCLUDE "PROTHEUS.CH"
#INCLUDE "TOPCONN.CH"
#include 'FWMVCDef.ch'

/*/{Protheus.doc} TBizagiIntegracaoAlcadaAprovacao
@author Filipe Bittencourt (Facile)
@since 13/10/2021
@project 28966
@version 1.0
@description Job para Integração das Alçada de aprovação do  vindas do BIZAGI, substituindo o fonte BIAFG091
@observation O fonte corresponde ao JOB da tela BIA901.PRW
@type function
/*/

//U_BIAFF003
User Function BIAFF003()

	Local oObj := Nil
	Local cMSG := ""

	RpcSetType(3)
	RpcSetEnv("01", "01",,,"COM")

	cMSG:= "TBizagiIntegracaoAlcadaAprovacao:BIAFF003() => Inicio empresa "+cEmpAnt+"/01 em "+cValToChar(dDataBase)+" - "+Time()+" "
	ConOut(cMSG)
	oObj := TBizagiIntegracaoAlcadaAprovacao():New()
	oObj:Processar()
	cMSG:= "TBizagiIntegracaoAlcadaAprovacao:BIAFF003() => Fim  empresa "+cEmpAnt+"/01 em "+cValToChar(dDataBase)+" - "+Time()+" "
	ConOut(cMSG)

	RpcClearEnv()

Return()


	Class TBizagiIntegracaoAlcadaAprovacao From LongClassName

		Data aErro
		Data cEmail
		Data cProcessoBizagi


		Public  Method New() Constructor
		Public  Method Processar()

		Private Method ValidarDados(aJsonObj)
		Private Method RegraClasseValor(oJsonObj)
		Private Method RegraDriver(oJsonObj)
		Private Method RegraAlcada(oJsonObj)
		Private Method RegraAprovador(oJsonObj)
		Private Method RegraPerfilAprovacao(oJsonObj)
		Private Method RegraValorAprovacao(oJsonObj)

		Private Method InserirDados(aJsonObj)
		Private Method SalvarClasseValorCTH(oJsonObj)
		Private Method SalvarGrupoAprovacao(oJsonObj)

		Private Method Status(cStatus,  oJsAlcad)
		Private Method LogMail(aObjErr)
		Private Method GetNewCodigo()

	EndClass

Method New(lJob) Class TBizagiIntegracaoAlcadaAprovacao

	::aErro   := {}
	::cProcessoBizagi := ""
	::cEmail :=  "filipe.bittencourt@facilesistemas.com.br;barbara.coelho@biancogres.com.br" // U_GetBiaPar("MV_EMAILINTBIZCLI", "sistemas.ti@biancogres.com.br")


Return(Self)

Method Processar() Class TBizagiIntegracaoAlcadaAprovacao

	Local _cSQL   := ""
	Local cQry    := GetNextAlias()
	Local cBZPRC  := ""
	Local aObjAlc := {}
	Local nI      := 0
	Local oCAB     := Nil
	Local aITEM    := {}

	_cSQL := "  SELECT                                               " + CRLF
	_cSQL += "  CV_EMPRESA             AS EMPRESA                    " + CRLF
	_cSQL += " ,CV_FILIAL              AS FILIAL                     " + CRLF
	_cSQL += " ,CV_CLVL                AS CLASSE                     " + CRLF
	_cSQL += " ,CV_CLASSE              AS TPCLASSE                   " + CRLF
	_cSQL += " ,CV_DESCRCLVL           AS DESCRCLVL                  " + CRLF
	_cSQL += " ,CV_CATEGORIAPPR        AS CATEGORIAPPR               " + CRLF
	_cSQL += " ,CV_CRITERIOCUSTO       AS CRITERIOCUSTO              " + CRLF
	_cSQL += " ,CV_QUADRORH            AS QUADRORH                   " + CRLF
	_cSQL += " ,CV_UN			       	     AS UN                         " + CRLF
	_cSQL += " ,CV_CC			       	     AS CC                         " + CRLF
	_cSQL += " ,CV_APLICACUSTO		     AS APLICACUSTO                " + CRLF
	_cSQL += " ,CV_CONTROLATAG		     AS CONTROLATAG                " + CRLF
	_cSQL += " ,CV_ATRIBUICONTA        AS ATRIBUICONTA               " + CRLF
	_cSQL += " ,CV_CLVLGMCD            AS CLVLGMCD                   " + CRLF
	_cSQL += " ,CV_ENTIDADEGMCD        AS ENTIDADEGMCD               " + CRLF
	_cSQL += " ,CV_SETORGMCD           AS SETORGMCD                  " + CRLF

	_cSQL += " ,CV_LOGINAPROVADOR      AS LOGINAPROVADOR             " + CRLF
	_cSQL += " ,CV_CODIGOAPROVADOR     AS CODIGOAPROVADOR            " + CRLF
	_cSQL += " ,CV_IDUSERAPROVADOR     AS IDUSERAPROVADOR            " + CRLF
	_cSQL += " ,CV_APROVADORTEMP       AS APROVADORTEMP              " + CRLF
	_cSQL += " ,CV_IDUSERAPROVADORTEMP AS IDUSERAPROVADORTEMP        " + CRLF

	_cSQL += " ,CV_CODIGOPERFIL        AS CODIGOPERFIL               " + CRLF
	_cSQL += " ,CV_VALMIN		           AS VALMIN                     " + CRLF
	_cSQL += " ,CV_VALMAX			         AS VALMAX                     " + CRLF
	//_cSQL += " ,CV_DRIVER              AS DRIVER                     " + CRLF
	_cSQL += " ,BZNUMPROC              AS BZNUMPROC                  " + CRLF
	_cSQL += " ,ID                                                   " + CRLF

	_cSQL += " FROM BZINTEGRACAO_CLASSEVALOR                         " + CRLF
  /*
  STATUS 
  A = AGUARDADNDO ProcessarMENTO e INCLUIDO PELO BIZAGI
  P = ProcessarDO PELO PROTHEUS
  E = ERRO
  C = Cancelado
	*/      
	_cSql += "  WHERE  STATUS = 'A'                     " + CRLF
	//_cSql += "  AND ISNULL(CV_EMPRESA,'01')  = '"+cEmpAnt+"'"  + CRLF
	_cSql += "  ORDER BY BZNUMPROC "  + CRLF

	TcQuery _cSQL New Alias (cQry)

	While (cQry)->(!EOF())

		IF cBZPRC != AllTrim((cQry)->BZNUMPROC)

			If Len(aITEM) > 0

				oCAB["CAB"]["ITENS"] :=  aITEM
				aadd(aObjAlc,oCAB)
				aITEM := {}
				nI := 0

			EndIf

			oCAB                     := JsonObject():New()
			oCAB["CAB"]              := JsonObject():New()
			oCAB["CAB"]["BZNUMPROC"] := AllTrim((cQry)->BZNUMPROC)
			oCAB["CAB"]["CLASSE"]    := AllTrim((cQry)->CLASSE)
			oCAB["CAB"]["ERROS"]     := {}

		EndIf

		AADD(aITEM,   JsonObject():New())
		nI++

		aITEM[nI]["ITEM"]                := PADL(cValToChar(nI),2,"0")
		aITEM[nI]["EMPRESA"]             := AllTrim((cQry)->EMPRESA)
		aITEM[nI]["FILIAL"]              := AllTrim((cQry)->FILIAL)
		aITEM[nI]["CLASSE"]              := AllTrim((cQry)->CLASSE)
		aITEM[nI]["TPCLASSE"]            := AllTrim((cQry)->TPCLASSE)
		aITEM[nI]["DESCRCLVL"]           := UPPER(AllTrim((cQry)->DESCRCLVL))
		aITEM[nI]["CATEGORIAPPR"]        := AllTrim((cQry)->CATEGORIAPPR)
		aITEM[nI]["CRITERIOCUSTO"]       := UPPER(AllTrim((cQry)->CRITERIOCUSTO))
		aITEM[nI]["QUADRORH"]            := UPPER(AllTrim((cQry)->QUADRORH))
		aITEM[nI]["UN"]                  := AllTrim((cQry)->UN)
		aITEM[nI]["CC"]                  := IIF( EMPTY((cQry)->CC ) , "" ,(cQry)->CC)
		aITEM[nI]["APLICACUSTO"]         := AllTrim((cQry)->APLICACUSTO)
		aITEM[nI]["CONTROLATAG"]         := AllTrim((cQry)->CONTROLATAG)
		aITEM[nI]["ATRIBUICONTA"]        := AllTrim((cQry)->ATRIBUICONTA)
		aITEM[nI]["CLVLGMCD"]            := AllTrim((cQry)->CLVLGMCD)
		aITEM[nI]["ENTIDADEGMCD"]        := AllTrim((cQry)->ENTIDADEGMCD)
		aITEM[nI]["SETORGMCD"]           := AllTrim((cQry)->SETORGMCD)
		aITEM[nI]["CODIGOAPROVADOR"]     := AllTrim((cQry)->CODIGOAPROVADOR)
		aITEM[nI]["IDUSERAPROVADOR"]     := AllTrim((cQry)->IDUSERAPROVADOR)
		aITEM[nI]["APROVADORTEMP"]       := IIF( EMPTY((cQry)->APROVADORTEMP ) , "" ,(cQry)->APROVADORTEMP)
		aITEM[nI]["IDUSERAPROVADORTEMP"] := IIF( EMPTY((cQry)->IDUSERAPROVADORTEMP ) , "" ,(cQry)->IDUSERAPROVADORTEMP)
		aITEM[nI]["LOGINAPROVADOR"]      := AllTrim((cQry)->LOGINAPROVADOR)
		aITEM[nI]["CODIGOPERFIL"]        := AllTrim((cQry)->CODIGOPERFIL)
		//aITEM[nI]["DRIVER"]              := AllTrim((cQry)->DRIVER)
		aITEM[nI]["VALMIN"]              := (cQry)->VALMIN
		aITEM[nI]["VALMAX"]              := (cQry)->VALMAX
		aITEM[nI]["BZNUMPROC"]           := AllTrim((cQry)->BZNUMPROC)
		aITEM[nI]["ID"]                  := (cQry)->ID


		cBZPRC := AllTrim((cQry)->BZNUMPROC)

		(cQry)->(DbSkip())

	EndDo

	(cQry)->(DbCloseArea())

	//pegando a ultimo registro após o fim do arquivo
	If ValType(oCAB) <> "U"

		oCAB["CAB"]["ITENS"] :=  aITEM
		aadd(aObjAlc,oCAB)
		FreeObj(oCAB)

		::InserirDados(aObjAlc)

	Endif

	//oCAB := JsonObject():New()
	//oCAB["ALCADA"] := aObjAlc

Return()

/****************************************************************************/
/***********************    REGRAS  *****************************************/
/****************************************************************************/
Method ValidarDados(aObjAlc) Class TBizagiIntegracaoAlcadaAprovacao

	Local lErro   := .T.
	Local aObjErr := {}
	Local aAllErr := {}
	Local cMsg    := ""
	Local nI      :=  1
	Local nJ      :=  1
	Local oObjRet := JsonObject():New()

	While  Len(aObjAlc) >= nI

		aAllErr := {}
		cMsg    := ""

		For nJ := 1 To Len(aObjAlc[nI]["CAB"]["ITENS"])

			aObjErr := {}
			//regra 01: Validar se a Classe de Valor existe e está ativa na tabela
			oObjRet := ::RegraClasseValor(aObjAlc[nI]["CAB"]["ITENS"][nJ])

			If ValType(oObjRet) <> "U"
				AADD(aObjErr, oObjRet)
			EndIf
			// fim regra 01

			//	Regra 02:  Validar se o Driver informado já está cadastrado e vinculado a CV correta na tabela ZBZ010
			/*oObjRet := ::RegraDriver(aObjAlc[nI]["CAB"]["ITENS"][nJ])
			If ValType(oObjRet) <> "U"
				AADD(aObjErr, oObjRet)
			EndIf*/
			//	fim  Regra 02:  Validar se o Driver informado já está cadastrado e vinculado a CV correta na tabela ZBZ010

			//	Regra 03: Validar se a Alçada de Aprovação existe e está ativa na tabela SAL010
			oObjRet := ::RegraAlcada(aObjAlc[nI]["CAB"]["ITENS"][nJ])
			If ValType(oObjRet) <> "U"
				AADD(aObjErr, oObjRet)
			EndIf
			// fim Regra 03: Validar se a Alçada de Aprovação existe e está ativa na tabela SAL010

			//	Regra 04: Validar se aprovadores ou perfis existem na SAK010
			oObjRet := ::RegraAprovador(aObjAlc[nI]["CAB"]["ITENS"][nJ])
			If ValType(oObjRet) <> "U"
				AADD(aObjErr, oObjRet)
			Else
				//	Regra 4.15: Validar limites de  aprovadores  se atendem
				oObjRet := ::RegraPerfilAprovacao(aObjAlc[nI]["CAB"]["ITENS"][nJ])
				If ValType(oObjRet) <> "U"
					AADD(aObjErr, oObjRet)
				EndIf
				// fim Regra 4.1: Validar limites de  aprovadores  se atendem
			EndIf
			// fim Regra 04: Validar se aprovadores ou perfis existem na SAK010

			If Len(aObjErr) > 0
				AADD(aAllErr, aObjErr)
			EndIf

		Next nJ

	   //	Regra 05:
		 /*  
			1-	Verificar se o CV_VALMIN do primeiro registro do processo é igual a 0,01
			2-	Verificar se o CV_VALMAX do último registro do processo é igual a 99.999.999.999,99
			3-	Verificar em todas as linhas do processo se a diferença entre o CV_VALMIN do registro posterior e o CV_VALMAX do registro anterior é igual a 0,01.
		  4-  Não pode existir mais de um aprovador para a mesma faixa de valor como está aqui onde entre os valores 10.000,01 e 20.000,00 existem 2 aprovadores
		 */
		  oObjRet := ::RegraValorAprovacao(aObjAlc[nI]["CAB"]["ITENS"])
			If ValType(oObjRet) <> "U"
				AADD(aObjErr, oObjRet)
			EndIf 
			//	fim  Regra 05: 



		If Len(aAllErr) > 0			 
			aObjAlc[nI]["CAB"]["ERROS"]        := aAllErr
		EndIf

		nI++
	EndDo

	// organizando os dados dentro de uma unica estrutura
	FreeObj(oObjRet)
	oObjRet := JsonObject():New()
	oObjRet["ALCADAS"] := aObjAlc

Return oObjRet

Method RegraClasseValor(oJS) Class TBizagiIntegracaoAlcadaAprovacao

	Local cSqlA    := ""
	Local cQryA    := GetNextAlias()
	Local oObjRet  := Nil


	cSqlA := " SELECT CTH_CLVL " + CRLF
	cSqlA += " FROM CTH010 (NOLOCK) " + CRLF
	cSqlA += " WHERE CTH_BLOQ != '1' AND D_E_L_E_T_ = '' " + CRLF
	cSqlA += " AND CTH_CLVL = '"+oJS["CLASSE"]+"' " + CRLF

	TcQuery cSqlA New Alias (cQryA)

	If !(cQryA)->(EOF())

		oObjRet                      := JsonObject():New()
		oObjRet["ERRO"]              := JsonObject():New()
		oObjRet["ERRO"]["MENSAGEM"]  := "Classe de valor "+oJS["CLASSE"]+" já existe na tabela CTH010."
		oObjRet["ERRO"]["ID"]        := oJS["ID"]
		oObjRet["ERRO"]["BZNUMPROC"] := oJS["BZNUMPROC"]
		oObjRet["ERRO"]["ITEM"]      := oJS["ITEM"]

	EndIf

	(cQryA)->(DbCloseArea())

Return oObjRet

Method RegraDriver(oJS) Class TBizagiIntegracaoAlcadaAprovacao

	Local cSqlA     := ""
	Local cQryA     := GetNextAlias()
	Local oObjRet   := Nil

	cSqlA   := " SELECT ZBZ_DRVDB, ZBZ_CLVLDB " + CRLF
	cSqlA   += " FROM " + RETSQLNAME("ZBZ") + " (NOLOCK) " + CRLF
	cSqlA   += " WHERE D_E_L_E_T_ = '' " + CRLF
	cSqlA   += " AND ZBZ_CLVLDB = '"+oJS["CLASSE"]+"' AND ZBZ_DRVDB  = '"+oJS["DRIVER"]+"' " + CRLF

	TcQuery cSqlA New Alias (cQryA)

	If (cQryA)->(EOF())

		oObjRet                      := JsonObject():New()
		oObjRet["ERRO"]              := JsonObject():New()
		oObjRet["ERRO"]["MENSAGEM"]  := "O DRIVE: "+oJS["DRIVER"]+" não foi encontrado  para a classe de valor: "+oJS["CLASSE"]+" "
		oObjRet["ERRO"]["ID"]        := oJS["ID"]
		oObjRet["ERRO"]["BZNUMPROC"] := oJS["BZNUMPROC"]
		oObjRet["ERRO"]["ITEM"]      := oJS["ITEM"]

	EndIf

	(cQryA)->(DbCloseArea())

Return oObjRet

Method RegraAlcada(oJS) Class TBizagiIntegracaoAlcadaAprovacao

	Local cSqlA     := ""
	Local cQryA     := GetNextAlias()
	Local oObjRet   := Nil

	cSqlA   := " SELECT AL_YCLVL " + CRLF
	cSqlA   += " FROM SAL010 (NOLOCK) " + CRLF
	cSqlA   += " WHERE D_E_L_E_T_ = '' " + CRLF
	cSqlA   += " AND AL_YCLVL = '"+oJS["CLASSE"]+"' AND AL_MSBLQL <> '1' " + CRLF

	TcQuery cSqlA New Alias (cQryA)

	If !(cQryA)->(EOF())

		oObjRet                      := JsonObject():New()
		oObjRet["ERRO"]              := JsonObject():New()
		oObjRet["ERRO"]["MENSAGEM"]  := "Existe alçada de aprovação de PC cadastrada para a classe de valor: "+oJS["CLASSE"]+" "
		oObjRet["ERRO"]["ID"]        := oJS["ID"]
		oObjRet["ERRO"]["BZNUMPROC"] := oJS["BZNUMPROC"]
		oObjRet["ERRO"]["ITEM"]      := oJS["ITEM"]

	EndIf

	(cQryA)->(DbCloseArea())

Return oObjRet

Method RegraAprovador(oJS) Class TBizagiIntegracaoAlcadaAprovacao

	Local cSqlA     := ""
	Local cQryA     := GetNextAlias()
	Local oObjRet   := Nil

	cSqlA   := " SELECT  AK_COD, AK_USER " + CRLF
	cSqlA   += " FROM SAK010 (NOLOCK) " + CRLF
	cSqlA   += " WHERE D_E_L_E_T_ = '' " + CRLF
	cSqlA   += " AND AK_COD = '"+oJS["CODIGOAPROVADOR"]+"' AND AK_USER = '"+oJS["IDUSERAPROVADOR"]+"' " + CRLF

	TcQuery cSqlA New Alias (cQryA)

	If (cQryA)->(EOF())

		oObjRet                      := JsonObject():New()
		oObjRet["ERRO"]              := JsonObject():New()
		oObjRet["ERRO"]["MENSAGEM"]  := "Não existe aprovador cadastrado com o código: "+oJS["CODIGOAPROVADOR"]+"/ "
		oObjRet["ERRO"]["MENSAGEM"]  += oJS["IDUSERAPROVADOR"]+" "
		oObjRet["ERRO"]["ID"]        := oJS["ID"]
		oObjRet["ERRO"]["BZNUMPROC"] := oJS["BZNUMPROC"]
		oObjRet["ERRO"]["ITEM"]      := oJS["ITEM"]

	EndIf

	(cQryA)->(DbCloseArea())

Return oObjRet

Method RegraPerfilAprovacao(oJS) Class TBizagiIntegracaoAlcadaAprovacao

	Local cSqlA     := ""
	Local cQryA     := GetNextAlias()
	Local oObjRet   := Nil

	cSqlA   := " SELECT  DHL_COD " + CRLF
	cSqlA   += " FROM DHL010 (NOLOCK) " + CRLF
	cSqlA   += " WHERE D_E_L_E_T_ = '' " + CRLF
	cSqlA   += " AND   "+cValTochar(oJS["VALMIN"])+"  =   DHL_LIMMIN  "+  CRLF
	cSqlA   += " AND   "+cValTochar(oJS["VALMAX"])+"  =   DHL_LIMMAX "+  CRLF
	cSqlA   += " AND DHL_COD = '"+oJS["CODIGOPERFIL"]+"' " + CRLF
	//cSqlA   += " AND   "+cValTochar(VALMIN)+"  BETWEEN   DHL_LIMMIN AND DHL_LIMMAX "+  CRLF
	//cSqlA   += " AND   "+cValTochar(VALMAX)+"  BETWEEN   DHL_LIMMIN AND DHL_LIMMAX "+  CRLF

	TcQuery cSqlA New Alias (cQryA)


	If (cQryA)->(EOF())

		oObjRet                      := JsonObject():New()
		oObjRet["ERRO"]              := JsonObject():New()
		oObjRet["ERRO"]["MENSAGEM"]  := "Não existe perfil de aprovação para o usuario: "+oJS["CODIGOAPROVADOR"]+" "
		oObjRet["ERRO"]["ID"]        := oJS["ID"]
		oObjRet["ERRO"]["BZNUMPROC"] := oJS["BZNUMPROC"]
		oObjRet["ERRO"]["ITEM"]      := oJS["ITEM"]

	EndIf

	(cQryA)->(DbCloseArea())

Return oObjRet



Method RegraValorAprovacao(oJS) Class TBizagiIntegracaoAlcadaAprovacao

	Local cSqlA     := ""
	Local cQryA     := GetNextAlias()
	Local oObjRet   := Nil

	cSqlA   := " SELECT  DHL_COD " + CRLF
	cSqlA   += " FROM DHL010 (NOLOCK) " + CRLF
	cSqlA   += " WHERE D_E_L_E_T_ = '' " + CRLF
	cSqlA   += " AND   "+cValTochar(oJS["VALMIN"])+"  =   DHL_LIMMIN  "+  CRLF
	cSqlA   += " AND   "+cValTochar(oJS["VALMAX"])+"  =   DHL_LIMMAX "+  CRLF
	cSqlA   += " AND DHL_COD = '"+oJS["CODIGOPERFIL"]+"' " + CRLF
	//cSqlA   += " AND   "+cValTochar(VALMIN)+"  BETWEEN   DHL_LIMMIN AND DHL_LIMMAX "+  CRLF
	//cSqlA   += " AND   "+cValTochar(VALMAX)+"  BETWEEN   DHL_LIMMIN AND DHL_LIMMAX "+  CRLF

	TcQuery cSqlA New Alias (cQryA)


	If (cQryA)->(EOF())

		oObjRet                      := JsonObject():New()
		oObjRet["ERRO"]              := JsonObject():New()
		oObjRet["ERRO"]["MENSAGEM"]  := "Não existe perfil de aprovação para o usuario: "+oJS["CODIGOAPROVADOR"]+" "
		oObjRet["ERRO"]["ID"]        := oJS["ID"]
		oObjRet["ERRO"]["BZNUMPROC"] := oJS["BZNUMPROC"]
		oObjRet["ERRO"]["ITEM"]      := oJS["ITEM"]

	EndIf

	(cQryA)->(DbCloseArea())

Return oObjRet


/****************************************************************************/
/***********************  FIM  das REGRAS  **********************************/
/****************************************************************************/

/****************************************************************************/
/***********************  SALVAR DADOS  *************************************/
/****************************************************************************/
Method InserirDados(aObjAlc) Class TBizagiIntegracaoAlcadaAprovacao

	Local oJS             := Nil
	Local nI              := 0
	Local nJ              := 0
	Local aJSErro         := {}
	Local aJSErroExecAuto := {}
	Local oObjRet         := JsonObject():New()

	oJS := ::ValidarDados(aObjAlc)

	If Len(oJS["ALCADAS"]) > 0

		For nI := 1 To Len(oJS["ALCADAS"])

			BEGIN TRANSACTION

				For nJ := 1 To Len(oJS["ALCADAS"][nI]["CAB"]["ITENS"])

					aJSErroExecAuto := {}

					If Len(oJS["ALCADAS"][nI]["CAB"]["ERROS"]) == 0

						oObjRet := ::SalvarClasseValorCTH(oJS["ALCADAS"][nI]["CAB"]["ITENS"][nJ]) //ExecAuto CTH
						If ValType(oObjRet) <> "U"
							AADD(aJSErroExecAuto, oObjRet)
						EndIf

						oObjRet := ::SalvarGrupoAprovacao(oJS["ALCADAS"][nI]["CAB"]["ITENS"][nJ]) //ExecAuto SAL
						If ValType(oObjRet) <> "U"
							AADD(aJSErroExecAuto, oObjRet)
						EndIf

						If Len(aJSErroExecAuto) > 0
							oJS["ALCADAS"][nI]["CAB"]["ERROS"] := {aJSErroExecAuto} //PEGANDO TODOS OS ERROS DE EXECAUTO
						EndIf

					EndIf

				Next nJ


				//Verifico novamente caso dê erro,  pois podem surgir novos erros vindos do EXECAUTO.
				If Len(oJS["ALCADAS"][nI]["CAB"]["ERROS"]) > 0

					DisarmTransaction()
					::Status("E", oJS["ALCADAS"][nI])
					AADD(aJSErro, oJS["ALCADAS"][nI]) //TODOS AS ALCADAS com  ERROS de EXECAUTO/REGRAS, para envio de email

				Else

					::Status("P", oJS["ALCADAS"][nI])

				EndIf


			END TRANSACTION

		Next nI

		If Len(aJSErro) > 0

			::LogMail(aJSErro)

		EndIf

	EndIf

Return()

Method SalvarClasseValorCTH(oJS) Class TBizagiIntegracaoAlcadaAprovacao


	Local aAlcada       := {}
	Local oJSErro       := Nil
	Local cError        := ""
	Local cErrorBlk     := ""
	Local oError        := ErrorBlock({|e| cErrorBlk := e:Description})

	Private lMsErroAuto := .F.
 
	CTH->(dbSetOrder(1)) //CTH_FILIAL, CTH_CLVL, R_E_C_N_O_, D_E_L_E_T_
	If CTH->(dbSeek(xFilial("CTH")+oJS["CLASSE"]))
		RETURN oJSErro
	EndIf
	 

	aadd(aAlcada, {"CTH_FILIAL", ""                          , NiL})
	aadd(aAlcada, {"CTH_CLVL"  , oJS["CLASSE"]               , NiL})
	aadd(aAlcada, {"CTH_CLASSE", oJS["TPCLASSE"]             , NiL})
	aadd(aAlcada, {"CTH_DESC01", oJS["DESCRCLVL"]            , NiL})
	aadd(aAlcada, {"CTH_YCAPPR", oJS["CATEGORIAPPR"]         , NiL})
	aadd(aAlcada, {"CTH_YCRIT" , oJS["CRITERIOCUSTO"]        , NiL})
	aadd(aAlcada, {"CTH_YQUADR", oJS["QUADRORH"]             , NiL})
	aadd(aAlcada, {"CTH_YUN"   , oJS["UN"]                   , NiL})
	aadd(aAlcada, {"CTH_YCC"   , oJS["CC"]                   , NiL})
	aadd(aAlcada, {"CTH_YAPLCT", oJS["APLICACUSTO"]          , NiL})
	aadd(aAlcada, {"CTH_YCTRTG", oJS["CONTROLATAG"]          , NiL})
	aadd(aAlcada, {"CTH_YATRIB", oJS["ATRIBUICONTA"]         , NiL})
	aadd(aAlcada, {"CTH_YCLVLG", oJS["CLVLGMCD"]             , NiL})
	aadd(aAlcada, {"CTH_YENTID", oJS["ENTIDADEGMCD"]         , NiL})
	aadd(aAlcada, {"CTH_YSETOR", oJS["SETORGMCD"]            , NiL})
	aadd(aAlcada, {"CTH_YEMPGR", oJS["EMPRESA"]              , NiL})
	aadd(aAlcada, {"CTH_YEMPFL", oJS["EMPRESA"]+oJS["FILIAL"], NiL})


	MSExecAuto({|x, y| CTBA060(x, y)},aAlcada, 3)

	If lMsErroAuto

		cError := MostraErro("/dirdoc", "error.log") // ARMAZENA A MENSAGEM DE ERRO
		ConOut(PadC("Automatic routine ended with error", 80))
		ConOut("Error: "+ cError)
		oJSErro                        := JsonObject():New()
		oJSErro["ERRO"]                := JsonObject():New()

		oJSErro["ERRO"]["MENSAGEM"]    := cError
		IF !Empty(cErrorBlk)
			oJSErro["ERRO"]["MENSAGEM"]  += "<-->"+cErrorBlk
		EndIf
		oJSErro["ERRO"]["ID"]          := oJS["ID"]
		oJSErro["ERRO"]["BZNUMPROC"]   := oJS["BZNUMPROC"]
		oJSErro["ERRO"]["ITEM"]        := oJS["ITEM"]

	EndIf

	ErrorBlock(oError)

Return oJSErro

	// https://centraldeatendimento.totvs.com/hc/pt-br/articles/360053500013-Cross-Segmento-TOTVS-Backoffice-Linha-Protheus-ADVPL-MATA114-ExecAuto
Method SalvarGrupoAprovacao(oJS) Class TBizagiIntegracaoAlcadaAprovacao

	Local oJSErro   := Nil
	Local oModel    := Nil
	Local cError    := ""
	Local cErrorBlk := ""
	Local oError    := ErrorBlock({|e| cErrorBlk := e:Description})

	oModel := FwLoadModel("MATA114")
	oModel:SetOperation(MODEL_OPERATION_INSERT)
	oModel:Activate()

	//MASTER ModelSAL
	//oModel:SetValue("ModelSAL","AL_FILIAL  " , xFilial('SAL'))
	oModel:SetValue("ModelSAL","AL_COD     " ,::GetNewCodigo())
	oModel:SetValue("ModelSAL","AL_DESC    " ,'GRUPO ' + oJS["CLASSE"])
	oModel:SetValue("ModelSAL","AL_YCLVL   " ,oJS["CLASSE"])

	oModel:SetValue("DetailSAL","AL_ITEM    " ,oJS["ITEM"])
	oModel:SetValue("DetailSAL","AL_APROV   " ,oJS["CODIGOAPROVADOR"])
	oModel:SetValue("DetailSAL","AL_USER    " ,oJS["IDUSERAPROVADOR"])
	oModel:SetValue("DetailSAL","AL_NIVEL   " ,"0")
	oModel:SetValue("DetailSAL","AL_LIBAPR  " ,"A")
	oModel:SetValue("DetailSAL","AL_AUTOLIM " ,"S")
	oModel:SetValue("DetailSAL","AL_TPLIBER " ,"U")
	oModel:SetValue("DetailSAL","AL_PERFIL  " ,oJS["CODIGOPERFIL"])
	oModel:SetValue("DetailSAL","AL_APROSUP " ,oJS["APROVADORTEMP"])
	oModel:SetValue("DetailSAL","AL_MSBLQL  " ,'2')
	oModel:SetValue("DetailSAL","AL_USERSUP " ,oJS["IDUSERAPROVADORTEMP"])
	oModel:SetValue("DetailSAL","AL_YCC     " ,oJS["CC"])

	ErrorBlock(oError)

	If oModel:VldData()

		oModel:CommitData()
		conout("Registro INCLUIDO!")

	Else

		cError := 	VarInfo("Erro ao incluir",oModel:GetErrorMessage())
		ConOut(PadC("Automatic routine ended with error", 80))
		ConOut("Error: "+ cError)
		oJSErro                      := JsonObject():New()
		oJSErro["ERRO"]              := JsonObject():New()

		oJSErro["ERRO"]["MENSAGEM"]    := cError
		IF !Empty(cErrorBlk)
			oJSErro["ERRO"]["MENSAGEM"]  += "<-->"+cErrorBlk
		EndIf
		oJSErro["ERRO"]["ID"]          := oJS["ID"]
		oJSErro["ERRO"]["BZNUMPROC"]   := oJS["BZNUMPROC"]
		oJSErro["ERRO"]["ITEM"]        := oJS["ITEM"]


	EndIf
	oModel:DeActivate()
	oModel:Destroy()
	oModel := nil



Return oJSErro
/****************************************************************************/
/*********************** FIM SALVAR DADOS  **********************************/
/****************************************************************************/

Method Status(cStatus,  oJsAlcad) Class TBizagiIntegracaoAlcadaAprovacao

	Local lRet      := .T.
	Local cSql      := ""
	Local cSql2     := ""
	Local cMsgErr   := ""
	Local nI        := 0
	Local DTINTEGRA   := DTOS(dDataBase)
	Local cHRINTEGRA   := TIME()
	Local nJ        := 0
	Local nId       := 0
	DEFAULT cStatus := "" // E=Erro; P=Processardo; A=Aguard. Processarmento

	cSql   := " UPDATE dbo.BZINTEGRACAO_CLASSEVALOR SET "+CRLF
	cSql   += "   STATUS = '"+cStatus+"' "+CRLF
	cSql   += " , DTINTEGRA = '"+DTINTEGRA+"' "+CRLF
	cSql   += " , HRINTEGRA = '"+cHRINTEGRA+"' "+CRLF

	If cStatus == "E"

		For nI := 1 To Len(oJsAlcad["CAB"]["ERROS"])

			For nJ := 1 To Len(oJsAlcad["CAB"]["ERROS"][nI])

				cMsgErr += oJsAlcad["CAB"]["ERROS"][nI,nJ]["ERRO"]["MENSAGEM"] + CRLF
				nId     := oJsAlcad["CAB"]["ERROS"][nI,nJ]["ERRO"]["ID"]

			Next nJ

			cSql2  += " , LOG           = '"+StrTran(cMsgErr,"' "," ")+" '"+CRLF
			cSql2  += " WHERE BZNUMPROC = '"+oJsAlcad["CAB"]["BZNUMPROC"]+"' "+CRLF
			cSql2  += " AND ID = "+cValToChar(nId)+" "+CRLF

			lRet   := TcSQLExec(cSql+cSql2) == 0

			If !lRet
				ConOut("TBizagiIntegracaoAlcadaAprovacao: TCSQLError() -> " + TCSQLError())
			EndIf

			nId     := 0
			cMsgErr := ""
			cSql2   := ""

		Next nI

		//Após colocar o erro em cada linha. ADD Todo o processo mesmo alguns dando certo todo o processo fica comprometido
		cSql   := " UPDATE dbo.BZINTEGRACAO_CLASSEVALOR SET "+CRLF
		cSql   += "   STATUS = 'E' "+CRLF
		cSql   += " , DTINTEGRA = '"+DTINTEGRA+"' "+CRLF
		cSql   += " , HRINTEGRA = '"+cHRINTEGRA+"' "+CRLF
		cSql   += " WHERE BZNUMPROC = '"+oJsAlcad["CAB"]["BZNUMPROC"]+"' "+CRLF
		
		lRet   := TcSQLExec(cSql) == 0
		If !lRet
			ConOut("TBizagiIntegracaoAlcadaAprovacao: TCSQLError() -> " + TCSQLError())
		EndIf

	Else

		cSql  += " WHERE BZNUMPROC = '"+oJsAlcad["CAB"]["BZNUMPROC"]+"' "+CRLF
		lRet   := TcSQLExec(cSql) == 0
		If !lRet
			ConOut("TBizagiIntegracaoAlcadaAprovacao: TCSQLError() -> " + TCSQLError())
		EndIf

	EndIf

Return(lRet)

Method LogMail(aObjErr) Class TBizagiIntegracaoAlcadaAprovacao

	Local nW       := 0
	Local nJ       := 0
	Local nI       := 0
	Local cHtml    := ""
	Local cErrBIZ  := ""
	Local cErrId   := ""
	Local cErrItem := ""
	Local cMSG     := ""
	Local oMail    := TAFMail():New()


	If Len(aObjErr) > 0

		cHtml += '<style type="text/css">'
		cHtml += '.tg  {border-collapse:collapse;border-color:#aaa;border-spacing:0;}'
		cHtml += '.tg td{background-color:#fff;border-color:#aaa;border-style:solid;border-width:1px;color:#333;'
		cHtml += '  font-family:Arial, sans-serIf;font-size:14px;overflow:hidden;padding:10px 5px;word-break:normal;}'
		cHtml += '.tg th{background-color:#f38630;border-color:#aaa;border-style:solid;border-width:1px;color:#fff;'
		cHtml += '  font-family:Arial, sans-serIf;font-size:14px;font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}'
		cHtml += '.tg .tg-zw5y{border-color:inherit;text-align:center;text-decoration:underline;vertical-align:top}'
		cHtml += '.tg .tg-0lax{text-align:left;vertical-align:top}'
		cHtml += '</style>'
		cHtml += '<table width="100%" class="tg">'
		cHtml += '<thead>'
		cHtml += '  <tr>'
		cHtml += '    <th class="tg-zw5y">' + cEmpAnt + cFilAnt + ' - Aprovação alçada</th>'
		cHtml += '  </tr>'
		cHtml += '</thead>'
		cHtml += '<tbody>'


		For nI  := 1 To Len(aObjErr)

			cHtml   += '  <tr>'
			cHtml   += '  <td class="tg-0lax">'
			cHtml   += ' <b>Processo Bizagi: </b>' +aObjErr[nI]["CAB"]["BZNUMPROC"]+ '<br><br> '

			For nJ := 1 To Len(aObjErr[nI]["CAB"]["ERROS"])

				For nW := 1 To Len(aObjErr[nI]["CAB"]["ERROS"][nJ])

					cMSG     := aObjErr[nI]["CAB"]["ERROS"][nJ,nW]["ERRO"]["MENSAGEM"]
					cMSG     := StrTran(cMSG,chr(10),"<br><br>")
					cErrItem := aObjErr[nI]["CAB"]["ERROS"][nJ,nW]["ERRO"]["ITEM"]
					cErrId   := cValToChar(aObjErr[nI]["CAB"]["ERROS"][nJ,nW]["ERRO"]["ID"])
					cErrBIZ  += '<b>Erro: ' +PADL(cValToChar(nW),2,"0")+ ':</b> ' +cMSG + '<br>'

				Next nW

				cHtml    += '<b>ID:' +cErrId+ '</b> <br> '
				cHtml    += '<b>Item:' +cErrItem+ '</b> <br> '
				cHtml    += cErrBIZ+"<br><br>"
				cErrBIZ  := ""
				cErrItem := ""
				cErrId   := ""

			Next nJ

			cHtml   += '  </td>'
			cHtml   += '</tr>'

		Next nI

		cHtml += '</tbody>'
		cHtml += '</table>'

		oMail:cTo := ::cEmail
		oMail:cSubject := "TBizagiIntegracaoAlcadaAprovacao - Inconsistências"
		oMail:cBody := cHtml
		oMail:Send()


	EndIf

RETURN


Method GetNewCodigo() Class TBizagiIntegracaoAlcadaAprovacao

	Local _msDocSAL := ""

	_msDocSAL := GetSxENum("SAL","AL_COD")
	SAL->(dbSetOrder(1))
	If SAL->(dbSeek(xFilial("SAL") + _msDocSAL))
		While .T.
			_msDocSAL := GetSxENum("SAL","AL_COD")
			SAL->(dbSetOrder(1))
			If !SAL->(dbSeek(xFilial("SAL") + _msDocSAL))
				Exit
			EndIf
		End
	EndIf

Return _msDocSAL
