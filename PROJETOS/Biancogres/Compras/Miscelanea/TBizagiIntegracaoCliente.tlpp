#INCLUDE "PROTHEUS.CH"
#INCLUDE "TOPCONN.CH"

/*/{Protheus.doc} TBizagiIntegracaoCliente
@author Wlysses Cerqueira (Facile)
@since 24/06/2020  
@project 24427
@version 1.0
@description 
@type function
/*/

User Function BIPROCCL()

    Local oObj := Nil

    //RpcSetEnv("01", "01")

    oObj := TBizagiIntegracaoCliente():New()

    oObj:Processa()

    //RpcClearEnv()

Return()

    Class TBizagiIntegracaoCliente From LongClassName

        Data aErro
        Data cEmail

        Public Method New() Constructor
        Public Method Processa()

        // Feito via ExecAuto
        Public Method ExecCliente(cQry)

        Public Method ValidadeCli(cQry)
        Public Method Status(cStatus, nId, cLog, cNewCod)
        Public Method GetErrorLog()
        Public Method Ordem()
        Public Method LogMail()

    EndClass

Method New(lJob) Class TBizagiIntegracaoCliente

    ::aErro:= {}
    ::cEmail := U_GetBiaPar("MV_EMAILINTBIZCLI", "sistemas.ti@biancogres.com.br")

Return(Self)

Method Processa() Class TBizagiIntegracaoCliente

    Local cQry := GetNextAlias()
    Local cSQL := ""

    cSQL := " SELECT *, ISNULL(CONVERT(NVARCHAR(2048),CLI_YAVALCL),'') CLI_YAVALCL_M "
    cSQL += " FROM dbo.BZINTEGRACAO_CLIENTE A "
    cSQL += " WHERE STATUS = 'A' "
    cSQL += " ORDER BY ID "

    TcQuery cSQL New Alias (cQry)

    While !(cQry)->(EOF())

        If ::ValidadeCli(cQry)

            Begin Transaction

                ::ExecCliente(cQry)

            End Transaction

        EndIf

        (cQry)->(DbSkip())

    EndDo

    (cQry)->(DbCloseArea())

    ::LogMail()

Return()

Method ExecCliente(cQry) Class TBizagiIntegracaoCliente

    Local aArea             := GetArea()
    Local nOperacao
    Local cLojaCliente

    Private aVetor          := {}
    Private INCLUI          := .T.
    Private lMsErroAuto 	:= .T.
    Private lMsHelpAuto		:= .T.
    Private lAutoErrNoFile 	:= .T.

    //If Empty((cQry)->CLI_COD)
    If Alltrim((cQry)->CLI_TPOPER) == "I" //INCLUSÃO

        nOperacao := 3

        INCLUI := .T.

        DBSelectArea("SA1")
        SA1->(DBSetOrder(3)) // A1_FILIAL, A1_CGC, R_E_C_N_O_, D_E_L_E_T_

        If SA1->(DBseek(xFilial("SA1") + (cQry)->CLI_CGC))

            If AllTrim(SA1->A1_YBIZAGI) == AllTrim((cQry)->CLI_YBIZAGI)

                nOperacao := 4

                (cQry)->CLI_COD := SA1->A1_COD

            Else

                ::Status("P", (cQry)->ID, "Cliente ja existe no protheus, apenas atualizando codigo do cliente no Bizagi", SA1->A1_COD)

                Return()

            EndIf

        EndIf

    ElseIf Alltrim((cQry)->CLI_TPOPER) == "A" //ALTERACAO CADASTRO 

        nOperacao := 4

        INCLUI := .F.

    ElseIf Alltrim((cQry)->CLI_TPOPER) == "C" //SOMENTE CREDITO

        nOperacao := 4

        INCLUI := .F.

    EndIf

    If Len((cQry)->CLI_LOJA) < 2

        cLojaCliente = "0" + (cQry)->CLI_LOJA

    ElseIf (Len((cQry)->CLI_LOJA) == 2)

        cLojaCliente = (cQry)->CLI_LOJA
        
    EndIf

    If Alltrim((cQry)->CLI_TPOPER) == "I"

        aAdd(aVetor, {"A1_FILIAL" 		, xFilial("SA1"), Nil})
        aAdd(aVetor, {"A1_LOJA"    		, cLojaCliente, Nil})
        aAdd(aVetor, {"A1_NOME"			, AllTrim(StrTran(AllTrim(Upper((cQry)->CLI_NOME)),CHR(10),' ')), Nil})
        aAdd(aVetor, {"A1_PESSOA"    	, (cQry)->CLI_PESSOA, Nil})
        aAdd(aVetor, {"A1_CGC"       	, (cQry)->CLI_CGC, Nil})
        aAdd(aVetor, {"A1_TIPO"      	, (cQry)->CLI_TIPO, Nil})
        aAdd(aVetor, {"A1_NREDUZ"    	, AllTrim(Upper((cQry)->CLI_NREDUZ)), Nil})
        aAdd(aVetor, {"A1_END"       	, Upper(AllTrim(StrTran((cQry)->CLI_END,CHR(10), ' ')) +', ' + AllTrim(StrTran((cQry)->CLI_ENDNUM,CHR(10), ' '))), Nil})
        aAdd(aVetor, {"A1_COMPLEM"      , Upper(alltrim(IIf((cQry)->CLI_COMPLEM == Nil, "", (cQry)->CLI_COMPLEM ))), Nil})
        aAdd(aVetor, {"A1_EST"       	, (cQry)->CLI_EST, Nil})
        aAdd(aVetor, {"A1_COD_MUN"      , Upper((cQry)->CLI_COD_MUN), Nil})
        aAdd(aVetor, {"A1_MUN"       	, AllTrim(Upper((cQry)->CLI_MUN)), Nil})
        aAdd(aVetor, {"A1_BAIRRO"    	, AllTrim(Upper((cQry)->CLI_BAIRRO)), Nil})
        aAdd(aVetor, {"A1_CEP"       	, AllTrim((cQry)->CLI_CEP), Nil})
        aAdd(aVetor, {"A1_TEL"			, AllTrim((cQry)->CLI_TEL), Nil})
        aAdd(aVetor, {"A1_FAX"       	, AllTrim(IIf((cQry)->CLI_FAX == Nil, "", (cQry)->CLI_FAX)), Nil})
        aAdd(aVetor, {"A1_CONTATO"   	, AllTrim(Upper((cQry)->CLI_CONTATO)), Nil})
        aAdd(aVetor, {"A1_INSCR"     	, Upper(AllTrim((cQry)->CLI_INSCR)), Nil})
        aAdd(aVetor, {"A1_YMAILNF"   	, AllTrim(LOWER((cQry)->CLI_YMAILNF)), Nil})
        aAdd(aVetor, {"A1_EMAIL" 		, AllTrim(LOWER((cQry)->CLI_EMAIL)), Nil})
        aAdd(aVetor, {"A1_YEMABOL" 		, AllTrim(IIf((cQry)->CLI_YEMABOL == Nil, "", (cQry)->CLI_YEMABOL)), Nil})
        aAdd(aVetor, {"A1_HPAGE"     	, AllTrim(IIf((cQry)->CLI_HPAGE == Nil,"", LOWER((cQry)->CLI_HPAGE))), Nil})
        aAdd(aVetor, {"A1_NATUREZ"		, '1121', Nil})
        aAdd(aVetor, {"A1_ENDCOB"    	, Upper(AllTrim((cQry)->CLI_ENDCOB) + ', ' + AllTrim((cQry)->CLI_COBNUM)), Nil})
        aAdd(aVetor, {"A1_ESTC"			, (cQry)->CLI_ESTC, Nil})
        aAdd(aVetor, {"A1_MUNC"			, AllTrim(Upper((cQry)->CLI_MUNC)), Nil})
        aAdd(aVetor, {"A1_BAIRROC"   	, AllTrim(Upper((cQry)->CLI_BAIRROC)), Nil})
        aAdd(aVetor, {"A1_CEPC"      	, AllTrim((cQry)->CLI_CEPC), Nil})
        aAdd(aVetor, {"A1_YCADEXP"		, IIf((cQry)->CLI_YCADEXP == "1" .Or. (cQry)->CLI_YCADEXP == "S" .Or. UPPER((cQry)->CLI_YCADEXP) == "TRUE", "1","2"), Nil})
        aAdd(aVetor, {"A1_CONTRIB"		, IIf((cQry)->CLI_CONTRIB == "1" .Or. (cQry)->CLI_CONTRIB == "S" .Or. UPPER((cQry)->CLI_CONTRIB) == "TRUE", "1","2"), Nil})
        aAdd(aVetor, {"A1_FOMEZER"		, IIf((cQry)->CLI_FOMEZER == "1" .Or. (cQry)->CLI_FOMEZER == "S" .Or. UPPER((cQry)->CLI_FOMEZER) == "TRUE", "1","2"), Nil})
        aAdd(aVetor, {"A1_CODPAIS"		, (cQry)->CLI_CODPAIS, Nil})
        aAdd(aVetor, {"A1_YTIPOLC"		, (cQry)->CLI_YTIPOLC, Nil})
        aAdd(aVetor, {"A1_SATIV1"		, (cQry)->CLI_SATIV1, Nil})
        aAdd(aVetor, {"A1_YTPSEG"		, (cQry)->CLI_YTPSEG, Nil})
        aAdd(aVetor, {"A1_YAVALCL"		, AllTrim(IIf((cQry)->CLI_YAVALCL_M == Nil, "",(cQry)->CLI_YAVALCL_M)), Nil})
        aAdd(aVetor, {"A1_YOBSROM"		, AllTrim(IIf((cQry)->CLI_YOBSROM == Nil, "",(cQry)->CLI_YOBSROM)), Nil})
        aAdd(aVetor, {"A1_LC"			, IIf((cQry)->CLI_LC == Nil, "0", (cQry)->CLI_LC), Nil})
        aAdd(aVetor, {"A1_RISCO"		, (cQry)->CLI_RISCO, Nil})
        aAdd(aVetor, {"A1_YTRTESP"		, IIf((cQry)->CLI_YTRTESP == "1" .Or. (cQry)->CLI_YTRTESP == "S" .Or. UPPER((cQry)->CLI_YTRTESP) == "TRUE","1","2"), Nil})
        aAdd(aVetor, {"A1_SUFRAMA"		, IIf((cQry)->CLI_SUFRAMA == Nil .OR. AllTrim((cQry)->CLI_SUFRAMA) == '-',"", (cQry)->CLI_SUFRAMA), Nil})
        aAdd(aVetor, {"A1_YATUCLI"		, "S", NIL})
        aAdd(aVetor, {"A1_YCAT"			, AllTrim(IIf((cQry)->CLI_YCAT == Nil, "", (cQry)->CLI_YCAT)), Nil})

        If !Empty((cQry)->CLI_TPJ)
            aAdd(aVetor,{"A1_TPJ",AllTrim((cQry)->CLI_TPJ), Nil})
        EndIf

        //Ticket 26346 - Solicitação do Wellison do Financeiro para garantir padrão 'S' nos campos A1_YGERFAT e A1_YFGNRE
        aAdd(aVetor,{"A1_YGERFAT",'S', Nil})
        aAdd(aVetor,{"A1_YTFGNRE",'S', Nil})

        If !Empty((cQry)->CLI_CODMUN_ZFRANCA) .And. (cQry)->CLI_CODMUN_ZFRANCA != '00000'
            aAdd(aVetor,{"A1_CODMUN"		, IIf((cQry)->CLI_CODMUN_ZFRANCA == Nil,""	,(cQry)->CLI_CODMUN_ZFRANCA)	, Nil})
        EndIf

        //Projeto C-17
        aAdd(aVetor,{"A1_YREGESP"		, IIf( Alltrim((cQry)->CLI_REGESP) == "S" .Or. Alltrim((cQry)->CLI_ACORCOMST) == "S", "EXCECAO",""), Nil})
        If !Empty(Alltrim((cQry)->CLI_VENCREGESP))
            aAdd(aVetor,{"A1_YDTVENC"		, StoD((cQry)->CLI_VENCREGESP) , Nil})
        EndIf 
        If !Empty(Alltrim((cQry)->CLI_VENSUF))
            aAdd(aVetor,{"A1_YVENSUF"		, StoD((cQry)->CLI_VENSUF) , Nil})
        EndIf 
        aAdd(aVetor, {"A1_CALCSUF"		, IIf((cQry)->CLI_CALCSUF == Nil,"N",(cQry)->CLI_CALCSUF), Nil})
        aAdd(aVetor, {"A1_YTRIDIF"		, IIf((cQry)->CLI_TRIDIF == Nil,"N",(cQry)->CLI_TRIDIF), Nil})
        If !Empty(Alltrim((cQry)->CLI_VCTDIF))
            aAdd(aVetor,{"A1_YVCTDIF"		, StoD((cQry)->CLI_VCTDIF) , Nil})
        EndIf 
        //Projeto C-17

        If !Empty((cQry)->CLI_VEND) .And. (cQry)->CLI_VEND != '000000'
            AADD(aVetor,{"A1_VEND"			, (cQry)->CLI_VEND 	, Nil})
        EndIf

        If !Empty((cQry)->CLI_YVENDI) .And. (cQry)->CLI_YVENDI != '000000'
            AADD(aVetor,{"A1_YVENDI"		, (cQry)->CLI_YVENDI 	, Nil})
        EndIf

        If !Empty((cQry)->CLI_YVENBE1) .And. (cQry)->CLI_YVENBE1 != '000000'
            AADD(aVetor,{"A1_YVENBE1"		, (cQry)->CLI_YVENBE1	, Nil})
        EndIf

        If !Empty((cQry)->CLI_YVENVT1) .And. (cQry)->CLI_YVENVT1 != '000000'
            AADD(aVetor,{"A1_YVENVT1"		, (cQry)->CLI_YVENVT1	, Nil})
        EndIf

        If !Empty((cQry)->CLI_YVENML1) .And. (cQry)->CLI_YVENML1 != '000000'
            AADD(aVetor,{"A1_YVENML1"		, (cQry)->CLI_YVENML1	, Nil})
        EndIf

        If !Empty((cQry)->CLI_YBIZAGI)

            AADD(aVetor,{"A1_YBIZAGI",(cQry)->CLI_YBIZAGI, Nil})

        EndIf
    
        aVetor := aClone(::Ordem(aVetor))

    EndIf


    If Alltrim((cQry)->CLI_TPOPER) == "A" 

        DBSelectArea("SA1")
        SA1->(DBSetOrder(1)) // A1_FILIAL, A1_COD, A1_LOJA, R_E_C_N_O_, D_E_L_E_T_

        If SA1->(DBseek(xFilial("SA1") + (cQry)->CLI_COD + cLojaCliente))   

            aAdd(aVetor, {"A1_FILIAL" 		, SA1->A1_FILIAL	, Nil })
            aAdd(aVetor, {"A1_COD"          , SA1->A1_COD       , Nil })
            aAdd(aVetor, {"A1_LOJA"    		, SA1->A1_LOJA      , Nil })
            aAdd(aVetor, {"A1_NOME"			, AllTrim(StrTran(AllTrim(Upper((cQry)->CLI_NOME)),CHR(10),' ')), Nil})
            aAdd(aVetor, {"A1_PESSOA"    	, (cQry)->CLI_PESSOA, Nil})
            aAdd(aVetor, {"A1_CGC"       	, SA1->A1_CGC       , Nil })
            aAdd(aVetor, {"A1_TIPO"      	, (cQry)->CLI_TIPO  , Nil})
            aAdd(aVetor, {"A1_NREDUZ"    	, AllTrim(Upper((cQry)->CLI_NREDUZ)), Nil})
            aAdd(aVetor, {"A1_END"       	, Upper(AllTrim(StrTran((cQry)->CLI_END,CHR(10), ' ')) +', ' + AllTrim(StrTran((cQry)->CLI_ENDNUM,CHR(10), ' '))), Nil})
            aAdd(aVetor, {"A1_COMPLEM"      , Upper(alltrim(IIf((cQry)->CLI_COMPLEM == Nil, "", (cQry)->CLI_COMPLEM ))), Nil})
            aAdd(aVetor, {"A1_EST"       	, (cQry)->CLI_EST, Nil})
            aAdd(aVetor, {"A1_COD_MUN"      , Upper((cQry)->CLI_COD_MUN), Nil})
            aAdd(aVetor, {"A1_MUN"       	, AllTrim(Upper((cQry)->CLI_MUN)), Nil})
            aAdd(aVetor, {"A1_BAIRRO"    	, AllTrim(Upper((cQry)->CLI_BAIRRO)), Nil})
            aAdd(aVetor, {"A1_CEP"       	, AllTrim((cQry)->CLI_CEP), Nil})
            aAdd(aVetor, {"A1_TEL"			, AllTrim((cQry)->CLI_TEL), Nil})
            aAdd(aVetor, {"A1_FAX"       	, AllTrim(IIf((cQry)->CLI_FAX == Nil, "", (cQry)->CLI_FAX)), Nil})
            aAdd(aVetor, {"A1_CONTATO"   	, AllTrim(Upper((cQry)->CLI_CONTATO)), Nil})
            aAdd(aVetor, {"A1_INSCR"     	, SA1->A1_INSCR     , Nil })          
            aAdd(aVetor, {"A1_YMAILNF"   	, AllTrim(LOWER((cQry)->CLI_YMAILNF)), Nil})
            aAdd(aVetor, {"A1_EMAIL" 		, AllTrim(LOWER((cQry)->CLI_EMAIL)), Nil})
            aAdd(aVetor, {"A1_YEMABOL" 		, AllTrim(IIf((cQry)->CLI_YEMABOL == Nil, "", (cQry)->CLI_YEMABOL)), Nil})
            aAdd(aVetor, {"A1_HPAGE"     	, AllTrim(IIf((cQry)->CLI_HPAGE == Nil,"", LOWER((cQry)->CLI_HPAGE))), Nil})
            aAdd(aVetor, {"A1_NATUREZ"		, '1121', Nil})
            aAdd(aVetor, {"A1_ENDCOB"    	, Upper(AllTrim((cQry)->CLI_ENDCOB) + ', ' + AllTrim((cQry)->CLI_COBNUM)), Nil})
            aAdd(aVetor, {"A1_ESTC"			, (cQry)->CLI_ESTC, Nil})
            aAdd(aVetor, {"A1_MUNC"			, AllTrim(Upper((cQry)->CLI_MUNC)), Nil})
            aAdd(aVetor, {"A1_BAIRROC"   	, AllTrim(Upper((cQry)->CLI_BAIRROC)), Nil})
            aAdd(aVetor, {"A1_CEPC"      	, AllTrim((cQry)->CLI_CEPC), Nil})
            aAdd(aVetor, {"A1_YCADEXP"		, IIf((cQry)->CLI_YCADEXP == "1" .Or. (cQry)->CLI_YCADEXP == "S" .Or. UPPER((cQry)->CLI_YCADEXP) == "TRUE", "1","2"), Nil})
            aAdd(aVetor, {"A1_CONTRIB"		, IIf((cQry)->CLI_CONTRIB == "1" .Or. (cQry)->CLI_CONTRIB == "S" .Or. UPPER((cQry)->CLI_CONTRIB) == "TRUE", "1","2"), Nil})
            aAdd(aVetor, {"A1_FOMEZER"		, IIf((cQry)->CLI_FOMEZER == "1" .Or. (cQry)->CLI_FOMEZER == "S" .Or. UPPER((cQry)->CLI_FOMEZER) == "TRUE", "1","2"), Nil})
            aAdd(aVetor, {"A1_CODPAIS"		, (cQry)->CLI_CODPAIS, Nil})
            aAdd(aVetor, {"A1_SATIV1"		, (cQry)->CLI_SATIV1, Nil})
            aAdd(aVetor, {"A1_YTPSEG"		, (cQry)->CLI_YTPSEG, Nil})
            aAdd(aVetor, {"A1_YAVALCL"		, AllTrim(IIf((cQry)->CLI_YAVALCL_M == Nil, "",(cQry)->CLI_YAVALCL_M)), Nil})
            aAdd(aVetor, {"A1_YOBSROM"		, AllTrim(IIf((cQry)->CLI_YOBSROM == Nil, "",(cQry)->CLI_YOBSROM)), Nil})
            aAdd(aVetor, {"A1_YTRTESP"		, IIf((cQry)->CLI_YTRTESP == "1" .Or. (cQry)->CLI_YTRTESP == "S" .Or. UPPER((cQry)->CLI_YTRTESP) == "TRUE","1","2"), Nil})
            aAdd(aVetor, {"A1_SUFRAMA"		, IIf((cQry)->CLI_SUFRAMA == Nil .OR. AllTrim((cQry)->CLI_SUFRAMA) == '-',"", (cQry)->CLI_SUFRAMA), Nil})
            aAdd(aVetor, {"A1_YATUCLI"		, "S", NIL})
            aAdd(aVetor, {"A1_YCAT"			, AllTrim(IIf((cQry)->CLI_YCAT == Nil, "", (cQry)->CLI_YCAT)), Nil})
            If !Empty((cQry)->CLI_TPJ)
                aAdd(aVetor,{"A1_TPJ",AllTrim((cQry)->CLI_TPJ), Nil})
            EndIf
            If !Empty((cQry)->CLI_CODMUN_ZFRANCA) .And. (cQry)->CLI_CODMUN_ZFRANCA != '00000'
                aAdd(aVetor,{"A1_CODMUN"		, IIf((cQry)->CLI_CODMUN_ZFRANCA == Nil,""	,(cQry)->CLI_CODMUN_ZFRANCA)	, Nil})
            EndIf

            //Projeto C-17
            aAdd(aVetor,{"A1_YREGESP"		, IIf( Alltrim((cQry)->CLI_REGESP) == "S" .Or. Alltrim((cQry)->CLI_ACORCOMST) == "S", "EXCECAO",""), Nil})
            If !Empty(Alltrim((cQry)->CLI_VENCREGESP))
                aAdd(aVetor,{"A1_YDTVENC"		, StoD((cQry)->CLI_VENCREGESP) , Nil})
            EndIf 
            If !Empty(Alltrim((cQry)->CLI_VENSUF))
                aAdd(aVetor,{"A1_YVENSUF"		, StoD((cQry)->CLI_VENSUF) , Nil})
            EndIf 
            aAdd(aVetor, {"A1_CALCSUF"		, IIf((cQry)->CLI_CALCSUF == Nil,"N",(cQry)->CLI_CALCSUF), Nil})
            aAdd(aVetor, {"A1_YTRIDIF"		, IIf((cQry)->CLI_TRIDIF == Nil,"N",(cQry)->CLI_TRIDIF), Nil})
            If !Empty(Alltrim((cQry)->CLI_VCTDIF))
                aAdd(aVetor,{"A1_YVCTDIF"		, StoD((cQry)->CLI_VCTDIF) , Nil})
            EndIf 
            //Projeto C-17

            If !Empty((cQry)->CLI_VEND) .And. (cQry)->CLI_VEND != '000000'
                AADD(aVetor,{"A1_VEND"			, (cQry)->CLI_VEND 	, Nil})
            EndIf
            If !Empty((cQry)->CLI_YVENDI) .And. (cQry)->CLI_YVENDI != '000000'
                AADD(aVetor,{"A1_YVENDI"		, (cQry)->CLI_YVENDI 	, Nil})
            EndIf
            If !Empty((cQry)->CLI_YVENBE1) .And. (cQry)->CLI_YVENBE1 != '000000'
                AADD(aVetor,{"A1_YVENBE1"		, (cQry)->CLI_YVENBE1	, Nil})
            EndIf
            If !Empty((cQry)->CLI_YVENVT1) .And. (cQry)->CLI_YVENVT1 != '000000'
                AADD(aVetor,{"A1_YVENVT1"		, (cQry)->CLI_YVENVT1	, Nil})
            EndIf
            If !Empty((cQry)->CLI_YVENML1) .And. (cQry)->CLI_YVENML1 != '000000'
                AADD(aVetor,{"A1_YVENML1"		, (cQry)->CLI_YVENML1	, Nil})
            EndIf
            If !Empty((cQry)->CLI_YBIZAGI)
                AADD(aVetor,{"A1_YBIZAGI",(cQry)->CLI_YBIZAGI, Nil})
            EndIf
        
            aVetor := aClone(::Ordem(aVetor))

        EndIf

    EndIf


    If Alltrim((cQry)->CLI_TPOPER) == "C" 

        aVetor := {}
        
        DBSelectArea("SA1")
        SA1->(DBSetOrder(1)) // A1_FILIAL, A1_COD, A1_LOJA, R_E_C_N_O_, D_E_L_E_T_

        If SA1->(DBseek(xFilial("SA1") + (cQry)->CLI_COD + cLojaCliente))

            aAdd(aVetor, {"A1_FILIAL" 		, SA1->A1_FILIAL	, Nil })
            AADD(aVetor, {"A1_COD"          , SA1->A1_COD       , Nil })
            aAdd(aVetor, {"A1_LOJA"    		, SA1->A1_LOJA      , Nil })
            aAdd(aVetor, {"A1_NOME"			, SA1->A1_NOME      , Nil })
            aAdd(aVetor, {"A1_PESSOA"    	, SA1->A1_PESSOA    , Nil })
            aAdd(aVetor, {"A1_CGC"       	, SA1->A1_CGC       , Nil })
            aAdd(aVetor, {"A1_TIPO"      	, SA1->A1_TIPO      , Nil })
            aAdd(aVetor, {"A1_NREDUZ"    	, SA1->A1_NREDUZ    , Nil })
            aAdd(aVetor, {"A1_END"       	, SA1->A1_END       , Nil })
            aAdd(aVetor, {"A1_COMPLEM"      , SA1->A1_COMPLEM   , Nil })
            aAdd(aVetor, {"A1_EST"       	, SA1->A1_EST       , Nil })
            aAdd(aVetor, {"A1_COD_MUN"      , SA1->A1_COD_MUN   , Nil })
            aAdd(aVetor, {"A1_MUN"       	, SA1->A1_MUN       , Nil })
            aAdd(aVetor, {"A1_BAIRRO"    	, SA1->A1_BAIRRO    , Nil })
            aAdd(aVetor, {"A1_CEP"       	, SA1->A1_CEP       , Nil })
            aAdd(aVetor, {"A1_TEL"			, SA1->A1_TEL       , Nil })
            aAdd(aVetor, {"A1_FAX"       	, SA1->A1_FAX       , Nil })
            aAdd(aVetor, {"A1_CONTATO"   	, SA1->A1_CONTATO   , Nil })
            aAdd(aVetor, {"A1_INSCR"     	, SA1->A1_INSCR     , Nil })
            aAdd(aVetor, {"A1_YMAILNF"   	, SA1->A1_YMAILNF   , Nil })
            aAdd(aVetor, {"A1_EMAIL" 		, SA1->A1_EMAIL     , Nil })
            aAdd(aVetor, {"A1_YEMABOL" 		, SA1->A1_YEMABOL   , Nil })
            aAdd(aVetor, {"A1_HPAGE"     	, SA1->A1_HPAGE     , Nil })
            aAdd(aVetor, {"A1_NATUREZ"		, SA1->A1_NATUREZ   , Nil })
            aAdd(aVetor, {"A1_ENDCOB"    	, SA1->A1_ENDCOB    , Nil })
            aAdd(aVetor, {"A1_ESTC"			, SA1->A1_ESTC      , Nil })
            aAdd(aVetor, {"A1_MUNC"			, SA1->A1_MUNC	    , Nil })
            aAdd(aVetor, {"A1_BAIRROC"   	, SA1->A1_BAIRROC   , Nil })
            aAdd(aVetor, {"A1_CEPC"      	, SA1->A1_CEPC      , Nil })
            aAdd(aVetor, {"A1_YCADEXP"		, SA1->A1_YCADEXP   , Nil })
            aAdd(aVetor, {"A1_CONTRIB"		, SA1->A1_CONTRIB   , Nil })
            aAdd(aVetor, {"A1_FOMEZER"		, SA1->A1_FOMEZER   , Nil })
            aAdd(aVetor, {"A1_CODPAIS"		, SA1->A1_CODPAIS   , Nil })
            aAdd(aVetor, {"A1_SATIV1"		, SA1->A1_SATIV1    , Nil })
            aAdd(aVetor, {"A1_YTPSEG"		, SA1->A1_YTPSEG    , Nil })
            aAdd(aVetor, {"A1_YOBSROM"		, SA1->A1_YOBSROM   , Nil })
            aAdd(aVetor, {"A1_YTRTESP"		, SA1->A1_YTRTESP   , Nil })
            aAdd(aVetor, {"A1_SUFRAMA"		, SA1->A1_SUFRAMA   , Nil })
            aAdd(aVetor, {"A1_CALCSUF"		, SA1->A1_CALCSUF   , Nil })
            aAdd(aVetor, {"A1_YATUCLI"		, SA1->A1_YATUCLI   , Nil })
            aAdd(aVetor, {"A1_YCAT"			, SA1->A1_YCAT      , Nil })
            AADD(aVetor, {"A1_TPJ"           ,SA1->A1_TPJ       , Nil })
            AADD(aVetor, {"A1_YGERFAT"       ,SA1->A1_YGERFAT   , Nil })
            AADD(aVetor, {"A1_YTFGNRE"       ,SA1->A1_YTFGNRE   , Nil })
            AADD(aVetor, {"A1_CODMUN"		, SA1->A1_CODMUN    , Nil })
            AADD(aVetor, {"A1_VEND"			, SA1->A1_VEND      , Nil })
            AADD(aVetor, {"A1_YVENDI"		, SA1->A1_YVENDI    , Nil })
            AADD(aVetor, {"A1_YVENBE1"		, SA1->A1_YVENBE1   , Nil })
            AADD(aVetor, {"A1_YVENVT1"		, SA1->A1_YVENVT1   , Nil })
            AADD(aVetor, {"A1_YVENML1"		, SA1->A1_YVENML1   , Nil })

            AADD(aVetor, {"A1_YAVALCL"	, AllTrim(IIf((cQry)->CLI_YAVALCL_M == Nil, "",(cQry)->CLI_YAVALCL_M)), Nil})
            AADD(aVetor, {"A1_LC"       , (cQry)->CLI_LC            , Nil})
            AADD(aVetor, {"A1_YTIPOLC"	, (cQry)->CLI_YTIPOLC       , Nil})
            AADD(aVetor, {"A1_RISCO"	, (cQry)->CLI_RISCO         , Nil})
            AADD(aVetor, {"A1_GRPVEN"   , (cQry)->CLI_GRPVEN        , Nil})
            AADD(aVetor, {"A1_VENCLC"   , StoD((cQry)->CLI_VENCLC)  , Nil})

            aVetor := aClone(::Ordem(aVetor))

        EndIf

    EndIf

    SetFunName("MATA030")

    lMsErroAuto := .F.

    MSExecAuto({|x,y| MATA030(x,y)}, aVetor, nOperacao)

    If lMsErroAuto

        RollBackSx8()
        
        DisarmTransaction()

        ::Status("E", (cQry)->ID, Varinfo( "", GETAUTOGRLOG() ), U_GetMCodA1())

    Else

        DBSelectArea("SA1")
        SA1->(DBSetOrder(3)) // A1_FILIAL, A1_CGC, R_E_C_N_O_, D_E_L_E_T_
        SA1->(DBGoTop())

        If SA1->(DBSeek(xFilial("SA1") + (cQry)->CLI_CGC))

            ConfirmSX8()

            ::Status("P", (cQry)->ID, "", U_GetMCodA1())

        Else

            RollBackSx8()
        
            DisarmTransaction()

            ::Status("E", (cQry)->ID, "ExecAuto não retornou erro e o cliente não foi incluido " + Varinfo( "", GETAUTOGRLOG() ), U_GetMCodA1())

        EndIf

    EndIf

    RestArea(aArea)

Return()

Method ValidadeCli(cQry) Class TBizagiIntegracaoCliente

    Local lRet := .T.
    Local cLojaCliente := ""
    
    If !Empty((cQry)->CLI_COD)
        
        DBSelectArea("SA1")
        SA1->(DBSetOrder(1)) // A1_FILIAL, A1_COD, A1_LOJA, R_E_C_N_O_, D_E_L_E_T_

        If Len((cQry)->CLI_LOJA) < 2

            cLojaCliente = "0" + (cQry)->CLI_LOJA

        ElseIf (Len((cQry)->CLI_LOJA) == 2)

            cLojaCliente = (cQry)->CLI_LOJA
            
        EndIf

        If SA1->(DBseek(xFilial("SA1") + (cQry)->CLI_COD + cLojaCliente))

            lRet := .T.

        Else

            lRet := .F.

            ::Status("E", (cQry)->ID, "Cliente não existe no protheus")

        EndIf

    EndIf

Return(lRet)

Method Status(cStatus, nId, cLog, cCodCli) Class TBizagiIntegracaoCliente

    Local lRet := .T.
    Local cSql := ""

    Default cStatus := "" // E=Erro; P=Processado; A=Aguard. Processamento
    Default cLog := ""
    Default nId := 0
    Default cCodCli := ""

    If cStatus == "E"

        aAdd(::aErro, {cCodCli, cLog})

    EndIf

    cSql := " UPDATE dbo.BZINTEGRACAO_CLIENTE SET "

    cSql += " STATUS   = " + ValToSql(cStatus)
    cSql += " , LOG    = " + ValToSql(cLog)

    If cStatus == "P"

        cSql += " , CLI_COD = " + ValToSql(cCodCli)

    EndIf

    cSql += " , DTINTEGRA = " + ValToSql(DTOS(dDataBase))
    cSql += " , HRINTEGRA = CONVERT(VARCHAR(8), GETDATE(), 114) "

    cSql += " WHERE ID = " + cValToChar(nId)

    lRet := TcSQLExec(cSql) == 0

    If !lRet

        ConOut("TBizagiIntegracaoCliente: TCSQLError() -> " + TCSQLError())

    EndIf

Return(lRet)

Method GetErrorLog() Class TBizagiIntegracaoCliente

    Local cRet := ""
    Local nX := 1
    Local aError := GETAUTOGRLOG()

    For nX := 1 To Len(aError)

        cRet += aError[nX] + CRLF

    Next nX

Return(cRet)

Method Ordem(aLinha) Class TBizagiIntegracaoCliente

    Local nW := 0
    Local nX := 0
    Local lRet := .T.
    Local aLinhaNew := {}
    Local aObrigat := {}
    Local aAreaSX3 := SX3->(GetArea())

    DBSelectArea("SX3")
    SX3->(DBSetOrder(1))
    SX3->(DBGoTop())

    If SX3->(DBSeek("SA1"))

        While !SX3->(EOF()) .And. SX3->X3_ARQUIVO == "SA1"

            If Subs(Bin2Str(SX3->X3_OBRIGAT),1,1) == "x"

                aAdd(aObrigat, SX3->X3_CAMPO)

            EndIf

            For nW := 1 To Len(aLinha)

                If AllTrim(SX3->X3_CAMPO) == AllTrim(aLinha[nW][1])

                    aAdd(aLinhaNew, aLinha[nW])

                    If Subs(Bin2Str(SX3->X3_OBRIGAT),1,1) == "x" .And. Empty(aLinha[nW][2])

                        ConOut("TBizagiIntegracaoCliente: Campo " + SX3->X3_CAMPO + " é obrigatório e seu conteúdo está vazio!")

                    EndIf

                EndIf

            Next nW

            SX3->(DBSkip())

        EndDo

    EndIf

    For nW := 1 To Len(aObrigat)

        lRet := .F.

        For nX := 1 To Len(aLinha)

            If AllTrim(aObrigat[nW]) == AllTrim(aLinha[nX][1])

                lRet := .T.

            EndIf

        Next nX

        If !lRet

            ConOut("TBizagiIntegracaoCliente: Campo " +aObrigat[nW] + " é obrigatório e não esta no ExecAuto!")

        EndIf

    Next nW

    RestArea(aAreaSX3)

Return(aLinhaNew)

Method LogMail() Class TBizagiIntegracaoCliente

    Local nW    := 0
    Local lFound := .F.
    Local cNum := ""
    Local cHtml := ""
    Local oMail := TAFMail():New()

    For nW := 1 To Len(::aErro)

        If AllTrim(::aErro[nW][2]) <> AllTrim("<br><pre> -> ARRAY (    0) [...]<br></pre><br>")

            If cNum <> ::aErro[nW][1]

                If !Empty(cNum)

                    cHtml += '</tbody>'
                    cHtml += '</table>'

                EndIf

                cNum := ::aErro[nW][1]

                cHtml += '<style type="text/css">'
                cHtml += '.tg  {border-collapse:collapse;border-color:#aaa;border-spacing:0;}'
                cHtml += '.tg td{background-color:#fff;border-color:#aaa;border-style:solid;border-width:1px;color:#333;'
                cHtml += '  font-family:Arial, sans-serIf;font-size:14px;overflow:hidden;padding:10px 5px;word-break:normal;}'
                cHtml += '.tg th{background-color:#f38630;border-color:#aaa;border-style:solid;border-width:1px;color:#fff;'
                cHtml += '  font-family:Arial, sans-serIf;font-size:14px;font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}'
                cHtml += '.tg .tg-zw5y{border-color:inherit;text-align:center;text-decoration:underline;vertical-align:top}'
                cHtml += '.tg .tg-0lax{text-align:left;vertical-align:top}'
                cHtml += '</style>'

                cHtml += '<table width="100%" class="tg">'
                cHtml += '<thead>'
                cHtml += '  <tr>'
                cHtml += '    <th class="tg-zw5y">' + cEmpAnt + cFilAnt + ' - Novo Cliente: ' + ::aErro[nW][1] + '</th>'
                cHtml += '  </tr>'
                cHtml += '</thead>'
                cHtml += '<tbody>'

            EndIf

            lFound := .T.

            cHtml += '  <tr>'
            cHtml += '    <td class="tg-0lax">' + ::aErro[nW][2] + '</td>'
            cHtml += '  </tr>'

            If nW == Len(::aErro)

                cHtml += '</tbody>'
                cHtml += '</table>'

            EndIf

        EndIf

    Next nW

    If lFound

        oMail:cTo := ::cEmail
        oMail:cSubject := "TBizagiIntegracaoCliente - Inconsistencias"
        oMail:cBody := cHtml

        oMail:Send()

    EndIf

Return()
