#INCLUDE "PROTHEUS.CH"
#INCLUDE "TOPCONN.CH"

/*/{Protheus.doc} TBizagiIntegracaoProduto
@author Wlysses Cerqueira (Facile)
@since 05/02/2020  
@project 24427
@version 1.0
@type function
/*/

User Function BIJBPPRD

	StartJob( "U_BIPROCPR", GetEnvServer(),.T.)

Return


User Function BIPROCPR()
Local oObj := Nil

	//RpcSetEnv("01", "01")
		
		oObj := TBizagiIntegracaoProduto():New()

    oObj:Processa()

  //RpcClearEnv()

Return()


Class TBizagiIntegracaoProduto From LongClassName

    Data aErro
    Data cEmail

    Public Method New() Constructor
    Public Method Processa()

    // Feito via reclock
    Public Method InputProduto()

    // Feito via ExecAuto
    Public Method ExecProduto(cQry)

    Public Method ValidateProd()
    Public Method Status(cStatus, nId, cLog, cNewCod)
    Public Method GetErrorLog()
    Public Method LogMail()

EndClass


Method New(lJob) Class TBizagiIntegracaoProduto

    ::aErro:= {}
    ::cEmail := U_GetBiaPar("MV_EMAILINTBIZPRO", "sistemas.ti@biancogres.com.br")
    
Return(Self)


Method Processa() Class TBizagiIntegracaoProduto

    Local cQry := GetNextAlias()
    Local cSQL := ""

    cSQL := " SELECT * "
    cSQL += " FROM dbo.BZINTEGRACAO_PRODUTO "
    cSQL += " WHERE STATUS = 'A' "
    cSQL += " ORDER BY ID "

    TcQuery cSQL New Alias (cQry)

    While !(cQry)->(EOF())

        If ::ValidateProd(cQry)

            Begin Transaction

                ::ExecProduto(cQry)

            End Transaction

        EndIf

        (cQry)->(DbSkip())

    EndDo

    (cQry)->(DbCloseArea())

    ::LogMail()

Return()


Method ExecProduto(cQry) Class TBizagiIntegracaoProduto
Local cNewCod := ""
Local aVetor := {}
Local cAplicDir := ""
Local cComum	:= "" 
Local _cErro	:=	""
Local _cGarant	:=	""
Local _cAnuent	:=	""
Local oEmb := Nil
Private lMsErroAuto := .F.
Private lMsHelpAuto := .T.
Private lAutoErrNoFile := .T.

    If Empty((cQry)->PROD_COD)

	    cNewCod := U_ProxCod(Left((cQry)->PROD_GRUPO, 3), Left((cQry)->PROD_GRUPO, 3), .T., "WS")
	    
	    aAdd(aVetor, { "B1_COD"     , cNewCod               , Nil})
	    aAdd(aVetor, { "B1_GRUPO"   , (cQry)->PROD_GRUPO    , Nil})
	    aAdd(aVetor, { "B1_TIPO"    , (cQry)->PROD_TIPO     , Nil})
	    aAdd(aVetor, { "B1_YTIPO"   , Alltrim((cQry)->PROD_YTIPO)	, Nil})
	    aAdd(aVetor, { "B1_TIPCONV" , "M"                   , Nil})
	    aAdd(aVetor, { "B1_ORIGEM"  , "0"                   , Nil})
	    aAdd(aVetor, { "B1_CLASFIS" , "00"                  , Nil})
	    aAdd(aVetor, { "B1_DESC"    , AllTrim(StrTran(Upper(Alltrim((cQry)->PROD_DESC)),CHR(10), ' ')), Nil})
	    aAdd(aVetor, { "B1_YPOLIT"  , (cQry)->PROD_YPOLIT   , Nil})
	    aAdd(aVetor, { "B1_UM"      , (cQry)->PROD_UM       , Nil})
	    aAdd(aVetor, { "B1_LOCPAD"  , (cQry)->PROD_LOCPAD   , Nil})
	    aAdd(aVetor, { "B1_YLOCALI" , (cQry)->PROD_YLOCALI  , Nil})
	    aAdd(aVetor, { "B1_YLOCINC" , (cQry)->PROD_YLOCINC  , Nil})
	
	    If((cQry)->PROD_SEGUM != "*" .And. (cQry)->PROD_SEGUM != Nil)
	        aAdd(aVetor, { "B1_SEGUM"   , (cQry)->PROD_SEGUM    , Nil})
	    Else
	        aAdd(aVetor, { "B1_SEGUM"   , (cQry)->PROD_UM       , Nil})
	    EndIf
	
	    IF (cQry)->PROD_UM == (cQry)->PROD_SEGUM
	        aAdd(aVetor, { "B1_CONV"    , 1.00, Nil})
	    ELSE
	        aAdd(aVetor, { "B1_CONV"    , (cQry)->PROD_CONV, Nil})
	    ENDIF
	 
	    aAdd(aVetor, { "B1_YUSER"       , Substr(Alltrim((cQry)->PROD_YUSER),1,TamSX3("B1_YUSER")[1]), Nil})
	    aAdd(aVetor, { "B1_YDIVPA"      , If((cQry)->PROD_YDIVPA == 0, 1, (cQry)->PROD_YDIVPA)  , Nil})
	    aAdd(aVetor, { "B1_YPECA"       , If((cQry)->PROD_YPECA == 0, 1, (cQry)->PROD_YPECA)    , Nil})
	
	    If (cQry)->PROD_POSIPI != "*"
	
	        aAdd(aVetor, { "B1_POSIPI"   , (cQry)->PROD_POSIPI  , Nil})
	
	    EndIf
	
	    aAdd(aVetor, { "B1_CONTA"       , (cQry)->PROD_CONTA    , Nil})
	    aAdd(aVetor, { "B1_YCTARES"     , (cQry)->PROD_YCTARES  , Nil})
	    aAdd(aVetor, { "B1_YCTRIND"     , (cQry)->PROD_YCTRIND  , Nil})
	    aAdd(aVetor, { "B1_YCTRADM"     , (cQry)->PROD_YCTRADM  , Nil})
	
	    aAdd(aVetor, { "B1_LOCALIZ"     , 'N'                   , Nil})
	    aAdd(aVetor, { "B1_RASTRO"      , 'N'                   , Nil})
	    aAdd(aVetor, { "B1_GARANT"      , '2'                   , Nil})
	    aAdd(aVetor, { "B1_ATIVO"       , 'S'                   , Nil})
	    aAdd(aVetor, { "B1_IMPORT"      , IIF(!Empty((cQry)->PROD_IMPORT), IIF((cQry)->PROD_IMPORT == '1' .Or. (cQry)->PROD_IMPORT == 'S' .Or. UPPER((cQry)->PROD_IMPORT) == 'TRUE', 'S', 'N' ), 'N' ), Nil})
	    aAdd(aVetor, { "B1_ANUENTE"     , IIF(!Empty((cQry)->PROD_ANUENTE) , IIF((cQry)->PROD_ANUENTE == '1' .Or. (cQry)->PROD_ANUENTE == 'S' .Or. UPPER((cQry)->PROD_ANUENTE) == 'TRUE', '1', '2' ), '2'  ), Nil}) //1 - SIM //2 - NÃO

	    aAdd(aVetor, { "B1_YCODCOM" , (cQry)->PROD_YCODCOM  , Nil})
	    aAdd(aVetor, { "B1_YBLSCPC" , (cQry)->PROD_YBLSCPC  , Nil})

	
	    cAplicDir	:= IIF(!Empty((cQry)->PROD_APLICDIRETA) , IIF((cQry)->PROD_APLICDIRETA	== '1' .Or. (cQry)->PROD_APLICDIRETA == 'S' .Or. UPPER((cQry)->PROD_APLICDIRETA) == 'TRUE', 'S', 'N' ), 'S'  )
	    cComum 		:= IIF(!Empty((cQry)->PROD_EHCOMUN) 	, IIF((cQry)->PROD_EHCOMUN		== '1' .Or. (cQry)->PROD_EHCOMUN 	 == 'S' .Or. UPPER((cQry)->PROD_EHCOMUN) 	 == 'TRUE', 'S', 'N' ), 'N'  )
	
	    MSExecAuto({|x,y| Mata010(x,y)}, aVetor, 3)

    Else

    	SB1->(DbSetOrder(1))
    	If SB1->(DbSeek(xFilial("SB1")+PADR((cQry)->PROD_COD,TAMSX3("B1_COD")[1])))

    		cNewCod	:=	SB1->B1_COD

	    	aAdd(aVetor, { "B1_COD"     , SB1->B1_COD    		, Nil})
		    aAdd(aVetor, { "B1_GRUPO"   , SB1->B1_GRUPO    		, Nil})
		    aAdd(aVetor, { "B1_TIPO"    , SB1->B1_TIPO     		, Nil})
		    aAdd(aVetor, { "B1_YTIPO"   , SB1->B1_YTIPO			, Nil})
		    aAdd(aVetor, { "B1_TIPCONV" , SB1->B1_TIPCONV       , Nil})
		    aAdd(aVetor, { "B1_ORIGEM"  , SB1->B1_ORIGEM        , Nil})
		    aAdd(aVetor, { "B1_CLASFIS" , SB1->B1_CLASFIS       , Nil})
		    aAdd(aVetor, { "B1_DESC"    , SB1->B1_DESC			, Nil})
		    aAdd(aVetor, { "B1_YPOLIT"  , SB1->B1_YPOLIT   		, Nil})
		    aAdd(aVetor, { "B1_UM"      , SB1->B1_UM       		, Nil})
		    aAdd(aVetor, { "B1_LOCPAD"  , SB1->B1_LOCPAD   		, Nil})
		    aAdd(aVetor, { "B1_YLOCALI" , SB1->B1_YLOCALI  		, Nil})
		    aAdd(aVetor, { "B1_YLOCINC" , SB1->B1_YLOCINC  		, Nil})
			aAdd(aVetor, { "B1_SEGUM"   , SB1->B1_SEGUM		    , Nil})
			aAdd(aVetor, { "B1_CONV"    , SB1->B1_CONV			, Nil})
		    aAdd(aVetor, { "B1_YUSER"   , SB1->B1_YUSER			, Nil})
		    aAdd(aVetor, { "B1_YDIVPA"  , SB1->B1_YDIVPA  		, Nil})
		    aAdd(aVetor, { "B1_YPECA"   , SB1->B1_YPECA    		, Nil})
			aAdd(aVetor, { "B1_POSIPI"  , SB1->B1_POSIPI  		, Nil})
		    aAdd(aVetor, { "B1_CONTA"   , SB1->B1_CONTA    		, Nil})
		    aAdd(aVetor, { "B1_YCTARES" , SB1->B1_YCTARES  		, Nil})
		    aAdd(aVetor, { "B1_YCTRIND" , SB1->B1_YCTRIND  		, Nil})
		    aAdd(aVetor, { "B1_YCTRADM" , SB1->B1_YCTRADM  		, Nil})
		    aAdd(aVetor, { "B1_LOCALIZ" , SB1->B1_LOCALIZ       , Nil})
		    aAdd(aVetor, { "B1_RASTRO"  , SB1->B1_RASTRO        , Nil})
		    
		    _cGarant	:=	Iif(Empty(SB1->B1_GARANT),"2",SB1->B1_GARANT)
     
		    aAdd(aVetor, { "B1_GARANT"  , _cGarant        , Nil})
		    aAdd(aVetor, { "B1_ATIVO"   , SB1->B1_ATIVO         , Nil})
		    aAdd(aVetor, { "B1_IMPORT"  , SB1->B1_IMPORT		, Nil})
	
		    _cAnuent	:=	Iif(SB1->B1_ANUENTE == "N","2",SB1->B1_ANUENTE)
	
		    aAdd(aVetor, { "B1_ANUENTE" , _cAnuent		, Nil})

		    aAdd(aVetor, { "B1_YCODCOM" , (cQry)->PROD_YCODCOM  , Nil})
		    aAdd(aVetor, { "B1_YBLSCPC" , (cQry)->PROD_YBLSCPC  , Nil})
	    	
	    	
	    	MSExecAuto({|x,y| Mata010(x,y)}, aVetor, 4)
    
	    Else
	    	_cErro	:=	"Produto Não Encontrado"
	    EndIf
    EndIf

    If !Empty(_cErro)
    	DisarmTransaction() // Deixar antes do metodo ::Status!
    	::Status("E", (cQry)->ID, _cErro, cNewCod)
    ElseIf lMsErroAuto

        DisarmTransaction() // Deixar antes do metodo ::Status!

        ::Status("E", (cQry)->ID, Varinfo( "", GETAUTOGRLOG() ), cNewCod)

    Else

        U_WS_INCSBZ(cNewCod, cAplicDir, cComum) // Inclui o indicador - Tabela SBZ

        ::Status("P", (cQry)->ID, "", cNewCod)
        
        // Tratamento para desbloqueio de Embalagem
        If !Empty((cQry)->PROD_COD) .And. !Empty((cQry)->PROD_YCODCOM) .And. (cQry)->PROD_YBLSCPC == "1"
        	
        	oEmb := TAtualizaEmbalagem():New()
        	
        	oEmb:cProdA := (cQry)->PROD_COD
        	oEmb:cProdN := (cQry)->PROD_YCODCOM
        	
        	oEmb:Update()
        	
        EndIf

    EndIf

Return(lMsErroAuto)


Method InputProduto(cQry) Class TBizagiIntegracaoProduto

    Local cNewCod   := ""
    Local cAplicDir := ""
    Local cComum	:= ""
    Local lRet      := .T.

    DbSelectArea("SB1")

    cNewCod := U_ProxCod(Left((cQry)->PROD_GRUPO, 3), Left((cQry)->PROD_GRUPO, 3), .T., "WS")

    RecLock("SB1", .T.)

    SB1->B1_COD     := cNewCod
    SB1->B1_GRUPO   := (cQry)->PROD_GRUPO
    SB1->B1_TIPO    := (cQry)->PROD_TIPO
    SB1->B1_YTIPO   := Alltrim((cQry)->PROD_YTIPO)
    SB1->B1_TIPCONV := "M"
    SB1->B1_ORIGEM  := "0"
    SB1->B1_CLASFIS := "00"
    SB1->B1_DESC    := AllTrim(StrTran(Upper(Alltrim((cQry)->PROD_DESC)),CHR(10), ' '))
    SB1->B1_YPOLIT  := (cQry)->PROD_YPOLIT
    SB1->B1_UM      := (cQry)->PROD_UM
    SB1->B1_LOCPAD  := (cQry)->PROD_LOCPAD
    SB1->B1_YLOCALI := (cQry)->PROD_YLOCALI
    SB1->B1_YLOCINC := (cQry)->PROD_YLOCINC

    If((cQry)->PROD_SEGUM != "*" .And. (cQry)->PROD_SEGUM != Nil)
        SB1->B1_SEGUM := (cQry)->PROD_SEGUM
    Else
        SB1->B1_SEGUM := (cQry)->PROD_UM
    EndIf

    IF SB1->B1_UM == SB1->B1_SEGUM
        SB1->B1_CONV := 1.00
    ELSE
        SB1->B1_CONV := VAL(STRTRAN((cQry)->PROD_CONV,",","."))
    ENDIF

    SB1->B1_YUSER   := Substr(Alltrim((cQry)->PROD_YUSER),1,TamSX3("B1_YUSER")[1])
    SB1->B1_YDIVPA  := (cQry)->PROD_YDIVPA
    SB1->B1_YPECA   := (cQry)->PROD_YPECA

    If (cQry)->PROD_POSIPI != "*"

        SB1->B1_POSIPI := (cQry)->PROD_POSIPI

    EndIf

    SB1->B1_CONTA   := (cQry)->PROD_CONTA
    SB1->B1_YCTARES := (cQry)->PROD_YCTARES
    SB1->B1_YCTRIND := (cQry)->PROD_YCTRIND
    SB1->B1_YCTRADM := (cQry)->PROD_YCTRADM
    SB1->B1_LOCALIZ	:= 'N'
    SB1->B1_RASTRO  := 'N'
    SB1->B1_GARANT  := '2'
    SB1->B1_ATIVO   := 'S' 
    SB1->B1_IMPORT  := IIF(!Empty((cQry)->PROD_IMPORT), IIF((cQry)->PROD_IMPORT == '1' .Or. (cQry)->PROD_IMPORT == 'S' .Or. UPPER((cQry)->PROD_IMPORT) == 'TRUE', 'S', 'N' ), 'N' )
    SB1->B1_ANUENTE := IIF(!Empty((cQry)->PROD_ANUENTE) , IIF((cQry)->PROD_ANUENTE == '1' .Or. (cQry)->PROD_ANUENTE == 'S' .Or. UPPER((cQry)->PROD_ANUENTE) == 'TRUE', '1', '2' ), '2'  ) //1 - SIM //2 - NÃO

    SB1->(MsUnLock())

    cAplicDir := IIF(!Empty((cQry)->PROD_APLICDIRETA), IIF((cQry)->PROD_APLICDIRETA == '1' .Or. (cQry)->PROD_APLICDIRETA == 'S' .Or. UPPER((cQry)->PROD_APLICDIRETA) == 'TRUE', 'S', 'N' ), 'S'  )
    cComum := IIF(!Empty((cQry)->PROD_EHCOMUN) , IIF((cQry)->PROD_EHCOMUN == '1' .Or. (cQry)->PROD_EHCOMUN == 'S' .Or. UPPER((cQry)->PROD_EHCOMUN) == 'TRUE', 'S', 'N' ), 'N'  )

    U_WS_INCSBZ(cNewCod, cAplicDir, cComum) // Inclui o indicador - Tabela SBZ

    lRet := ::Status('P', (cQry)->ID)

Return(lRet)


Method ValidateProd() Class TBizagiIntegracaoProduto

    Local lRet := .T.

Return(lRet)


Method Status(cStatus, nId, cLog, cNewCod) Class TBizagiIntegracaoProduto

    Local lRet := .T.
    Local cSql := ""

    Default cStatus := "" // E=Erro; P=Processado; A=Aguard. Processamento
    Default cLog := ""
    Default nId := 0
    Default cNewCod := ""

    If cStatus == "E"

        aAdd(::aErro, {cNewCod, cLog})

    EndIf

    cSql := " UPDATE dbo.BZINTEGRACAO_PRODUTO SET "

    cSql += " STATUS   = " + ValToSql(cStatus)
    cSql += " , LOG    = " + ValToSql(cLog)
    
    If cStatus == "P"
        
        cSql += " , PROD_COD = " + ValToSql(cNewCod)
    
    EndIf

    cSql += " , DTINTEGRA = " + ValToSql(DTOS(dDataBase))
    cSql += " , HRINTEGRA = CONVERT(VARCHAR(8), GETDATE(), 114) "

    cSql += " WHERE ID = " + cValToChar(nId)

    lRet := TcSQLExec(cSql) == 0

    If !lRet

        ConOut("TBizagiIntegracaoProduto: TCSQLError() -> " + TCSQLError())

    EndIf

Return(lRet)


Method GetErrorLog() Class TBizagiIntegracaoProduto

    Local cRet := ""
    Local nX := 1
    Local aError := GETAUTOGRLOG()

    For nX := 1 To Len(aError)

        cRet += aError[nX] + CRLF

    Next nX

Return(cRet)


Method LogMail() Class TBizagiIntegracaoProduto

    Local nW    := 0
    Local lFound := .F.
    Local cNum := ""
    Local cHtml := ""
    Local oMail := TAFMail():New()

    For nW := 1 To Len(::aErro)

        If AllTrim(::aErro[nW][2]) <> AllTrim("<br><pre> -> ARRAY (    0) [...]<br></pre><br>")

            If cNum <> ::aErro[nW][1]

                If !Empty(cNum)

                    cHtml += '</tbody>'
                    cHtml += '</table>'

                EndIf

                cNum := ::aErro[nW][1]

                cHtml += '<style type="text/css">'
                cHtml += '.tg  {border-collapse:collapse;border-color:#aaa;border-spacing:0;}'
                cHtml += '.tg td{background-color:#fff;border-color:#aaa;border-style:solid;border-width:1px;color:#333;'
                cHtml += '  font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;word-break:normal;}'
                cHtml += '.tg th{background-color:#f38630;border-color:#aaa;border-style:solid;border-width:1px;color:#fff;'
                cHtml += '  font-family:Arial, sans-serif;font-size:14px;font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}'
                cHtml += '.tg .tg-zw5y{border-color:inherit;text-align:center;text-decoration:underline;vertical-align:top}'
                cHtml += '.tg .tg-0lax{text-align:left;vertical-align:top}'
                cHtml += '</style>'

                cHtml += '<table width="100%" class="tg">'
                cHtml += '<thead>'
                cHtml += '  <tr>'
                cHtml += '    <th class="tg-zw5y">' + cEmpAnt + cFilAnt + ' - Novo Produto: ' + ::aErro[nW][1] + '</th>'
                cHtml += '  </tr>'
                cHtml += '</thead>'
                cHtml += '<tbody>'

            EndIf

            lFound := .T.

            cHtml += '  <tr>'
            cHtml += '    <td class="tg-0lax">' + ::aErro[nW][2] + '</td>'
            cHtml += '  </tr>'

            If nW == Len(::aErro)

                cHtml += '</tbody>'
                cHtml += '</table>'

            EndIf

        EndIf

    Next nW

    If lFound

        oMail:cTo := ::cEmail
        oMail:cSubject := "TBizagiIntegracaoProduto - Inconsistencias"
        oMail:cBody := cHtml

        oMail:Send()

    EndIf

Return()