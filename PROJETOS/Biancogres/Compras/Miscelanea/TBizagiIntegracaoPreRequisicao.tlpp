#INCLUDE "PROTHEUS.CH"
#INCLUDE "TOPCONN.CH"

/*/{Protheus.doc} TBizagiIntegracaoPreRequisicao
@author Filipe Bittencourt (Facile)
@since 13/10/2021
@project 28966
@version 1.0
@description Job para Integração das Pré-Requisições vindas do BIZAGI, substituindo o fonte BIAFG091
@observation O fonte corresponde ao JOB da tela BIA901.PRW
@type function
/*/

//U_BIAFF091
User Function BIAFF091()

	fProcessa('01','01')

	fProcessa('14','01')


Return

Static Function fProcessa(_cEmp,_cFil)
	Local oObj := Nil
	Local cMSG := ""

	RpcSetType(3)
	RpcSetEnv(_cEmp,_cFil)

	cMSG:= "TBizagiIntegracaoPreRequisicao:BIAFF091() => Inicio empresa "+cEmpAnt+"/01 em "+cValToChar(dDataBase)+" - "+Time()+" "
	ConOut(cMSG)
	oObj := TBizagiIntegracaoPreRequisicao():New()
	oObj:Processa()
	cMSG:= "TBizagiIntegracaoPreRequisicao:BIAFF091() => Fim  empresa "+cEmpAnt+"/01 em "+cValToChar(dDataBase)+" - "+Time()+" "
	ConOut(cMSG)

	RpcClearEnv()

Return()


	Class TBizagiIntegracaoPreRequisicao From LongClassName

		Data aErro
		Data cEmail
		Data cProcessoBizagi


		Public  Method New() Constructor
		Public  Method Processa()	 
		Private Method InsertPreRequisicao(oJson)
		Private Method Status(cStatus, aJSErro, aJSOk)
		Private Method GetNewCodigo()
		Private Method LogMail()
		Private Method CustoUnitarioProduto(cCod,cLocal)


	EndClass

Method New(lJob) Class TBizagiIntegracaoPreRequisicao

	::aErro   := {}
	::cProcessoBizagi := ""
	::cEmail := U_GetBiaPar("MV_EMAILINTBIZCLI", "sistemas.ti@biancogres.com.br")
  //::cEmail := "filipe.bittencourt@facilesistemas.com.br"


Return(Self)

Method Processa() Class TBizagiIntegracaoPreRequisicao

	Local cQry     := GetNextAlias()
	Local _cSQL    := ""
	Local aITEM    := {}
	Local aPRQ     := {}
	Local cProcBiz := ""
	Local nJ       := 0
	Local oCAB     := Nil
	

	_cSql += "  SELECT "  + CRLF
	_cSql += "  ID " + CRLF
	_cSql += " ,CODIGO_PRODUTO AS  PRODUTO "  + CRLF
	_cSql += " ,QUANTIDADE AS QTD "  + CRLF
	_cSql += " ,LOCAL LOCALIZA"  + CRLF
	_cSql += " ,CONTA "  + CRLF
	_cSql += " ,TAG "  + CRLF
	_cSql += " ,APLICACAO "  + CRLF
	_cSql += " ,MELHORIA "  + CRLF
	_cSql += " ,DRIVER "  + CRLF
	_cSql += " ,JUSTIFICATIVA_DRIVER as OBSDRIVE "  + CRLF
	_cSql += " ,PARADA "  + CRLF
	_cSql += " ,ISNULL(EMPRESA,'01') AS EMPRESA "  + CRLF
	_cSql += " ,BZNUMPROC  "  + CRLF
	_cSql += " ,CLASSE_VALOR AS CLVLR  "  + CRLF
	_cSql += " ,MATRICULA AS  MATRIC  "  + CRLF
	_cSql += " ,MATRICULA_ORIGEM AS  MATORI  "  + CRLF
	_cSql += " ,TIPO  "  + CRLF
	_cSql += " ,CLIENTE_AI as CLIYSI"  + CRLF
	_cSql += " ,SUBITEM_PROJ AS YSUBITE"  + CRLF
	_cSql += " ,ITEM_CONTA AS ITEMCTA"  + CRLF
	_cSql += " FROM BZINTEGRACAO_PRE_REQUISICAO  (NOLOCK)  "  + CRLF

	/*
	  STATUS ANTIGO              |   STATUS NOVO
		IB = INCLUIDO PELO BIZAGI  |   A = AGUARDADNDO PROCESSAMENTO e INCLUIDO PELO BIZAGI
		AP = ATUALIZADO PROTHEIS   |   P = PROCESSADO PELO PROTHEUS
		ER = ERRO'                 |   E = ERRO
	*/   	
	 
  _cSql += "  WHERE  STATUS = 'A' "  + CRLF 
	_cSql += "  AND ISNULL(EMPRESA,'01') = '"+cEmpAnt+"'"  + CRLF 
  _cSql += "  AND NOT EXISTS (SELECT 1  "  + CRLF
  _cSql += "  FROM " + RETSQLNAME("SZI") + " (NOLOCK) " +  CRLF
  _cSql += " 	WHERE ZI_YBIZAGI = BZNUMPROC "  + CRLF
  _cSql += "  AND D_E_L_E_T_ = '' ) "  + CRLF
	
 
	// ORDENAR SEMPRE PELO BZNUMPROC, POIS A LÓGICA DE INSERT na tabela SZI PRECISA ESTAR ORDENADO.
	_cSql += " ORDER BY  BZNUMPROC"  + CRLF

	TcQuery _cSQL New Alias (cQry)

	While (cQry)->(!EOF())

		If cProcBiz != (cQry)->BZNUMPROC

			If Len(aITEM) > 0

				oCAB["ITENS"] :=  aITEM
				aadd(aPRQ,oCAB)
				aITEM := {}
				nJ := 0

			EndIf

			oCAB                     := JsonObject():New()
			oCAB["CAB"]              := JsonObject():New()
			oCAB["CAB"]["CLVLR"]     := (cQry)->CLVLR
			oCAB["CAB"]["TIPO"]      := (cQry)->TIPO
			oCAB["CAB"]["MATRIC"]    := (cQry)->MATRIC
			oCAB["CAB"]["LOCALIZA"]  := (cQry)->LOCALIZA
			oCAB["CAB"]["CLIYSI"]    := (cQry)->CLIYSI
			oCAB["CAB"]["ITEMCTA"]   := (cQry)->ITEMCTA
			oCAB["CAB"]["YSUBITE"]   := (cQry)->YSUBITE
			oCAB["CAB"]["BZNUMPROC"] := (cQry)->BZNUMPROC

		EndIf

		nJ++
		aadd(aITEM, JsonObject():New())
		aITEM[nJ]["PRODUTO"]   := AllTrim((cQry)->PRODUTO)
		aITEM[nJ]["QTD"]       := (cQry)->QTD
		aITEM[nJ]["ID"]        := (cQry)->ID
		aITEM[nJ]["LOCALIZA"]  := (cQry)->LOCALIZA
		aITEM[nJ]["APLICACAO"] := (cQry)->APLICACAO
		aITEM[nJ]["TAG"]       := (cQry)->TAG
		aITEM[nJ]["MELHORIA"]  := (cQry)->MELHORIA
		aITEM[nJ]["CONTA"]     := (cQry)->CONTA
		aITEM[nJ]["PARADA"]    := (cQry)->PARADA
		aITEM[nJ]["DRIVER"]    := (cQry)->DRIVER
		aITEM[nJ]["OBSDRIVE"]  := (cQry)->OBSDRIVE
		aITEM[nJ]["MATORI"]    := (cQry)->MATORI
		aITEM[nJ]["BZNUMPROC"] := (cQry)->BZNUMPROC


		cProcBiz := (cQry)->BZNUMPROC
		(cQry)->(DbSkip())

	EndDo

  (cQry)->(DbCloseArea())

	//pegando a ultimo registro após o fim do arquivo (cQry)
	If ValType(oCAB) <> "U"

		oCAB["ITENS"] :=  aITEM
		aadd(aPRQ,oCAB)
		FreeObj(oCAB)

		::InsertPreRequisicao(aPRQ)

	Endif

	if Len(::aErro) > 0
		::LogMail()
	EndiF

Return()

Method InsertPreRequisicao(aOJSon) Class TBizagiIntegracaoPreRequisicao


	Local _cErro      := ""
	Local nI          := 0
	Local nJ          := 0
	Local nK          := 0
	Local nW          := 0
	Local aJSErro     :=  {}
	Local aJSOK       :=  {}

	::cProcessoBizagi := ""

	For nI :=  1 To Len(aOJSon)

		BEGIN TRANSACTION

			::cProcessoBizagi := ::GetNewCodigo()

			//Cabeçalho
			RecLock("SZI",.T.)
			SZI->ZI_FILIAL  := xFilial("SZI")
			SZI->ZI_DOC     := ::cProcessoBizagi
			SZI->ZI_TIPO    := aOJSon[nI]["CAB"]["TIPO"]
			SZI->ZI_EMISSAO := Date()
			SZI->ZI_CLVL    := aOJSon[nI]["CAB"]["CLVLR"]
			SZI->ZI_CC      := U_B902BCC(SZI->ZI_CLVL)
			SZI->ZI_MATRIC  := aOJSon[nI]["CAB"]["MATRIC"]
			//	ZZY_FILIAL, ZZY_MATRIC, R_E_C_N_O_, D_E_L_E_T_
			SZI->ZI_NOME    := Posicione("ZZY",3,xFilial("ZZY")+ aOJSon[nI]["CAB"]["MATRIC"],"ZZY_NOME")
			SZI->ZI_BAIXA   := "N"
			SZI->ZI_EMPRESA := cEmpAnt
			SZI->ZI_YLOCAL  := aOJSon[nI]["CAB"]["LOCALIZA"]
			SZI->ZI_YSI     := aOJSon[nI]["CAB"]["CLIYSI"]
			SZI->ZI_ITEMCTA := aOJSon[nI]["CAB"]["ITEMCTA"]
			SZI->ZI_YSUBITE := aOJSon[nI]["CAB"]["YSUBITE"]

			If FIELDPOS("ZI_YBIZAGI") > 0
				SZI->ZI_YBIZAGI	:= aOJSon[nI]["CAB"]["BZNUMPROC"]
			EndIf

			SZI->(MsUnlock())

			nK := 0
			nW := 0
      aJSErro := {}
      aJSOK := {}
			For nJ :=  1 To Len(aOJSon[nI]["ITENS"])

				Reclock("SZJ",.T.)
				SZJ->ZJ_FILIAL	:=	xFilial("SZJ")
				SZJ->ZJ_DOC		  :=	::cProcessoBizagi
				SZJ->ZJ_COD	   	:=	aOJSon[nI]["ITENS"][nJ]["PRODUTO"]
				SZJ->ZJ_DESCRI	:=	POSICIONE("SB1",1,xFilial("SB1")+aOJSon[nI]["ITENS"][nJ]["PRODUTO"],"B1_DESC")
				SZJ->ZJ_LOCAL	  :=	aOJSon[nI]["ITENS"][nJ]["LOCALIZA"]
				SZJ->ZJ_UM		  :=	POSICIONE("SB1",1,xFilial("SB1")+aOJSon[nI]["ITENS"][nJ]["PRODUTO"],"B1_UM")
				SZJ->ZJ_QUANT	  :=	aOJSon[nI]["ITENS"][nJ]["QTD"]
				SZJ->ZJ_VLRTOT	:=	Iif(SZI->ZI_TIPO == "DU",0.01,::CustoUnitarioProduto(SZJ->ZJ_COD,SZJ->ZJ_LOCAL) * SZJ->ZJ_QUANT)
				SZJ->ZJ_APLIC	  :=	Iif(Empty(aOJSon[nI]["ITENS"][nJ]["APLICACAO"]),'0',aOJSon[nI]["ITENS"][nJ]["APLICACAO"])
				SZJ->ZJ_TAG		  :=	aOJSon[nI]["ITENS"][nJ]["TAG"]
				SZJ->ZJ_YLOCALI	:=	Posicione("ZCN",2,xFilial("ZCN")+SZJ->ZJ_COD+SZJ->ZJ_LOCAL,"ZCN_LOCALI")
				SZJ->ZJ_YMELHOR	:=	Iif(aOJSon[nI]["ITENS"][nJ]["MELHORIA"] == "000000", "", aOJSon[nI]["ITENS"][nJ]["MELHORIA"]) //Verificar Melhoria
				SZJ->ZJ_EMPRESA	:=	cEmpAnt
				SZJ->ZJ_EMPDEST	:=	cEmpAnt
				SZJ->ZJ_CONTA 	:=	aOJSon[nI]["ITENS"][nJ]["CONTA"]
				SZJ->ZJ_CLVL  	:=	SZI->ZI_CLVL
				SZJ->ZJ_YPARADA	:=	Iif(UPPER(aOJSon[nI]["ITENS"][nJ]["PARADA"]) == 'TRUE','S','N')
				SZJ->ZJ_QTAPROV	:=	SZJ->ZJ_QUANT
				SZJ->ZJ_YDRIVER	:=	Iif(aOJSon[nI]["ITENS"][nJ]["DRIVER"] == "-1","",aOJSon[nI]["ITENS"][nJ]["DRIVER"])
				SZJ->ZJ_YJTDRV	:=	aOJSon[nI]["ITENS"][nJ]["OBSDRIVE"]
				SZJ->ZJ_YMATORI :=  AllTrim(aOJSon[nI]["ITENS"][nJ]["MATORI"])

				SZJ->(MsUnlock())

				SB2->(DbSetOrder(1))
				If !SB2->(DbSeek(xFilial("SB2")+SZJ->ZJ_COD+SZJ->ZJ_LOCAL))
					CriaSb2(SZJ->ZJ_COD,SZJ->ZJ_LOCAL)
					If !AllTrim(aOJSon[nI]["CAB"]["TIPO"]) $ "DU_DN"

						_cErro += "Processo Bizagi: "+aOJSon[nI]["CAB"]["BZNUMPROC"]+ " <br> "
						_cErro += "Motivo (01): Estoque Insuficiente  <br/> "
						_cErro += "Produto: "+ Alltrim(SZJ->ZJ_COD)+" <br/> "
						_cErro += "Quantidade requerida: " + Alltrim(Str(SZJ->ZJ_QUANT)) + "  <br/> "
						_cErro += "Quantidade em  Estoque: " + Alltrim(Str(0))  + "  <br/> "


					EndIf

				Else

				 
          If !AllTrim(aOJSon[nI]["CAB"]["TIPO"]) $ "DU_DN"
						If SZJ->ZJ_QUANT > (SB2->B2_QATU - SB2->B2_RESERVA)

							_cErro += "Processo Bizagi: "+aOJSon[nI]["CAB"]["BZNUMPROC"]+ " <br> "
							_cErro += "Motivo (02): Estoque Insuficiente <br/> "
							_cErro += "Produto: "+ Alltrim(SZJ->ZJ_COD)+" <br/> "
							_cErro += "Quantidade requerida: " + Alltrim(Str(SZJ->ZJ_QUANT)) + "  <br/> "
							_cErro += "Quantidade em  Estoque: " +  Alltrim(Str(SB2->B2_QATU - SB2->B2_RESERVA))  + "  <br/> "

						EndIf

					EndIf

				EndIf

				If !Empty(_cErro)

					nK++
					aadd(aJSErro, JsonObject():New())
					aJSErro[nK]["LOG"]       := _cErro
					aJSErro[nK]["ID"]        := aOJSon[nI]["ITENS"][nJ]["ID"]
					aJSErro[nK]["BZNUMPROC"] := aOJSon[nI]["CAB"]["BZNUMPROC"]
					aJSErro[nK]["DOCUMENTO"] := ''
					_cErro := ""

				Else

					nW++
					aadd(aJSOK, JsonObject():New())
					aJSOK[nW]["LOG"]       := ''
					aJSOK[nW]["ID"]        := aOJSon[nI]["ITENS"][nJ]["ID"]
					aJSOK[nW]["BZNUMPROC"] := aOJSon[nI]["CAB"]["BZNUMPROC"]
					aJSOK[nW]["DOCUMENTO"] := SZI->ZI_DOC

				EndIf

			Next nJ

			If Len(aJSErro) > 0

			DisarmTransaction()
			::Status("E", aJSErro, aJSOK)

			Else

				If SZI->ZI_TIPO == 'RE'

					SB2->(DbSetOrder(1))
					If SB2->(DbSeek(xFilial("SB2")+SZJ->ZJ_COD+SZJ->ZJ_LOCAL))

						SB2->(RecLock("SB2",.F.))
						SB2->B2_RESERVA += SZJ->ZJ_QTAPROV
						SB2->(MsUnlock())

					EndIf

				EndIf

        ::Status("P", aJSErro, aJSOK)

			EndIf

		END TRANSACTION

	Next nI

Return()

Method GetNewCodigo() Class TBizagiIntegracaoPreRequisicao

	Local _msDocSZI := ""

	_msDocSZI := GetSxENum("SZI","ZI_DOC")
	SZI->(dbSetOrder(1))
	If SZI->(dbSeek(xFilial("SZI") + _msDocSZI))
		While .T.
			_msDocSZI := GetSxENum("SZI","ZI_DOC")
			SZI->(dbSetOrder(1))
			If !SZI->(dbSeek(xFilial("SZI") + _msDocSZI))
				Exit
			EndIf
		End
	EndIf

Return _msDocSZI

Method Status(cStatus, aJSErro, aJSOK ) Class TBizagiIntegracaoPreRequisicao

	Local lRet        := .T.
	Local cSql        := ""
	Local cBZPROC     := ""	
	Local nI          := 1
	DEFAULT cStatus   := "" // E=Erro; P=Processardo; A=Aguard. Processarmento

	If cStatus == "E"

		//Colocando o LOG de cada linha.
		For nI := 1 To Len(aJSErro)

			cSql   := " UPDATE dbo.BZINTEGRACAO_PRE_REQUISICAO SET "+CRLF
			cSql   += "   STATUS         = '"+cStatus+"' "+CRLF
			cSql   += " , DTINTEGRA      = '"+DTOS(dDataBase)+"' "+CRLF
			cSql   += " , HRINTEGRA      = '"+TIME()+"' "+CRLF
			cSql  += "  , LOG            = '"+aJSErro[nI]["LOG"]+"' "+CRLF
			cSql  += "   WHERE BZNUMPROC = '"+aJSErro[nI]["BZNUMPROC"]+"' "+CRLF
			cSql  += "    AND ID         =  "+cValToChar(aJSErro[nI]["ID"])+" "+CRLF

			lRet   := TcSQLExec(cSql) == 0
			cBZPROC := aJSErro[nI]["BZNUMPROC"]
      aAdd(::aErro, aJSErro[nI]["LOG"]) // Agrupa os erros para enviar email ao final de todo o processo.

		Next nI

		//Após colocar o erro em cada linha. Todo o processo mesmo alguns dando certo todo o processo fica comprometido
		cSql   := " UPDATE dbo.BZINTEGRACAO_PRE_REQUISICAO SET STATUS = 'E'  WHERE BZNUMPROC = '"+cBZPROC+"';  "+CRLF
		lRet   := TcSQLExec(cSql) == 0

		If !lRet

			ConOut("TBizagiIntegracaoAlcadaAprovacao: TCSQLError() -> " + TCSQLError())

		EndIf	 

	Else

		cSql   := " UPDATE dbo.BZINTEGRACAO_PRE_REQUISICAO SET "+CRLF
		cSql   += "   STATUS         = '"+cStatus+"' "+CRLF
		cSql   += " , DTINTEGRA      = '"+DTOS(dDataBase)+"' "+CRLF
		cSql   += " , HRINTEGRA      = '"+TIME()+"' "+CRLF
		cSql  += "  , LOG            = '' "+CRLF
    cSql  += "  , DOCUMENTO      = '"+aJSOK[nI]["DOCUMENTO"]+"' "+CRLF
		cSql  += "   WHERE BZNUMPROC = '"+aJSOK[nI]["BZNUMPROC"]+"' "+CRLF
		//cSql  += "    AND ID         =  "+cValToChar(aJSOK[nI]["ID"])+" "+CRLF

		lRet   := TcSQLExec(cSql) == 0

	EndIf

Return(lRet)



Method LogMail() Class TBizagiIntegracaoPreRequisicao

	Local nW    := 0
	Local cHtml := ""
	Local oMail := TAFMail():New()

	If Len(::aErro) > 0

		cHtml += '<style type="text/css">'
		cHtml += '.tg  {border-collapse:collapse;border-color:#aaa;border-spacing:0;}'
		cHtml += '.tg td{background-color:#fff;border-color:#aaa;border-style:solid;border-width:1px;color:#333;'
		cHtml += '  font-family:Arial, sans-serIf;font-size:14px;overflow:hidden;padding:10px 5px;word-break:normal;}'
		cHtml += '.tg th{background-color:#f38630;border-color:#aaa;border-style:solid;border-width:1px;color:#fff;'
		cHtml += '  font-family:Arial, sans-serIf;font-size:14px;font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}'
		cHtml += '.tg .tg-zw5y{border-color:inherit;text-align:center;text-decoration:underline;vertical-align:top}'
		cHtml += '.tg .tg-0lax{text-align:left;vertical-align:top}'
		cHtml += '</style>'
		cHtml += '<table width="100%" class="tg">'
		cHtml += '<thead>'
		cHtml += '  <tr>'
		cHtml += '    <th class="tg-zw5y">' + cEmpAnt + cFilAnt + ' - Pré-Requisição</th>'
		cHtml += '  </tr>'
		cHtml += '</thead>'
		cHtml += '<tbody>'

		For nW := 1 To Len(::aErro)

			cHtml += '  <tr>'
			cHtml += '    <td class="tg-0lax">' + ::aErro[nW] + '</td>'
			cHtml += '  </tr>'

		Next nW

		cHtml += '</tbody>'
		cHtml += '</table>'

		oMail:cTo := ::cEmail
		oMail:cSubject := "TBizagiIntegracaoPreRequisicao - Inconsistencias"
		oMail:cBody := cHtml
		oMail:Send()

	EndIf

Return()

Method CustoUnitarioProduto(_cCod,_cLocal) Class TBizagiIntegracaoPreRequisicao

	Local _nCm		:=	0
	Local _cAlias	:=	GetNextAlias()

	BeginSql Alias _cAlias
		%NoParser%
		SELECT ISNULL(B2_CM1,0) B2_CM1
		FROM %TABLE:SB2% (NOLOCK)
		WHERE B2_FILIAL = %XFILIAL:SB2%
		AND B2_COD = %Exp:_cCod%
		AND B2_LOCAL = %Exp:_cLocal%
		AND %NotDel%
	EndSql

	_nCm	:=	(_cAlias)->B2_CM1

	(_cAlias)->(DbCloseArea())

Return _nCm

