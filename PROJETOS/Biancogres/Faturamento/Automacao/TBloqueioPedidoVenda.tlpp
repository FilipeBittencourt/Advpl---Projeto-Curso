#Include "TOTVS.CH"
#Include "Protheus.CH"
#Include "TOPCONN.CH"
#Include "rwmake.ch"

/*/{Protheus.doc} TBloqueioPedidoVenda
@description Projeto Ciclo do Pedido => 
@author Pedro Henrique / Facile Sistemas
@since 09/07/2019
@version 1.0
@type class
/*/
Class TBloqueioPedidoVenda From LongClassName

	//atributos publico

	Public Data cNumPed
	Public Data nMargemAntiga
	Public Data nMargemAtual

	//atributos privado

	//metodos publicos
	Public Method New() Constructor
	Public Method GetValorMargem()
	Public Method CheckAltAprov()
	Public Method CheckMargem()
	Public Method Check()

	Public Method GetQuerySC6()
	//metodos privados

	Public Method GetRegraTipo()
	Public Method ArrayToSring()
	Public Method GravaZKL()


EndClass

Method New (_cNumPed) Class TBloqueioPedidoVenda

	::cNumPed := _cNumPed

	DbSelectArea('SC5')
	SC5->(DbSetOrder(1))
	SC5->(DbSeek(xFilial('SC5')+::cNumPed))

	//::nMargemAntiga	:= ::GetValorMargem()

	//U_fMargem3(::cNumPed, "2")

	//::nMargemAtual	:= ::GetValorMargem()

Return

Method GetValorMargem() Class TBloqueioPedidoVenda

	Local aArea			:= GetArea()
	Local cQuery 		:= ""
	Local cAliasTmp 	:= GetNextAlias()
	Local nValor		:= 0

	cQuery := " SELECT SUM(C6_YPERCMC) AS VL						 					" + CRLF
	cQuery += " FROM "+ RetSqlName("SC6")+"												" + CRLF
	cQuery += " WHERE C6_FILIAL 	= '"+ xFilial("SC6") +"'							" + CRLF
	cQuery += " AND C6_NUM		 	= '"+::cNumPed+"'									" + CRLF
	cQuery += " AND D_E_L_E_T_		= '' 												" + CRLF

	TcQuery cQuery New Alias (cAliasTmp)

	If (!(cAliasTmp)->(Eof()))
		nValor := (cAliasTmp)->VL
	EndIf

	(cAliasTmp)->(DbCloseArea())

	RestArea(aArea)

Return nValor



Method CheckAltAprov() Class TBloqueioPedidoVenda

	Local lRet	:= .F.

	//Caso o pedido não tenha aprovador, submete novamente a analise
	If Alltrim(SC5->C5_YAAPROV) == ''
		lRet := .T.
	ElseIf Type("lCheckPV") <> "U" .And. lCheckPV
		lRet := .T.
	EndIf

Return lRet


Method CheckMargem(_cRegra, _nValor) Class TBloqueioPedidoVenda

	Local aArea			:= GetArea()
	Local cQuery		:= ""
	Local cAliasTmp 	:= GetNextAlias()
	Local cCod			:= ""

	cQuery := " SELECT ZKK_CODIGO												 					" + CRLF
	cQuery += " FROM "+ RetSqlName("ZKK")+"															" + CRLF
	cQuery += " WHERE ZKK_FILIAL 				= '"+ xFilial("ZKK") +"'							" + CRLF
	cQuery += " AND ZKK_CODZKI	 				= '"+_cRegra+"'										" + CRLF
	cQuery += " AND "+cValToChar(_nValor)+"		BETWEEN ZKK_VALIN AND ZKK_VALFI 					" + CRLF
	cQuery += " AND D_E_L_E_T_					= ''												" + CRLF

	TcQuery cQuery New Alias (cAliasTmp)

	If (!(cAliasTmp)->(Eof()))
		cCod := (cAliasTmp)->ZKK_CODIGO
	EndIf

	(cAliasTmp)->(DbCloseArea())

	RestArea(aArea)

Return cCod


Method Check() Class TBloqueioPedidoVenda

	Local aArea			:= GetArea()
	Local cQuery 		:= ""
	Local cAliasZKI 	:= GetNextAlias()

	Local cNomeAprov	:= ""
	Local cTipoBloq		:= ""
	Local cMsgBloq		:= ""
	Local aMsgBloq		:= {}

	Local cTipo			:= ""
	Local cCodRegra		:= ""
	Local lBloq			:= .F.
	Local nDescori		:= 0
	Local nDescrea		:= 0
	Local lEnvMail		:= .F.
	Local aRegras		:= {}
	Local cCodZKK 		:= ""
	Local lPedLib		:= .F.

	Private cAliasSC6 	:= GetNextAlias() //macro substituicao precisa ser privada


	If (ALlTrim(SC5->C5_CLIENTE) == '010064')
		Return lBloq
	EndIf


	//verifica alteracao de margem
	If (::CheckAltAprov())

		//tabelas usados nas macro subtituições dasregras

		//condições pagamento
		DbSelectArea('SE4')
		SE4->(DbSetOrder(1))
		SE4->(DbSeek(xFilial("SE4")+SC5->C5_CONDPAG))

		//Item do pedido
		TcQuery ::GetQuerySC6() New Alias (cAliasSC6)


		cQuery := " SELECT *											 					" + CRLF
		cQuery += " FROM "+ RetSqlName("ZKI")+"												" + CRLF
		cQuery += " WHERE ZKI_FILIAL 	= '"+ xFilial("ZKI") +"'							" + CRLF
		cQuery += " AND (ZKI_MARCA	 	= '"+SC5->C5_YEMP+"' OR ZKI_MARCA = 'XXXX')			" + CRLF
		cQuery += " AND D_E_L_E_T_		= '' 												" + CRLF
		cQuery += " ORDER BY ZKI_ORDEM														" + CRLF

		TcQuery cQuery New Alias (cAliasZKI)

		While (!(cAliasZKI)->(Eof()))//verifica todas as regras

			If (&((cAliasZKI)->ZKI_REGRA))

				lBloq := .F.

				If (AllTrim((cAliasZKI)->ZKI_TIPO) == 'A')//Apenas Aprovador

					cCodZKK	:= ""
					lBloq 	:= .T.

				ElseIf (AllTrim((cAliasZKI)->ZKI_TIPO) == 'M')//Margem

					cCodZKK := ::CheckMargem((cAliasZKI)->ZKI_CODIGO, (cAliasSC6)->MARGEM)
					lBloq 	:= !Empty(cCodZKK)

				ElseIf (AllTrim((cAliasZKI)->ZKI_TIPO) == 'D')//Desconto

					cCodZKK := ::CheckMargem((cAliasZKI)->ZKI_CODIGO, (cAliasSC6)->DESCONTO)
					lBloq 	:= !Empty(cCodZKK)

				EndIf

				If (lBloq)

					cTipoBloq	:= (cAliasZKI)->ZKI_TPBLQ
					cCodRegra	:= (cAliasZKI)->ZKI_CODIGO
					cTipo		:= (cAliasZKI)->ZKI_TIPO

					Aadd(aRegras, {cCodRegra, cTipo, IIF(!Empty(cCodZKK), cCodZKK, cCodRegra)})

					If (Ascan(aMsgBloq, {|x|  AllTrim(x) == AllTrim((cAliasZKI)->ZKI_DESBLQ)})  <=0 )
						Aadd(aMsgBloq, AllTrim((cAliasZKI)->ZKI_DESBLQ))
					EndIf

					If (AllTrim((cAliasZKI)->ZKI_PRIORI) == 'S')

						aRegras 	:= {}
						aMsgBloq	:= {}
						Aadd(aRegras, {cCodRegra, cTipo, IIF(!Empty(cCodZKK), cCodZKK, cCodRegra)})
						Aadd(aMsgBloq, AllTrim((cAliasZKI)->ZKI_DESBLQ))

						Exit

					EndIf

				EndIf

			EndIf

			(cAliasZKI)->(DbSkip())

		EndDo

		nDescori	:= (cAliasSC6)->DESCORI
		nDescrea	:= (cAliasSC6)->DESCREA

		(cAliasSC6)->(DbCloseArea())
		(cAliasZKI)->(DbCloseArea())

	EndIf


	If (Len(aRegras) > 0)

		lBloq 	:= .T.

		oPedAprov := TPedidoAprovador():New(SC5->C5_NUM)
		oPedAprov:CancelarAprov()

		::GravaZKL(aRegras)

		oPedAprov := TPedidoAprovador():New(SC5->C5_NUM)
		cIdZKL := oPedAprov:GetIdAprov()


		cAprov  		:= ""
		cNomeAprov		:= ""

		If (!Empty(cIdZKL))

			DbSelectArea("ZKL")
			ZKL->(DbGoto(cIdZKL))

			cAprov  		:= ZKL->ZKL_APROV
			cNomeAprov		:= UsrRetName(cAprov)

		EndIf

		cYAprov 		:= SPACE(TamSX3('C5_YAPROV')[1])
		cBlq			:= 'S'
		cBloquei		:= 'S'

		If Empty (cAprov)

			cNomeAprov := "SEM LIBERADOR"
			MsgBox("Este pedido será bloqueado, pois não foi encontrado aprovador!"+CRLF+"Favor informar ao seu Atendente ou Gerente Comercial!", "M410STTS", "STOP")

		Else

			cMsgBloq := ::ArrayToSring(aMsgBloq, "/")
			MsgBox(cMsgBloq + CRLF+"Favor solicitar ao "+cNomeAprov+" liberar este pedido!", "M410STTS", "STOP")

		EndIf

	Else


		//quando já for aprovado de primeira
		If (Inclui)
			cNomeAprov	:= cUserName
			cYAprov		:= Substr(Alltrim(cUserName), 1, 15)
		Else//alterar

			cNomeAprov	:= IIF(!Empty(SC5->C5_YAAPROV), SC5->C5_YAAPROV, cUserName)
			cYAprov 	:= IIF(!Empty(SC5->C5_YAAPROV), SC5->C5_YAPROV, Substr(Alltrim(cUserName), 1, 15) )

		EndIf

		//teve alguma aleração mas não caiu em nenhuma regra
		//aconteceu alguma remoção de desconto e etc
		If Type("lCheckPV") <> "U" .And. lCheckPV

			cNomeAprov	:= cUserName
			cYAprov 	:= Substr(Alltrim(cUserName), 1, 15)

			oPedAprov := TPedidoAprovador():New(SC5->C5_NUM)
			oPedAprov:CancelarAprov()

			U_BIAF083(::cNumPed)

			lPedLib := .T.

		EndIf

		cBlq		:= 'N'
		cBloquei	:= ''
		cTipoBloq	:= ''

	EndIf


	//Atualiza SC5
	cQuery := "UPDATE "+RetSqlName("SC5")+" SET 											"+ CRLF
	cQuery += " C5_YTPBLQ 	= '"+ cTipoBloq	+"', 											"+ CRLF
	cQuery += " C5_YAAPROV 	= '"+ Upper(Substr(Alltrim(cNomeAprov), 1, 15))	+"',			"+ CRLF
	cQuery += " C5_YAPROV 	= '"+ Upper(cYAprov)+	"',										"+ CRLF
	cQuery += " C5_YMDESPD 	= '"+ Alltrim(Str(nDescori))+	"',			 					"+ CRLF
	cQuery += " C5_YMEDDES 	= '"+ Alltrim(Str(nDescrea))+	"', 							"+ CRLF

	If  Inclui
		cQuery += " C5_YDIGP = '"+	Substr(Alltrim(cUserName), 1, 15)	+"',				"+ CRLF
	EndIf

	cQuery += " C5_YALTP 	= '"+ Substr(Alltrim(cUserName), 1, 15)+ "' 					"+ CRLF
	cQuery += " WHERE C5_FILIAL = '" +xFilial("SC5")+ "' 									"+ CRLF
	cQuery += " AND	C5_NUM = '"+ ::cNumPed +"' AND D_E_L_E_T_ = '' 							"+ CRLF
	TcSQLExec(cQuery)


	If (Inclui .Or. lPedLib .Or. Len(aRegras) > 0)

		//Atualiza SC6

		cQuery := "UPDATE "+RetSqlName("SC6")+" SET 											"+ CRLF
		cQuery += " C6_BLQ 			= '"+ cBlq +"',												"+ CRLF
		cQuery += " C6_BLOQUEI 		= '"+ cBloquei +"',											"+ CRLF
		cQuery += " C6_MSEXP 		= ''														"+ CRLF
		cQuery += " WHERE C6_FILIAL = '"+xFilial("SC6")+"' AND C6_NUM = '"+ ::cNumPed +"'  		"+ CRLF
		cQuery += " AND C6_BLQ <> 'R' AND D_E_L_E_T_ = '' 										"+ CRLF
		TcSQLExec(cQuery)

	EndIf

	If (Len(aRegras) > 0)
		U_BIAF082(::cNumPed)
	EndIf


	RestArea(aArea)

Return lBloq

Method GetRegraTipo(aRegras, cTipo) Class TBloqueioPedidoVenda

	Local nI			:= 0
	Local aRegraTipo	:= {}

	For nI := 1 To Len (aRegras)

		If (AllTrim(aRegras[nI][2]) $ cTipo)
			Aadd(aRegraTipo, aRegras[nI][3])
		EndIf

	Next nI

Return aRegraTipo

Method ArrayToSring(aArray, cSep) Class TBloqueioPedidoVenda

	Local nI		:= 0
	Local cRet		:= ""

	For nI := 1 To Len (aArray)
		cRet += aArray[nI]
		If (nI < Len (aArray))
			cRet += cSep
		EndIf
	Next nI

Return cRet


Method GravaZKL(aRegras) Class TBloqueioPedidoVenda

	Local cQuery 		:= ""
	Local cAliasTmp 	:= Nil
	Local cQueryUser	:= ""
	Local cQueryAprov	:= ""

	Local aRegraA	:= {}
	Local aRegraM	:= {}
	Local cRegraA	:= ""
	Local cRegraM	:= ""

	Local cAprov	:= ""
	Local cUltOrdem	:= ""
	Local aReg		:= {}
	Local nPos		:= 0
	Local nI		:= 0

	aRegraA 	:= ::GetRegraTipo(aRegras, 'A')
	aRegraM 	:= ::GetRegraTipo(aRegras, 'D_M')
	cRegraA		:= ::ArrayToSring(aRegraA, "/")
	cRegraM		:= ::ArrayToSring(aRegraM, "/")


	If (!Empty(cRegraM)) .Or. (!Empty(cRegraA))

		cAliasTmp	:= GetNextAlias()

		cSA1	:= IIF(Alltrim(SC5->C5_YEMP) $ "0101_1401_1301", "SA1010" ,"SA1050")

		cQueryAprov := "COD_APROV=ISNULL(																								"
		cQueryAprov += "(																												"
		cQueryAprov += "SELECT TOP 1 ZKQ_APROVT FROM "+ RetSqlName("ZKQ")+"																"
		cQueryAprov += "			WHERE                                                                                           	"
		cQueryAprov += "			ZKQ_STATUS		= 1		AND                                                                     	"
		cQueryAprov += "			D_E_L_E_T_		= ''	AND                                                                     	"
		cQueryAprov += "			CONVERT(date, GETDATE()) BETWEEN CONVERT(date, ZKQ_DTINI) AND CONVERT(date, ZKQ_DTFIM)          	"
		cQueryAprov += "			AND ZKQ_APROV = APROVADOR                                                                     		"
		cQueryAprov += ")																												"
		cQueryAprov += ", APROVADOR)																									"

		//cQueryAprov := " COD_APROV=APROVADOR "


		oGerenteAtendente	:= TGerenteAtendente():New()
		oResult 			:= oGerenteAtendente:GetCliente(SC5->C5_YEMP, SC5->C5_CLIENTE, SC5->C5_LOJACLI, SC5->C5_VEND1)

		cQueryUser := "	(                                                                           	    "
		cQueryUser += "SELECT TOP 1 	A3_CODUSR 															"
		cQueryUser += "	FROM "+ RetSqlName("SA3")+" SA3		                                            	"
		cQueryUser += "	WHERE SA3.A3_COD 	= '"+oResult:cGerente+"'			                 			"
		cQueryUser += "	AND SA3.D_E_L_E_T_	= ''                                                         	"
		cQueryUser += "	)						                                                        	"


		cQuery += "SELECT "+cQueryAprov+",																	"
		cQuery += " * FROM (																				"

		cQuery += "SELECT APROVADOR=CASE WHEN ZKJ_ORIAPR = '1' THEN ZKJ_APROV ELSE "+cQueryUser+" END,		"
		cQuery += " * FROM (																				"

		If(!Empty(cRegraM))

			cQuery += " SELECT  TIPO='M', *	 FROM "+ RetSqlName("ZKJ")+"									"
			cQuery += "			  WHERE ZKJ_CODZKK IN "+FormatIn(cRegraM, "/")+"							"
			cQuery += "			  AND D_E_L_E_T_ = ''                       								"

		EndIf

		If(!Empty(cRegraM) .And. !Empty(cRegraA))

			cQuery += "			  UNION ALL																	"

		EndIf


		If(!Empty(cRegraA))

			cQuery += " SELECT TIPO='A',*                                           						"
			cQuery += "			 FROM "+ RetSqlName("ZKJ")+"												"
			cQuery += "			 WHERE ZKJ_CODZKI IN "+FormatIn(cRegraA, "/")+"								"
			cQuery += "			 AND D_E_L_E_T_ = ''														"
		EndIf

		cQuery += ") A																						"
		cQuery += ") B																						"

		cQuery += " ORDER BY ZKJ_ORDEM, ZKJ_NIVEL DESC														"

		conout(cQuery)

		TcQuery cQuery New Alias (cAliasTmp)

		While !(cAliasTmp)->(Eof())

			cChave	:= (cAliasTmp)->COD_APROV+(cAliasTmp)->ZKJ_ORDEM

			cRegra	:= (cAliasTmp)->ZKJ_CODZKI

			If ((cAliasTmp)->TIPO <> 'A')
				DbSelectArea('ZKK')
				ZKK->(DbSetOrder(1))
				ZKK->(DbSeek(xFilial('ZKK')+(cAliasTmp)->ZKJ_CODZKK))
				cRegra	:= ZKK->ZKK_CODZKI
			EndIf

			nPos	:= AScan(aReg, {|x| AllTrim(x[1]) == AllTrim(cChave)})


			If (nPos < 1)

				//se mudou de ordem
				If (!Empty(cUltOrdem) .And. AllTrim(cUltOrdem) <> AllTrim((cAliasTmp)->ZKJ_ORDEM))

					//Verifica se ultimo Aprovador e igual atual
					If (AllTrim(aReg[Len(aReg)][2]) == AllTrim((cAliasTmp)->COD_APROV))

						(cAliasTmp)->(DbSkip())
						Loop

					EndIf

				EndIf

				Aadd(aReg, ;
					{;
					(cAliasTmp)->COD_APROV+(cAliasTmp)->ZKJ_ORDEM,;
					(cAliasTmp)->COD_APROV,;
					(cAliasTmp)->ZKJ_ORDEM,;
					(cAliasTmp)->ZKJ_NIVEL,;
					cRegra,;
					(cAliasTmp)->ZKJ_ENVEM;
					};
					)


			Else

				aReg[nPos][4] := (cAliasTmp)->ZKJ_NIVEL

				aReg[nPos][5] := aReg[nPos][5] +"/"+cRegra

			EndIf


			cUltOrdem := (cAliasTmp)->ZKJ_ORDEM


			(cAliasTmp)->(DbSkip())

		EndDo()

		(cAliasTmp)->(DbCloseArea())


		//salva as regras
		For nI=1 To Len (aReg)

			Reclock("ZKL", .T.)

			ZKL->ZKL_FILIAL		:= xFilial('ZKL')
			ZKL->ZKL_PEDIDO		:= SC5->C5_NUM
			ZKL->ZKL_APROV		:= aReg[nI][2]
			ZKL->ZKL_ORDEM		:= aReg[nI][3]
			ZKL->ZKL_NIVEL		:= aReg[nI][4]
			ZKL->ZKL_REGRA		:= aReg[nI][5]
			ZKL->ZKL_ENVEM		:= aReg[nI][6]

			ZKL->ZKL_STATUS		:= '1'

			ZKL->(MsUnlock())

		Next nI

	EndIf

Return

Method GetQuerySC6() Class TBloqueioPedidoVenda

	Local cQuery		:= ""
	Local cFiltroExCl	:= ""
	Local cFiltroVer	:= ""
	Local cSA1			:= Iif(Alltrim(SC5->C5_YEMP) $ "0101_1401", "SA1010", "SA1050")
	Local cQueryDupli	:= ""
	Local cQueryCli		:= ""
	Local cQueryExEng	:= ""
	Local cQueryFormato	:= ""
	Local cQueryPallet	:= ""

//	cQueryFormato += " ISNULL("	+ CRLF
//	cQueryFormato += " ( SELECT TOP 1 ZZ6_VENPAL FROM "+RetSQLName("ZZ6")+" WHERE ZZ6_COD = SUBSTRING(MAX(C6_PRODUTO), 1, 2) " + CRLF
//	cQueryFormato += " AND ZZ6_FILIAL = '"+xFilial("ZZ6")+"' AND D_E_L_E_T_ = '' ) 	" + CRLF
//	cQueryFormato += " , '') FORMATO_P"+ CRLF
	cQueryFormato += "  PALETIZADO='N'"+ CRLF



	cQueryPallet += " FORMATO_P=CASE WHEN (																"+ CRLF
	cQueryPallet += " (SELECT count(*)  FROM																"+ CRLF
	cQueryPallet += " (SELECT PAL=  CASE WHEN (																"+ CRLF
	cQueryPallet +=	"		(cast((C6_QTDVEN) as decimal(15,2))/cast(B1_CONV as decimal(15,2)))				"+ CRLF
	cQueryPallet +=	"		% cast(B1_YDIVPA as decimal(15,2))                       		               	"+ CRLF
	cQueryPallet +=	"	  ) = 0 Or C6_QTDVEN = C6_YQTDSUG		           		 	                	    "+ CRLF
	cQueryPallet +=	"	 THEN 'S' ELSE 'N' END, 	   		                     	                     		"+ CRLF
	cQueryPallet +=	"	 FORMATO_P=ZZ6_VENPAL 	   		                     	                     		"+ CRLF
	cQueryPallet += " 	FROM "+RetSQLName("SC6")+" A 														"+ CRLF
	cQueryPallet += " 	JOIN "+RetSQLName("SB1")+" B on B1_COD = C6_PRODUTO AND B.D_E_L_E_T_	= ''		"+ CRLF
	cQueryPallet += " 	JOIN "+RetSQLName("ZZ6")+" C on ZZ6_COD = SUBSTRING(C6_PRODUTO, 1, 2) AND C.D_E_L_E_T_	= ''		"+ CRLF
	cQueryPallet += " 	WHERE 	C6_FILIAL	= '"+xFilial("SC6")+"' 											"+ CRLF
	cQueryPallet += " 	AND C6_NUM 			= '"+::cNumPed+"' 												"+ CRLF
	cQueryPallet += " 	AND A.D_E_L_E_T_ 	= '' 															"+ CRLF
	cQueryPallet += " 	AND A.C6_BLQ	 	= '' 															"+ CRLF
	cQueryPallet += " )AA where PAL 		= 'N'	 AND FORMATO_P = 'S' 									"+ CRLF
	cQueryPallet += " 	 )	> 0																				"+ CRLF
	cQueryPallet += " 	)    																				"+ CRLF
	cQueryPallet += " 	THEN 'S' ELSE 'N' END 	     														"+ CRLF

	conout(cQueryPallet)

	cQueryDupli += " ISNULL((																			"+ CRLF
	cQueryDupli += " select TOP 1 F4_DUPLIC from "+RetSQLName("SF4")+" 									"+ CRLF
	cQueryDupli += " where 																				"+ CRLF
	cQueryDupli += " F4_CODIGO = MAX(C6_TES)															"+ CRLF
	cQueryDupli += " AND F4_FILIAL = '"+xFilial("SF4")+"' 												"+ CRLF
	cQueryDupli += " AND D_E_L_E_T_ = ''																"+ CRLF
	cQueryDupli += " ), '') DUPLIC																		"+ CRLF

	cQueryCli += " ISNULL((																				"+ CRLF
	cQueryCli += " select TOP 1 A1_COND  from 	"+cSA1+"												"+ CRLF
	cQueryCli += " where 																				"+ CRLF
	cQueryCli += "	A1_COD+A1_LOJA = MAX(C6_CLI)+MAX(C6_LOJA)											"+ CRLF
	cQueryCli += "	AND A1_FILIAL = '"+xFilial("SA1")+"' 												"+ CRLF
	cQueryCli += "	AND D_E_L_E_T_ = '' 																"+ CRLF
	cQueryCli += " ), '') CODPAG,																		"+ CRLF

	cQueryCli += " ISNULL((																				"+ CRLF
	cQueryCli += " select TOP 1 A1_YTPSEG  from 	"+cSA1+"											"+ CRLF
	cQueryCli += " where 																				"+ CRLF
	cQueryCli += "	A1_COD+A1_LOJA = MAX(C6_CLI)+MAX(C6_LOJA)											"+ CRLF
	cQueryCli += "	AND A1_FILIAL = '"+xFilial("SA1")+"' 												"+ CRLF
	cQueryCli += "	AND D_E_L_E_T_ = '' 																"+ CRLF
	cQueryCli += " ), '') TPSEG																			"+ CRLF

	cFiltroVer := " 0 DVER, 0 DACO	 																	"+ CRLF
	If SC6->(FieldPos("C6_YDACO")) > 0
		cFiltroVer := " MAX(C6_YDVER) DVER, MAX(C6_YDACO) DACO 											"+ CRLF
	EndIf

	cFiltroExCl := " 'N' BLOQ_EXCL 																		"+ CRLF
	If (SB1->(FieldPos("B1_YEXCL"))) > 0

		cFiltroExCl := " CASE WHEN (SELECT COUNT(*) 													"+ CRLF
		cFiltroExCl += " 	FROM "+RetSQLName("SC6")+" A 												"+ CRLF
		cFiltroExCl += " 	JOIN "+RetSQLName("SB1")+" B on B1_COD = C6_PRODUTO 						"+ CRLF
		cFiltroExCl += " 	JOIN (SELECT A1_FILIAL, A1_COD, A1_LOJA, A1_YCAT, A1_YGALERI				"+ CRLF
		cFiltroExCl += " 			FROM "+cSA1+" 														"+ CRLF
		cFiltroExCl += " 			WHERE D_E_L_E_T_='') C on A1_COD = C6_CLI and A1_LOJA = C6_LOJA 	"+ CRLF
		cFiltroExCl += " 	WHERE 	C6_FILIAL	= '"+xFilial("SC6")+"' 									"+ CRLF
		cFiltroExCl += " 	AND C6_NUM 			= '"+::cNumPed+"' 										"+ CRLF
		cFiltroExCl += " 	AND B1_YEXCL 		= 'E' AND A1_YCAT <> 'LOJA ESPEC'						"+ CRLF
		cFiltroExCl += " 	AND A1_YGALERI 		NOT IN ('T', 'A', 'L')									"+ CRLF
		cFiltroExCl += " 	AND A.D_E_L_E_T_ 	= '' 													"+ CRLF
		cFiltroExCl += " 	AND A.C6_BLQ	 	= '' 													"+ CRLF

		cFiltroExCl += " 	AND B.D_E_L_E_T_= '') > 0 THEN 'S' ELSE 'N' END BLOQ_EXCL 					"+ CRLF

	EndIf



	cQueryExEng := " CASE WHEN (SELECT COUNT(*) 													"+ CRLF
	cQueryExEng += " 	FROM "+RetSQLName("SC6")+" A 												"+ CRLF
	cQueryExEng += " 	JOIN "+RetSQLName("SB1")+" B on B1_COD = C6_PRODUTO 						"+ CRLF
	cQueryExEng += " 	JOIN (SELECT A1_FILIAL, A1_COD, A1_LOJA, A1_YTPSEG 							"+ CRLF
	cQueryExEng += " 			FROM "+cSA1+" 														"+ CRLF
	cQueryExEng += " 			WHERE D_E_L_E_T_='') C on A1_COD = C6_CLI and A1_LOJA = C6_LOJA 	"+ CRLF
	cQueryExEng += " 	WHERE 	C6_FILIAL	= '"+xFilial("SC6")+"' 									"+ CRLF
	cQueryExEng += " 	AND C6_NUM 			= '"+::cNumPed+"' 										"+ CRLF
	cQueryExEng += " 	AND B1_YEXCL 		= 'H' AND A1_YTPSEG <> 'E'								"+ CRLF
	cQueryExEng += " 	AND A.D_E_L_E_T_ 	= '' 													"+ CRLF
	cQueryExEng += " 	AND A.C6_BLQ	 	= '' 													"+ CRLF
	cQueryExEng += " 	AND B.D_E_L_E_T_= '') > 0 THEN 'S' ELSE 'N' END BLOQ_EXENG 					"+ CRLF

	//Calcula Media do Desconto Padrão e Realizada - Gravação de Campos legados no SC5
	//Campos para usar nas formulas das regras de bloqueio comercial - tabela ZA9

	cQuery +=" SELECT 	DESCORI = CASE WHEN SUM(C6_YPRCTAB*C6_QTDVEN) > 0 THEN ISNULL(ROUND(SUM(C6_YDESCLI*(C6_YPRCTAB*C6_QTDVEN))/SUM(C6_YPRCTAB*C6_QTDVEN),2),0) ELSE 0 END,	"+ CRLF
	cQuery +=" DESCREA = CASE WHEN SUM(C6_YPRCTAB*C6_QTDVEN) > 0 THEN ISNULL(ROUND(SUM(C6_YDESC*(C6_YPRCTAB*C6_QTDVEN))/SUM(C6_YPRCTAB*C6_QTDVEN),2),0) ELSE 0 END, 			"+ CRLF
	cQuery +=" ISNULL(SUM(C6_VALDESC),0) AS DESCINC,																															"+ CRLF
	cQuery +=" ISNULL(MAX(SUBSTRING(C6_PRODUTO,8,1)),0) AS CLASSE,                                                       														"+ CRLF
	cQuery +=" '"+cEmpAnt+"' AS EMPRESA,                                                                                 														"+ CRLF
	cQuery +=" PRODPA = CASE WHEN SUBSTRING(MAX(C6_PRODUTO),1,1) >= 'A' THEN 1 ELSE 0 END,                               														"+ CRLF
	cQuery +=" MAX(C6_YDESP) DESCONTO,                                                                                   														"+ CRLF
	cQuery +=" MARGEM = CASE WHEN SUM(C6_VALOR) > 0 THEN SUM(C6_VALOR*C6_YPERCMC)/SUM(C6_VALOR) ELSE 0 END,              														"+ CRLF
	cQuery +=" SUM(C6_QTDVEN) VOLUME,                                                                                    														"+ CRLF
	cQuery +=" MAX(C6_YMOTREJ) MOTREJ,
	cQuery +=" MAX(C6_YMOTFRA) MOTFRA,


	cQuery +=" CASE WHEN EXISTS(                                                                                         														"+ CRLF
	cQuery +="	SELECT 1 FROM "+RetSQLName("ZA6")+" ZA6 WHERE ZA6_RODAPE in                                                       												"+ CRLF
	cQuery +="	(                                                                                                       														"+ CRLF
	cQuery +="			SELECT C6_PRODUTO FROM "+RetSQLName("SC6")+" X where X.C6_NUM = '"+::cNumPed+"' and X.D_E_L_E_T_= ''       												"+ CRLF
	cQuery +="	) AND ZA6.D_E_L_E_T_= '' ) THEN 'S' ELSE 'N' END RODAPE                                                   														"+ CRLF
	cQuery +=" , "+cFiltroVer+"													                                        													"+ CRLF
	cQuery +=" , "+cFiltroExCl+"                                                                                          "+ CRLF
	cQuery +=" , "+cQueryDupli+"                                                                                          "+ CRLF
	cQuery +=" , "+cQueryCli+"                                                                                            "+ CRLF
	cQuery +=" , "+cQueryExEng+"																																													"+ CRLF
	cQuery +=" , "+cQueryPallet+"                                                                                         "+ CRLF
	cQuery +=" , "+cQueryFormato+"                                                                                      	"+ CRLF

	cQuery +=" FROM "+RetSQLName("SC6")+"                                                                                          												"+ CRLF
	cQuery +=" WHERE 	C6_FILIAL	='"+xFilial("SC6")+"' 	AND                                                             													"+ CRLF
	cQuery +=" C6_NUM 				= '"+::cNumPed+"' 		AND                                                                     											"+ CRLF
	cQuery +=" D_E_L_E_T_ 			= '' 					                                                                    												"+ CRLF
	cQuery +=" AND C6_BLQ <> 'R'					                                                                    														"+ CRLF

	Conout(cQuery)



Return cQuery




//Valida a regra se o pedido tiver AI se for acordo galeria = AG
User Function fValAG(C5YNUMSI)

	Local lRet := .F.
	Local cSql := ""
	Local cAliaSZO 	:= GetNextAlias()

	// Somente a bianco gera AO e AI no momento até 06-08-2021.
	cSql += " SELECT  *  " + CRLF
	cSql += " FROM SZO010  " + CRLF
	cSql += " where ZO_FILIAL = '01' " + CRLF
	cSql += " AND   ZO_SI  = '"+C5YNUMSI+"'     " + CRLF
	cSql += " AND  ZO_YTPACOR = 'AG'  "+ CRLF
	cSql += " and D_E_L_E_T_ = ''     "+ CRLF

	TcQuery cSql New Alias (cAliaSZO)

	IF (!(cAliaSZO)->(Eof()))
		lRet := .T.
	EndIf

	(cAliaSZO)->(DbCloseArea())

Return(lRet)