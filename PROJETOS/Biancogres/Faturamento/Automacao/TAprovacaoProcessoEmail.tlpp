#Include "TOTVS.CH"
#Include "Protheus.CH"
#Include "TOPCONN.CH"

/*/{Protheus.doc} TAprovacaoProcessoEmail
@description 
Projeto Ciclo do Pedido - Classe Generica que pode ser usada por qualquer processo que precise de Decisao por E-mail
Necessario fazer Heranca da Classe
@author Pedro Henrique / Facile Sistemas
@since 09/07/2019
@version 1.0
@type class
/*/
Class TAprovacaoProcessoEmail From LongClassName

Public Data cEmp				as character
Public Data cFil				as character
Public Data cTabela				as character
Public Data cProcesso			as character
Public Data cAprovador			as character
Public Data cEmail				as character
Public Data cId					as character

Public Data dDataEnv			as date
Public Data dDataRecebimento	as date
Public Data cChave				as character
Public Data cStatus				as character
Public Data cAssunto			as character

Public Data oMailManager
Public Data oMailMessage

Public Data cServidorSMTP
Public Data nPortaSMPT
Public Data cContaEnvio
Public Data cSenhaEnvio
Public Data cEmailEnvio

Public Data cServidorMail
Public Data nPortaMail
Public Data cContaRecebimento
Public Data cSenhaRecebimento
Public Data lUseTLS
Public Data lUseSSL
Public Data lUseAUT

Public Data cAcaoResposta

//metodos publicos	
Public Method New() Constructor
Public Method Incluir()
Public Method Enviar()
Public Method Receber()
Public Method AtualizaRecebimento()	
Public Method Existe()
Public Method ValidaEmail()
Public Method GetHtml()
Public Method GetChaveMsg()
Public Method Aprovar()
Public Method Recusar()
Public Method GetHtmlBody()	
Public Method ProcessaResposta()	

EndClass

Method New () Class TAprovacaoProcessoEmail

	//dados email
	::oMailManager 			:= TMailManager():New()
	::oMailMessage 			:= TMailMessage():New()

	::cServidorSMTP 		:= ""
	::nPortaSMPT			:= 0
	::cContaEnvio 			:= ""
	::cSenhaEnvio 			:= ""
	::cEmailEnvio 			:= ""
	::lUseTLS 				:= GetMv("MV_RELTLS")
	::lUseSSL 				:= GetMv("MV_RELSSL")
	::lUseAUT 				:= GetMv("MV_RELAUTH")

	::cServidorMail 		:= ""
	::nPortaMail			:= 0
	::cContaRecebimento 	:= ""
	::cSenhaRecebimento 	:= ""

	::cAssunto 				:= ""

Return

Method Incluir() Class TAprovacaoProcessoEmail 

	If !::Existe()

		RecLock("ZKH", .T.)

		ZKH->ZKH_FILIAL		:= xFilial("ZKH")
		ZKH->ZKH_EMP 		:= ::cEmp
		ZKH->ZKH_FIL 		:= ::cFil
		ZKH->ZKH_TABELA		:= ::cTabela
		ZKH->ZKH_PROCES		:= ::cProcesso
		ZKH->ZKH_APROV 		:= ::cAprovador
		ZKH->ZKH_EMAIL 		:= ::cEmail
		ZKH->ZKH_CHAVE 		:= ::cChave		
		ZKH->ZKH_DATAEN 	:= dDataBase
		ZKH->ZKH_STATUS 	:= "E"
		ZKH->ZKH_ID		 	:= ::cId

		ZKH->(MsUnlock())

	EndIf

Return()


Method AtualizaRecebimento() Class TAprovacaoProcessoEmail

	If ::Existe()

		RecLock("ZKH", .F.)

		ZKH->ZKH_DATREC := dDataBase
		ZKH->ZKH_STATUS := "R"

		ZKH->(MsUnlock())

	EndIf

Return()

Method Existe() Class TAprovacaoProcessoEmail

	Local lRet := .F.

	If !Empty(::cChave)
		DbSelectArea("ZKH")
		ZKH->(DbSetOrder(1))

		If (ZKH->(DbSeek(xFilial("ZKH")+::cChave)))
			lRet := .T.
		EndIf

	EndIf

Return(lRet)


Method Enviar() Class TAprovacaoProcessoEmail

	Local nRetEnv	:= Nil

	//TICKET 23728 - ocorreu alguma mudanca no servidor de email que passou a nao aceitar poerta 25 - mudando para 587	
	::oMailManager:SetUseTLS(::lUseTLS)
	::oMailManager:SetUseSSL(::lUseSSL)
	::oMailManager:Init("", ::cServidorSMTP, ::cContaEnvio, ::cSenhaEnvio)		

	::oMailManager:SetSmtpTimeOut(60)

	If (::oMailManager:SmtpConnect() == 0)

		If ::lUseAUT 
			nRetEnv := ::oMailManager:SmtpAuth(::cContaEnvio, ::cSenhaEnvio)
		Else
			nRetEnv := 0
		EndIf

		If nRetEnv == 0

			::cChave := Upper(HMAC(cEmpAnt + cFilAnt + ::cTabela + ::cProcesso + ::cID, "Bi@nCoGrEs", 1))

			::oMailMessage := TMailMessage():New()
			::oMailMessage:Clear() 

			::oMailMessage:cFrom		:= ::cContaEnvio
			::oMailMessage:cTo 			:= ::cEmail

			::oMailMessage:cCc 			:= ""
			::oMailMessage:cBcc 		:= ""
			::oMailMessage:cSubject 	:= ::GetAssunto() 			
			::oMailMessage:cBody 		:= ::GetHtml()

			nRetEnv := ::oMailMessage:Send( ::oMailManager )
			If (nRetEnv != 0)

				ConOut( "TAprovacaoProcessoEmail:Enviar() => ERRO ao enviar e-mail: " + ::oMailManager:GetErrorString( nRetEnv ) )

			Else

				ConOut(cValToChar(dDataBase) +"-"+ Time() + " -- TAprovacaoProcessoEmail:Enviar() -- Empresa: "+ cEmpAnt +" -- Processo: "+ ::cProcesso + " -- Chave: "+::cChave+" -- Email: " + ::oMailMessage:cTo)
				::Incluir()

			EndIf
		
		Else
		
			ConOut( "TAprovacaoProcessoEmail:Enviar() => ERRO ao autenticar: " + str(nRetEnv,6), ::oMailManager:GetErrorString( nRetEnv ) )

		EndIf

		::oMailManager:SmtpDisconnect()

	EndIf

Return()


Method Receber() Class TAprovacaoProcessoEmail

	Local nMsg 		:= 0
	Local nTotMsg	:= 0 
	Local _nRet		:= 0

	::oMailManager:SetUseSSL(::lUseSSL)
	::oMailManager:Init(::cServidorMail, "", ::cContaRecebimento, ::cSenhaRecebimento)
	::oMailManager:SetPopTimeOut(60)  

	ConOut( "TAprovacaoProcessoEmail:Receber() => Iniciando conexão com "+::cServidorMail+", "+::cContaRecebimento+" " )

	_nRet := ::oMailManager:PopConnect()

	If (_nRet == 0)

		::oMailManager:GetNumMsgs(@nTotMsg)	  

		For nMsg := 1 To nTotMsg

			::oMailMessage:Clear()

			::oMailMessage:Receive(::oMailManager, nMsg)	    	    	     	    	    

			ConOut(cValToChar(dDataBase) +"-"+ Time() + " -- TAprovacaoProcessoEmail:Receber()")

			//recuperar chave da mensagem
			::GetChaveMsg()

			If (::ValidaEmail())

				::AtualizaRecebimento()
				::ProcessaResposta()

			EndIf

			::oMailManager:DeleteMsg(nMsg)	    

		Next

		::oMailManager:POPDisconnect()

	Else

		ConOut( "TAprovacaoProcessoEmail:Receber() => ERRO ao conectar com servidor POP: " + ::oMailManager:GetErrorString( _nRet ) )

	EndIf

Return()


Method ValidaEmail() Class TAprovacaoProcessoEmail

	Local lRet 			:= .F.
	Local aEmails		:= {}
	Local nI			:= 0

	If ::Existe()	

		If (ZKH->ZKH_STATUS == "E" )

			aEmails := StrToKArr(AllTrim(ZKH->ZKH_EMAIL),";")

			For nI := 1 To Len(aEmails)

				If (Lower(AllTrim(aEmails[nI])) $ Lower(::oMailMessage:cFrom))

					lRet := .T.

				EndIf

			Next nI

		EndIf

	EndIf

Return(lRet)


Method GetHtml() Class TAprovacaoProcessoEmail

	Local cRet := ""

	cRet := '<!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
	cRet += '<html xmlns="http://www.w3.org/1999/xhtml">
	cRet += '<head>
	cRet += ' <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
	cRet += ' <title>Workflow</title>
	cRet += '</head>
	cRet += '<body>	

	cRet += ::GetHtmlBody()	

	cRet += '</body>
	cRet += '</html>

Return(cRet)


Method GetChaveMsg() Class TAprovacaoProcessoEmail

	If 'KEY:' $ ::oMailMessage:cSubject

		::cChave := SubStr(AllTrim(::oMailMessage:cSubject), At('KEY:', ::oMailMessage:cSubject) + 3, 32)

	EndIf

	If 'ACTION:' $ ::oMailMessage:cSubject

		::cAcaoResposta := SubStr(AllTrim(::oMailMessage:cSubject), At('ACTION:', ::oMailMessage:cSubject) + 6, 7)

	EndIf		

Return()


Method ProcessaResposta() Class TAprovacaoProcessoEmail

Return()


Method Aprovar() Class TAprovacaoProcessoEmail

Return()


Method Recusar() Class TAprovacaoProcessoEmail

Return()


Method GetHtmlBody() Class TAprovacaoProcessoEmail
	Local cHtml 		:= ""

Return(cHtml)
