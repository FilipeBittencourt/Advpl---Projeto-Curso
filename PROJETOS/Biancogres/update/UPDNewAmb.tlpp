#include "totvs.ch"

/*/{Protheus.doc} UPDNewAmb
@author Marinaldo de Jesus
@since 26/02/2021
@project FIDC
@version 1.0
@description "Atualizacao do Ambiente de Desenvolvimento"
@type Function
/*/

#DEFINE SIMPLES Char( 39 )
#DEFINE DUPLAS  Char( 34 )

#DEFINE CSSBOTAO	"QPushButton { color: #024670; "+;
	"    border-image: url(rpo:fwstd_btn_nml.png) 3 3 3 3 stretch; "+;
	"    border-top-width: 3px; "+;
	"    border-left-width: 3px; "+;
	"    border-right-width: 3px; "+;
	"    border-bottom-width: 3px }"+;
	"QPushButton:pressed {	color: #FFFFFF; "+;
	"    border-image: url(rpo:fwstd_btn_prd.png) 3 3 3 3 stretch; "+;
	"    border-top-width: 3px; "+;
	"    border-left-width: 3px; "+;
	"    border-right-width: 3px; "+;
	"    border-bottom-width: 3px }"

Function u_UPDNewAmb( cEmpAmb, cFilAmb )

	Local   aSay      := {}
	Local   aButton   := {}
	Local   aMarcadas := {}
	Local   cTitulo   := "ATUALIZAÇÃO DE Ambiente de Teste/Desenvolvimento/Homologação"
	Local   cDesc1    := "UPDNewAmb "
	Local   cDesc2    := "Autor: Facile - Data: 26/02/2021 "
	Local   cDesc3    := ""
	Local   cDesc4    := "Descrição: ATUALIZAÇÃO DE Ambiente de Teste/Desenvolvimento/Homologação"
	Local   cDesc5    := " "
	Local   cMsg      := ""
	Local   lOk       := .F.
	Local   lAuto     := ( cEmpAmb <> NIL .or. cFilAmb <> NIL )

	Private oMainWnd  := NIL
	Private oProcess  := NIL

	#IFDEF TOP
		TCInternal( 5, "*OFF" ) // Desliga Refresh no Lock do Top
	#ENDIF

	__cInterNet := NIL
	__lPYME     := .F.

	Set Dele On

	aAdd( aSay, cDesc1 )
	aAdd( aSay, cDesc2 )
	aAdd( aSay, cDesc3 )
	aAdd( aSay, cDesc4 )
	aAdd( aSay, cDesc5 )

	aAdd(  aButton, {  1, .T., { || lOk := .T., FechaBatch() } } )
	aAdd(  aButton, {  2, .T., { || lOk := .F., FechaBatch() } } )

	lAuto:=.F.
	
	If lAuto
		lOk := .T.
	Else
		FormBatch(  cTitulo,  aSay,  aButton )
	EndIf

	If lOk

		If FindFunction( "MPDicInDB" ) .AND. MPDicInDB()
			cMsg := "Este update NÃO PODE ser executado neste Ambiente." + CRLF + CRLF + ;
				"Os arquivos de dicionários se encontram no Banco de Dados e este update está preparado " + ;
				"para atualizar apenas ambientes com dicionários no formato ISAM (.dbf ou .dtc)."

			If lAuto
				AutoGrLog( Replicate( "-", 128 ) )
				AutoGrLog( Replicate( " ", 128 ) )
				AutoGrLog( "LOG DA ATUALIZAÇÃO DOS DICIONÁRIOS" )
				AutoGrLog( Replicate( " ", 128 ) )
				AutoGrLog( Replicate( "-", 128 ) )
				AutoGrLog( Replicate( " ", 128 ) )
				AutoGrLog( cMsg )
				ConOut( DToC(Date()) + "|" + Time() + cMsg )
			Else
				MsgInfo( cMsg )
			EndIf

			Return NIL
		EndIf

		If lAuto
			aMarcadas :={{ cEmpAmb, cFilAmb, "" }}
		Else

			If !FWAuthAdmin()
				Final( "Atualização não Realizada." )
			EndIf

			aMarcadas := EscEmpresa()
		EndIf

		If !Empty( aMarcadas )
			If lAuto .OR. MsgNoYes( "Confirma a atualização dos Ambientes ?", cTitulo )
				
				oProcess := MsNewProcess():New( { | lEnd | MsProcess():ProcRedefine(@oProcess,nil,0,350,350,.T.,.T.), lOk := FSTProc( @lEnd, aMarcadas, lAuto ) }, "Atualizando", "Aguarde, atualizando ...", .F. )
				oProcess:Activate()

				If lAuto
					If lOk
						MsgStop( "Atualização Realizada.", "UPDNewAmb" )
					Else
						MsgStop( "Atualização não Realizada.", "UPDNewAmb" )
					EndIf
					dbCloseAll()
				Else
					If lOk
						Final( "Atualização Realizada." )
					Else
						Final( "Atualização não Realizada." )
					EndIf
				EndIf

			Else
				Final( "Atualização não Realizada." )

			EndIf

		Else
			Final( "Atualização não Realizada." )

		EndIf

	EndIf

Return NIL

Static Function FSTProc( lEnd, aMarcadas, lAuto )
	Local   aInfo     := {}
	Local   aRecnoSM0 := {}
	Local   cFile     := ""
	Local   cMask     := "Arquivos Texto" + "(*.TXT)|*.txt|"
	Local   cTexto    := ""
	Local   lOpen     := .F.
	Local   lRet      := .T.
	Local   nI        := 0
	Local   nPos      := 0
	Local   oDlg      := NIL
	Local   oFont     := NIL
	Local   oMemo     := NIL

	Private aArqUpd   := {}

	If ( lOpen := MyOpenSm0(.T.) )

		dbSelectArea( "SM0" )
		SM0->(dbGoTop())

		While SM0->( !EOF() )
			// Só adiciona no aRecnoSM0 se a empresa for diferente
			If aScan( aRecnoSM0, { |x| x[2] == SM0->M0_CODIGO } ) == 0 ;
					.AND. aScan( aMarcadas, { |x| x[1] == SM0->M0_CODIGO } ) > 0
				aAdd( aRecnoSM0, { Recno(), SM0->M0_CODIGO } )
			EndIf
			SM0->( dbSkip() )
		End

		SM0->( dbCloseArea() )

		If (lOpen)

			For nI := 1 To Len( aRecnoSM0 )

				If !( lOpen := MyOpenSm0(.T.) )
					MsgStop( "Atualização da empresa " + aRecnoSM0[nI][2] + " não efetuada." )
					Exit
				EndIf

				SM0->( dbGoTo( aRecnoSM0[nI][1] ) )

				RpcSetType( 3 )
				RpcSetEnv( SM0->M0_CODIGO, SM0->M0_CODFIL )
				if (type("__cInternet")=="C")
					&("__cInternet"):=nil
				endif

				lMsFinalAuto := .F.
				lMsHelpAuto  := .F.

				AutoGrLog( Replicate( "-", 128 ) )
				AutoGrLog( Replicate( " ", 128 ) )
				AutoGrLog( "LOG DA ATUALIZAÇÃO DOS DICIONÁRIOS" )
				AutoGrLog( Replicate( " ", 128 ) )
				AutoGrLog( Replicate( "-", 128 ) )
				AutoGrLog( " " )
				AutoGrLog( " Dados Ambiente" )
				AutoGrLog( " --------------------" )
				AutoGrLog( " Empresa / Filial...: " + cEmpAnt + "/" + cFilAnt )
				AutoGrLog( " Nome Empresa.......: " + Capital( AllTrim( GetAdvFVal( "SM0", "M0_NOMECOM", cEmpAnt + cFilAnt, 1, "" ) ) ) )
				AutoGrLog( " Nome Filial........: " + Capital( AllTrim( GetAdvFVal( "SM0", "M0_FILIAL" , cEmpAnt + cFilAnt, 1, "" ) ) ) )
				AutoGrLog( " DataBase...........: " + DtoC( Date() ) )
				AutoGrLog( " Data / Hora Ínicio.: " + DtoC( Date() )  + " / " + Time() )
				AutoGrLog( " Environment........: " + GetEnvServer()  )
				AutoGrLog( " StartPath..........: " + GetSrvProfString( "StartPath", "" ) )
				AutoGrLog( " RootPath...........: " + GetSrvProfString( "RootPath" , "" ) )
				AutoGrLog( " Versão.............: " + GetVersao(.T.) )
				AutoGrLog( " Usuário TOTVS .....: " + __cUserId + " " +  cUserName )
				AutoGrLog( " Computer Name......: " + GetComputerName() )

				aInfo   := GetUserInfoArray()
				If ( nPos    := aScan( aInfo,{ |x,y| x[3] == ThreadId() } ) ) > 0
					AutoGrLog( " " )
					AutoGrLog( " Dados Thread" )
					AutoGrLog( " --------------------" )
					AutoGrLog( " Usuário da Rede....: " + aInfo[nPos][1] )
					AutoGrLog( " Estação............: " + aInfo[nPos][2] )
					AutoGrLog( " Programa Inicial...: " + aInfo[nPos][5] )
					AutoGrLog( " Environment........: " + aInfo[nPos][6] )
					AutoGrLog( " Conexão............: " + AllTrim( StrTran( StrTran( aInfo[nPos][7], Chr( 13 ), "" ), Chr( 10 ), "" ) ) )
				EndIf
				AutoGrLog( Replicate( "-", 128 ) )
				AutoGrLog( " " )

				If !lAuto
					AutoGrLog( Replicate( "-", 128 ) )
					AutoGrLog( "Empresa : " + SM0->M0_CODIGO + "/" + SM0->M0_NOME + CRLF )
				EndIf

				oProcess:SetRegua1(0)
				oProcess:IncRegua1(SM0->M0_CODIGO + " :: " + allTrim(SM0->M0_NOME))
				
				oProcess:SetRegua2(0)
				oProcess:IncRegua2("Atualizando MV_SPEDURL ...")
				
				FSAtuSX6()
				
				oProcess:IncRegua2("...")

				oProcess:SetRegua2(0)
				oProcess:IncRegua2("Atualizando MV_AMBIENT ...")
				MsAguarde({||FSAtuSPEDURL()},"Atualizando MV_AMBIENT ..." )
				
				oProcess:IncRegua2("...")

				oProcess:SetRegua2(0)
				oProcess:IncRegua2("Atualizando Tabela Z28 ...")
				MsAguarde({||FSAtuZ28()},"Atualizando Tabela Z28 ..." )
				
				oProcess:IncRegua2("...")

				oProcess:SetRegua2(0)
				oProcess:IncRegua2("Atualizando Tabela SA1 ...")
				MsAguarde({||FSAtuSA1()},"Atualizando Tabela SA1 ..." )
				
				oProcess:IncRegua2("...")

				oProcess:SetRegua2(0)
				oProcess:IncRegua2("Atualizando Tabela SA2 ...")
				MsAguarde({||FSAtuSA2()},"Atualizando Tabela SA2 ..." )
				
				oProcess:IncRegua2("...")

				AutoGrLog( Replicate( "-", 128 ) )
				AutoGrLog( " Data / Hora Final.: " + DtoC( Date() ) + " / " + Time() )
				AutoGrLog( Replicate( "-", 128 ) )

				RpcClearEnv()

			Next nI

			If !lAuto

				cTexto := LeLog()

				Define Font oFont Name "Mono AS" Size 5, 12

				Define MsDialog oDlg Title "Atualização concluida." From 3, 0 to 340, 417 Pixel

				@ 5, 5 Get oMemo Var cTexto Memo Size 200, 145 Of oDlg Pixel
				oMemo:bRClicked := { || AllwaysTrue() }
				oMemo:oFont     := oFont

				Define SButton From 153, 175 Type  1 Action oDlg:End() Enable Of oDlg Pixel // Apaga
				Define SButton From 153, 145 Type 13 Action ( cFile := cGetFile( cMask, "" ), If( cFile == "", .T., ;
					MemoWrite( cFile, cTexto ) ) ) Enable Of oDlg Pixel

				Activate MsDialog oDlg Center

			EndIf

		EndIf

	Else

		lRet := .F.

	EndIf

Return lRet

static function FSAtuSX6()

	local aParam
	local aSX6Query
	local cSX6Filter

	aSX6Query:=array(0)
	cSX6Filter:="X6_VAR='MV_SPEDURL'"
	
	MsAguarde({||FilBrowse("SX6",@aSX6Query,cSX6Filter)},"Cadastro de Parametros","Obtendo dados no SGBD...")
	
	SX6->(dbGoTop())
	while SX6->(!eof())
		oProcess:IncRegua2("Atualizando MV_SPEDURL ...")
		if ("MV_SPEDURL"$SX6->X6_VAR)
			if SX6->(RecLock("SX6",.F.))
				SX6->X6_CONTEUD:="http://hera:9999/"
				SX6->X6_CONTSPA:="http://hera:9999/"
				SX6->X6_CONTENG:="http://hera:9999/"
				SX6->(MsUnLock())
				AutoGrLog(CRLF+"MV_SPEDURL Atualizado com Sucesso :: " + "SX6 Empresa[" +&("cEmpAnt")+"] " + CRLF + Replicate( "-", 128 ) + CRLF )
			endif
		endif
		SX6->(dbSkip())
	end while

	dbSelectArea("SX6")
	SET FILTER TO
	SX6->(dbSetOrder(1))

	aParam:=Array(0)
	
	aAdd(aParam,"2") //MV_AMBNFCE
	aAdd(aParam,"1") //MV_MODNFCE
	aAdd(aParam,"3.00") //MV_VERNFCE

	evalBlock():EvalBlock({||StaticCall(SPEDNFE,TSSAtuSX6,aParam)},nil,.F.)

	__cUserID:="000000"
	cUsuario:="Administrador"
	PswOrder(2)
	PswSeek(AllTrim(cUsuario)) 

	evalBlock():EvalBlock({||SpedNFePar()},nil,.F.) //Nfe
	evalBlock():EvalBlock({||SpedNFePar('65')},nil,.F.) //NFCe
	evalBlock():EvalBlock({||SpedNFePar('67')},nil,.F.) //CteOs
	evalBlock():EvalBlock({||/*SpedCCePar(nil,.f.)*/},nil,.F.) //Eventos

	AutoGrLog( CRLF + "Final da Atualização" + " SX6" + CRLF + Replicate( "-", 128 ) + CRLF )

Return NIL

static function FSAtuSPEDURL()
	
	local cEmp			as character
	local cFil			as character
	local cQuery		as character

	local nTCLink		as numeric
	local nRpcType		as numeric
	local nConnection	as numeric

	nConnection:=AdvConnection()

	cEmp:=&("cEmpAnt")
	cFil:=&("cFilAnt")

	nRpcType:=3
	SetTopType("A")
	Connect(nil,.T.,@cEmp,@cFil,nRpcType,.F.)
	
	nTCLink:=AdvConnection()

	if (TCCanOpen("SPED000"))
		cQuery:="UPDATE SPED000 SET CONTEUDO='2' WHERE PARAMETRO='MV_AMBIENT'"
		if (TCSQLExec(cQuery)<0)
			AutoGrLog(CRLF+"Erro na Atualizacao do parametro MV_AMBIENT :: " + "SX6 Empresa[" +&("cEmpAnt")+"] " + CRLF + TCSQLError() + CRLF + Replicate( "-", 128 ) + CRLF )
		else
			AutoGrLog(CRLF+"MV_AMBIENT Atualizado com Sucesso :: " + "SX6 Empresa[" +&("cEmpAnt")+"] " + CRLF + Replicate( "-", 128 ) + CRLF )
		endif
	else
		AutoGrLog(CRLF+"Tabela SPED000 Não Encontrada :: " + "SX6 Empresa[" +&("cEmpAnt")+"] " + CRLF + Replicate( "-", 128 ) + CRLF )
	endif

	if (!nTCLink==nConnection)
		TCULink(nTCLink)
		TCSetConn(nTCLink)
	endif

	return()

static function FSAtuZ28()
	
	local cEmp			as character
	local cFil			as character
	local cQuery		as character
    local cTable        as character

	local nTCLink		as numeric
	local nRpcType		as numeric
	local nConnection	as numeric

	nConnection:=AdvConnection()

	cEmp:=&("cEmpAnt")
	cFil:=&("cFilAnt")

	nRpcType:=3
	SetTopType("A")
	Connect(nil,.T.,@cEmp,@cFil,nRpcType,.F.)
	
	nTCLink:=AdvConnection()

    cTable:=retFullName("Z28")
	if (TCCanOpen(cTable))
		if (ChkFile("Z28"))
			cQuery:="UPDATE "+cTable+" SET Z28_EMAIL=REPLACE(REPLACE(Z28_EMAIL,'@','&'),'.','!')"
			if (TCSQLExec(cQuery)<0)
				AutoGrLog(CRLF+"Erro na Atualizacao da Tabela "+cTable+" :: " + "Empresa[" +&("cEmpAnt")+"] " + CRLF + TCSQLError() + CRLF + Replicate( "-", 128 ) + CRLF )
			else
				AutoGrLog(CRLF+"Tabela "+cTable+" Atualizada com Sucesso :: " + "Empresa[" +&("cEmpAnt")+"] " + CRLF + Replicate( "-", 128 ) + CRLF )
			endif
			Z28->(dbCloseArea())
		else
			AutoGrLog(CRLF+"Tabela "+cTable+" Não Atualizada :: " + "Empresa[" +&("cEmpAnt")+"] " + CRLF + Replicate( "-", 128 ) + CRLF )
		endif
	else
		AutoGrLog(CRLF+"Tabela "+cTable+" Não Encontrada :: " + "Empresa[" +&("cEmpAnt")+"] " + CRLF + Replicate( "-", 128 ) + CRLF )
	endif

	if (!nTCLink==nConnection)
		TCULink(nTCLink)
		TCSetConn(nTCLink)
	endif

	return()

static function FSAtuSA1()
	
	local cEmp			as character
	local cFil			as character
	local cQuery		as character
    local cTable        as character
	local cWhere		as character

	local nTCLink		as numeric
	local nRpcType		as numeric
	local nConnection	as numeric

	nConnection:=AdvConnection()

	cEmp:=&("cEmpAnt")
	cFil:=&("cFilAnt")

	nRpcType:=3
	SetTopType("A")
	Connect(nil,.T.,@cEmp,@cFil,nRpcType,.F.)
	
	nTCLink:=AdvConnection()

    cTable:=retFullName("SA1")
	if (TCCanOpen(cTable))
        if (ChkFile("SA1"))
			cWhere:=""
			cQuery:="UPDATE "+cTable
			cQuery+="   SET A1_EMAIL=REPLACE(REPLACE(A1_EMAIL,'@','&'),'.','!')"
			if (SA1->(FieldPos("A1_YEMABOL")>0))
				cQuery+="      ,A1_YEMABOL=REPLACE(REPLACE(A1_YEMABOL,'@','&'),'.','!')"
				cWhere+=" OR A1_YEMABOL<>''
			endif
			if (SA1->(FieldPos("A1_YMAILNF")>0))
				cQuery+="      ,A1_YMAILNF=REPLACE(REPLACE(A1_YMAILNF,'@','&'),'.','!')" 
				cWhere+=" OR A1_YMAILNF<>' '"
			endif
			cQuery+=" WHERE A1_EMAIL<>''"
			cQuery+=cWhere
			if (TCSQLExec(cQuery)<0)
				AutoGrLog(CRLF+"Erro na Atualizacao da Tabela "+cTable+" :: " + "Empresa[" +&("cEmpAnt")+"] " + CRLF + TCSQLError() + CRLF + Replicate( "-", 128 ) + CRLF )
			else
				AutoGrLog(CRLF+"Tabela "+cTable+" Atualizada com Sucesso :: " + "Empresa[" +&("cEmpAnt")+"] " + CRLF + Replicate( "-", 128 ) + CRLF )
			endif
			SA1->(dbCloseArea())
		else
			AutoGrLog(CRLF+"Tabela "+cTable+" Não Atualizada :: " + "Empresa[" +&("cEmpAnt")+"] " + CRLF + Replicate( "-", 128 ) + CRLF )
		endif
	else
		AutoGrLog(CRLF+"Tabela "+cTable+" Não Encontrada :: " + "Empresa[" +&("cEmpAnt")+"] " + CRLF + Replicate( "-", 128 ) + CRLF )
	endif

	if (!nTCLink==nConnection)
		TCULink(nTCLink)
		TCSetConn(nTCLink)
	endif

	return()	

static function FSAtuSA2()
	
	local cEmp			as character
	local cFil			as character
	local cQuery		as character
    local cTable        as character
	local cWhere		as character

	local nTCLink		as numeric
	local nRpcType		as numeric
	local nConnection	as numeric

	nConnection:=AdvConnection()

	cEmp:=&("cEmpAnt")
	cFil:=&("cFilAnt")

	nRpcType:=3
	SetTopType("A")
	Connect(nil,.T.,@cEmp,@cFil,nRpcType,.F.)
	
	nTCLink:=AdvConnection()

    cTable:=retFullName("SA2")
	if (TCCanOpen(cTable))
        if (ChkFile("SA2"))
			cWhere:=""
			cQuery:="UPDATE "+cTable
			cQuery+="   SET A2_EMAIL=REPLACE(REPLACE(A2_EMAIL,'@','&'),'.','!')"
			if (SA2->(FieldPos("A2_YEMAFIN")>0))
				cQuery+="      ,A2_YEMAFIN=REPLACE(REPLACE(A2_YEMAFIN,'@','&'),'.','!')"
				cWhere+=" OR A2_YEMAFIN<>'' "
			endif
			cQuery+=" WHERE A2_EMAIL<>''"
			cQuery+=cWhere
			if (TCSQLExec(cQuery)<0)
				AutoGrLog(CRLF+"Erro na Atualizacao da Tabela "+cTable+" :: " + "Empresa[" +&("cEmpAnt")+"] " + CRLF + TCSQLError() + CRLF + Replicate( "-", 128 ) + CRLF )
			else
				AutoGrLog(CRLF+"Tabela "+cTable+" Atualizada com Sucesso :: " + "Empresa[" +&("cEmpAnt")+"] " + CRLF + Replicate( "-", 128 ) + CRLF )
			endif
			SA2->(dbCloseArea())
		else
			AutoGrLog(CRLF+"Tabela "+cTable+" Não Atualizada :: " + "Empresa[" +&("cEmpAnt")+"] " + CRLF + Replicate( "-", 128 ) + CRLF )
		endif
	else
		AutoGrLog(CRLF+"Tabela "+cTable+" Não Encontrada :: " + "Empresa[" +&("cEmpAnt")+"] " + CRLF + Replicate( "-", 128 ) + CRLF )
	endif

	if (!nTCLink==nConnection)
		TCULink(nTCLink)
		TCSetConn(nTCLink)
	endif

	return()	

Static Function EscEmpresa()

	Local   aRet      := {}
	Local   aSalvAmb  := GetArea()
	Local   aSalvSM0  := {}
	Local   aVetor    := {}
	Local   cMascEmp  := "??"
	Local   cVar      := ""
	Local   lChk      := .F.
*	Local   lOk       := .F.
	Local   lTeveMarc := .F.
	Local   oNo       := LoadBitmap( GetResources(), "LBNO" )
	Local   oOk       := LoadBitmap( GetResources(), "LBOK" )
	Local   oDlg, oChkMar, oLbx, oMascEmp, oSay
	Local   oButDMar, oButInv, oButMarc, oButOk, oButCanc

	Local   aMarcadas := {}

	If !MyOpenSm0(.T.)
		Return aRet
	EndIf

	dbSelectArea( "SM0" )
	aSalvSM0 := SM0->( GetArea() )
	dbSetOrder( 1 )
	dbGoTop()

	While !SM0->( EOF() )

		If aScan( aVetor, {|x| x[2] == SM0->M0_CODIGO} ) == 0
			aAdd(  aVetor, { aScan( aMarcadas, {|x| x[1] == SM0->M0_CODIGO .and. x[2] == SM0->M0_CODFIL} ) > 0, SM0->M0_CODIGO, SM0->M0_CODFIL, SM0->M0_NOME, SM0->M0_FILIAL } )
		EndIf

		dbSkip()
	End

	RestArea( aSalvSM0 )

	Define MSDialog  oDlg Title "" From 0, 0 To 280, 395 Pixel

	oDlg:cToolTip := "Tela para Múltiplas Seleções de Empresas/Filiais"

	oDlg:cTitle   := "Selecione a(s) Empresa(s) para Atualização"

	@ 10, 10 Listbox  oLbx Var  cVar Fields Header " ", " ", "Empresa" Size 178, 095 Of oDlg Pixel
	oLbx:SetArray(  aVetor )
	oLbx:bLine := {|| {IIf( aVetor[oLbx:nAt, 1], oOk, oNo ), ;
		aVetor[oLbx:nAt, 2], ;
		aVetor[oLbx:nAt, 4]}}
	oLbx:BlDblClick := { || aVetor[oLbx:nAt, 1] := !aVetor[oLbx:nAt, 1], VerTodos( aVetor, @lChk, oChkMar ), oChkMar:Refresh(), oLbx:Refresh()}
	oLbx:cToolTip   :=  oDlg:cTitle
	oLbx:lHScroll   := .F. 

	@ 112, 10 CheckBox oChkMar Var  lChk Prompt "Todos" Message "Marca / Desmarca"+ CRLF + "Todos" Size 40, 007 Pixel Of oDlg;
		on Click MarcaTodos( lChk, @aVetor, oLbx )

	@ 113, 51 Say   oSay Prompt "Empresa" Size  40, 08 Of oDlg Pixel
	@ 112, 80 MSGet oMascEmp Var  cMascEmp Size  05, 05 Pixel Picture "@!"  Valid (  cMascEmp := StrTran( cMascEmp, " ", "?" ), oMascEmp:Refresh(), .T. ) ;
		Message "Máscara Empresa ( ?? )"  Of oDlg
	oSay:cToolTip := oMascEmp:cToolTip

	@ 128, 10 Button oButInv    Prompt "&Inverter"  Size 32, 12 Pixel Action ( InvSelecao( @aVetor, oLbx ), VerTodos( aVetor, @lChk, oChkMar ) )  Message "Inverter Seleção" Of oDlg
	oButInv:SetCss( CSSBOTAO )
	@ 128, 50 Button oButMarc   Prompt "&Marcar"    Size 32, 12 Pixel Action ( MarcaMas( oLbx, aVetor, cMascEmp, .T. ), VerTodos( aVetor, @lChk, oChkMar ) )  Message "Marcar usando" + CRLF + "máscara ( ?? )"    Of oDlg
	oButMarc:SetCss( CSSBOTAO )
	@ 128, 80 Button oButDMar   Prompt "&Desmarcar" Size 32, 12 Pixel Action ( MarcaMas( oLbx, aVetor, cMascEmp, .F. ), VerTodos( aVetor, @lChk, oChkMar ) ) Message "Desmarcar usando" + CRLF + "máscara ( ?? )" Of oDlg
	oButDMar:SetCss( CSSBOTAO )
	@ 112, 157  Button oButOk   Prompt "Processar"  Size 32, 12 Pixel Action (  RetSelecao( @aRet, aVetor ), IIf( Len( aRet ) > 0, oDlg:End(), MsgStop( "Ao menos um grupo deve ser selecionado", "UPDNewAmb" ) ) ) Message "Confirma a seleção e efetua" + CRLF + "o processamento" Of oDlg
	oButOk:SetCss( CSSBOTAO )
	@ 128, 157  Button oButCanc Prompt "Cancelar"   Size 32, 12 Pixel Action ( IIf( lTeveMarc, aRet :=  aMarcadas, .T. ), oDlg:End() ) Message "Cancela o processamento" + CRLF + "e abandona a aplicação" Of oDlg
	oButCanc:SetCss( CSSBOTAO )

	Activate MSDialog  oDlg Center

	RestArea( aSalvAmb )
	dbSelectArea( "SM0" )
	SM0->(dbCloseArea())

Return  aRet

Static Function MarcaTodos( lMarca, aVetor, oLbx )
	Local  nI := 0

	For nI := 1 To Len( aVetor )
		aVetor[nI][1] := lMarca
	Next nI

	oLbx:Refresh()

Return NIL

Static Function InvSelecao( aVetor, oLbx )
	Local  nI := 0

	For nI := 1 To Len( aVetor )
		aVetor[nI][1] := !aVetor[nI][1]
	Next nI

	oLbx:Refresh()

Return NIL

Static Function RetSelecao( aRet, aVetor )
	Local  nI    := 0

	aRet := {}
	For nI := 1 To Len( aVetor )
		If aVetor[nI][1]
			aAdd( aRet, { aVetor[nI][2] , aVetor[nI][3], aVetor[nI][2] +  aVetor[nI][3] } )
		EndIf
	Next nI

Return NIL

Static Function MarcaMas( oLbx, aVetor, cMascEmp, lMarDes )
	Local cPos1 := SubStr( cMascEmp, 1, 1 )
	Local cPos2 := SubStr( cMascEmp, 2, 1 )
	Local nPos  := oLbx:nAt
	Local nZ    := 0

	For nZ := 1 To Len( aVetor )
		If cPos1 == "?" .or. SubStr( aVetor[nZ][2], 1, 1 ) == cPos1
			If cPos2 == "?" .or. SubStr( aVetor[nZ][2], 2, 1 ) == cPos2
				aVetor[nZ][1] := lMarDes
			EndIf
		EndIf
	Next

	oLbx:nAt := nPos
	oLbx:Refresh()

Return NIL

Static Function VerTodos( aVetor, lChk, oChkMar )
	Local lTTrue := .T.
	Local nI     := 0

	For nI := 1 To Len( aVetor )
		lTTrue := IIf( !aVetor[nI][1], .F., lTTrue )
	Next nI

	lChk := IIf( lTTrue, .T., .F. )
	oChkMar:Refresh()

Return NIL

Static Function MyOpenSM0(lShared)
	Local lOpen := .F.
	Local nLoop := 0

	lShared := .T.

	If FindFunction( "_OpenSM0Excl" )
		For nLoop := 1 To 20
			If OpenSM0Excl(,.F.)
				lOpen := .T.
				Exit
			EndIf
			Sleep( 500 )
		Next nLoop
	Else
		For nLoop := 1 To 20
			dbUseArea( .T., , "SIGAMAT.EMP", "SM0", lShared, .F. )

			If !Empty( Select( "SM0" ) )
				lOpen := .T.
				dbSetIndex( "SIGAMAT.IND" )
				Exit
			EndIf
			Sleep( 500 )
		Next nLoop
	EndIf

	If !lOpen
		MsgStop( "Não foi possível a abertura da tabela " + ;
			IIf( lShared, "de empresas (SM0).", "de empresas (SM0) de forma exclusiva." ), "ATENÇÃO" )
	EndIf

Return lOpen

Static Function LeLog()
	Local cRet  := ""
	Local cFile := NomeAutoLog()
	Local cAux  := ""

	FT_FUSE( cFile )
	FT_FGOTOP()

	While !FT_FEOF()

		cAux := FT_FREADLN()

		If Len( cRet ) + Len( cAux ) < 1048000
			cRet += cAux + CRLF
		Else
			cRet += CRLF
			cRet += Replicate( "=" , 128 ) + CRLF
			cRet += "Tamanho de exibição maxima do LOG alcançado." + CRLF
			cRet += "LOG Completo no arquivo " + cFile + CRLF
			cRet += Replicate( "=" , 128 ) + CRLF
			Exit
		EndIf

		FT_FSKIP()
	End

	FT_FUSE()

Return cRet
