#include "totvs.ch"
#include "parmtype.ch"


class PSHtml2TXT

    static method PSHtml2TXT(cString as character) as character

end class

static method PSHtml2TXT(cString) class PSHtml2TXT

    local bError        as block
    local bErrorBlock   as block    

    local cCmd          as character
    local cReturn       as character
    local cPSFile       as character
    local cDecUTF8      as character
    local cPattern      as character
    local cFileGet      as character
    local cFilePut      as character
    local cPSScript     as character

    local nBegComments  as numeric
    local nEndComments  as numeric

    local oRegex        as character
    local otRegex       as object

    paramtype cString   as character

    bError:={|oError|break(oError) }
    bErrorBlock:=ErrorBlock(bError)

    begin sequence

        cPattern:="<[^>]+>\s+(?=<)|<[^>]+>"
        otRegex:=tRegex():New(cPattern)
        if (!otRegex:Search(cString))
            cReturn:=cString
            break
        endif

        begin sequence

            using namespace tlpp.regex
            
            oRegex:=Regex():New(cPattern)
            cReturn:=oRegex:Replace(cString,"")
            
            cPattern:="<!--[\s\S]*?-->"
            if (Regex():Matches(cPattern,cReturn))
                oRegex:setPattern(cPattern)
                cReturn:=oRegex:Replace(cReturn,"")
            endif

        recover

            cFileGet:=getTempPath()
            cFileGet+=DToS(date())
            cFileGet+="_"
            cFileGet+=strTran(Time(),":","")
            cFileGet+="_"
            cFileGet+=cValToChar(Seconds())
            cFileGet+="_"
            cFileGet+=strZero(Randomize(1,999),3)
            cFileGet+="_"
            cFileGet+="psregexget.txt"

            if (file(cFileGet))
                fErase(cFileGet)
            endif

            cFilePut:=getTempPath()
            cFileGet+=DToS(date())
            cFileGet+="_"
            cFileGet+=strTran(Time(),":","")
            cFileGet+="_"
            cFileGet+=cValToChar(Seconds())
            cFileGet+="_"
            cFileGet+=strZero(Randomize(1,999),3)
            cFileGet+="_"
            cFilePut+="psregexput.txt"

            if (file(cFilePut))
                fErase(cFilePut)
            endif

            cPSScript:=""

            //https://gist.github.com/jpoehls/2406504
            /*
            cPSScript+='# from https://gist.github.com/zommarin/1480974'+CRLF
            cPSScript+='function Get-FileEncoding($Path) {'+CRLF
            cPSScript+='    $bytes = [byte[]](Get-Content $Path -Encoding byte -ReadCount 4 -TotalCount 4)'+CRLF
            cPSScript+='    if(!$bytes) { return "utf8" }'+CRLF
            cPSScript+='    switch -regex ("{0:x2}{1:x2}{2:x2}{3:x2}" -f $bytes[0],$bytes[1],$bytes[2],$bytes[3]) {'+CRLF
            cPSScript+='        "^efbbbf"   { return "utf8" }'+CRLF
            cPSScript+='        "^2b2f76"   { return "utf7" }'+CRLF
            cPSScript+='        "^fffe"     { return "unicode" }'+CRLF
            cPSScript+='        "^feff"     { return "bigendianunicode" }'+CRLF
            cPSScript+='        "^0000feff" { return "utf32" }'+CRLF
            cPSScript+='        default     { return "ascii" }'+CRLF
            cPSScript+='    }'+CRLF
            cPSScript+='}'+CRLF
            cPSScript+='$Encoding=(dir "'+cFileGet+'" -File | select Name,@{Name="Encoding";Expression={Get-FileEncoding $_.FullName}} | ft -AutoSize)'+CRLF
            */
            
            cPSScript+='$Encoding="ASCII"'+CRLF
            cPSScript+='$String=get-content "'+cFileGet+'"'+CRLF
            cPSScript+='(((($String -replace "<[^>]+>\s+(?=<)|<[^>]+>", "" ) -replace "&nbsp;"," ")) -replace "<!--(?>[^-<>])(?>(?!-->)[-<>][^-<>])*-->", "") | out-file -FilePath "'+cFilePut+'" -Encoding $Encoding'+CRLF

            MemoWrite(cFileGet,cString)

            cPSFile:=getTempPath()
            cPSFile+=DToS(date())
            cPSFile+="_"
            cPSFile+=strTran(Time(),":","")
            cPSFile+="_"
            cPSFile+=cValToChar(Seconds())
            cPSFile+="_"
            cPSFile+=strZero(Randomize(1,999),3)
            cPSFile+="_"
            cPSFile+="PSHtml2TXT.ps1"
            MemoWrite(cPsFile,cPSScript)
            
            cCmd:='powershell -executionPolicy bypass  -file '+'"'+cPSFile+'"'
            
            WaitRun(cCmd)
            
            if (!file(cFilePut))
                cReturn:=cString
                break
            endif

            cReturn:=MemoRead(cFilePut)
            
            if ("-->"$cReturn)
                nBegComments:=AT("<!--",cReturn)
                nEndComments:=AT("-->",cReturn)
                if (nBegComments>0).and.(nEndComments>0)
                    nEndComments+=2
                    cReturn:=stuff(cReturn,nBegComments,nEndComments,"")
                    while ((nBegComments:=AT("<!--",cReturn))>0).and.((nEndComments:=AT("-->",cReturn))>0)
                        if (nBegComments>0).and.(nEndComments>0)
                            nEndComments+=2                        
                            cReturn:=stuff(cReturn,nBegComments,nEndComments,"")
                        endif
                    end while
                endif
            elseif (";}"$cReturn)
                nBegComments:=AT(";}",cReturn)
                nEndComments:=AT(";}",cReturn)
                if (nBegComments>0).and.(nEndComments>0)
                    nEndComments+=1
                    cReturn:=stuff(cReturn,1,nEndComments,"")
                    while ((nBegComments:=AT(";}",cReturn))>0).and.((nEndComments:=AT(";}",cReturn))>0)
                        if (nBegComments>0).and.(nEndComments>0)
                            nEndComments+=1                        
                            cReturn:=stuff(cReturn,1,nEndComments,"")
                        endif
                    end while
                endif
            endif
            
            cReturn:=AllTrim(cReturn)
            if (!empty(cReturn))
                cDecUTF8:=DecodeUTF8(cReturn)
                if (!Empty(cDecUTF8))
                    cReturn:=cDecUTF8
                endif
            endif

            fErase(cFilePut)
            fErase(cFileGet)

        end Sequence

    end sequence
    ErrorBlock(bErrorBlock)

    return(cReturn)
