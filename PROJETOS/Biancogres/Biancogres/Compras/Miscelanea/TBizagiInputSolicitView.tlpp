#INCLUDE "PROTHEUS.CH"
#INCLUDE "TOPCONN.CH"

/*/{Protheus.doc} TBizagiInputSolicitView
@author Wlysses Cerqueira (Facile)
@since 05/02/2020  
@project 
@version 1.0
@description 
@type function
/*/

User Function BIZINP()

    Local oObj := TBizagiInputSolicitView():New()

    Local aSays     := {}
    Local aButtons  := {}
    Local lConfirm  := .F.

    AADD(aSays, OemToAnsi("Este programa tem como objetivo gerar as solicitações"))
    AADD(aSays, OemToAnsi("de compra não importadas do BIZAGI."))
    AADD(aSays, OemToAnsi("Ticket: 24427"))

    //AADD(aButtons, { 5,.T.,{|| ::Pergunte() } } )
    AADD(aButtons, { 1,.T.,{|o| lConfirm := .T. , o:oWnd:End()}} )
    AADD(aButtons, { 2,.T.,{|o| o:oWnd:End() }} )

    FormBatch( OemToAnsi("Importação Solicitações BIZAGI"), aSays, aButtons ,,,500)

    If lConfirm

        Processa({ || oObj:InputSolicit() },"Aguarde...", "Processando solicitações...", .F.)

    EndIf

Return()

    Class _PDMCARACVAL

        Public Data Sequencia 	AS String
        Public Data Item		AS String

        Method New() Constructor

    EndClass

Method New() Class _PDMCARACVAL

Return()

    Class _PDMMARCA
        Public Data Marca	 	    AS String   //Passar o CODIGO da marca ZD8
        Public Data Referencia	    AS String
        Public Data InfAdicional	AS String

        Method New() Constructor

    EndClass

Method New() Class _PDMMARCA

Return()

    Class _NewProduct //LP
        Public Data Codigo      			AS STRING
        Public Data Grupo       			AS STRING
        Public Data Tipo        			AS STRING
        Public Data TipoBianco  			AS STRING
        Public Data Politica    			AS STRING
        Public Data Descricao   			AS STRING
        Public Data Unidade     			AS STRING
        Public Data LocalBianco 			AS STRING
        Public Data LocalIncesa 			AS STRING
        Public Data LocalPadrao 			AS STRING
        Public Data SegUm       			AS STRING
        Public Data Fator       			AS STRING
        Public Data MonoClassif 			AS STRING
        Public Data PecasCaixa  			AS INTEGER
        Public Data ConvPallets 			AS INTEGER
        Public Data Obs         			AS STRING
        Public Data Emissao     			AS Date
        Public Data TE					    AS STRING
        Public Data TS              		AS STRING
        Public Data Conta           		AS STRING
        Public Data NCM             		AS STRING
        Public Data ICMS            		AS STRING
        Public Data IPI             		AS STRING
        Public Data ISS             		AS STRING
        Public Data ICMRET          		AS STRING
        Public Data Origem          		AS STRING
        Public Data ClasFis         		AS STRING
        Public Data GrpTrib         		AS STRING
        Public Data ContaResult     		AS STRING
        Public Data ContaResultInd  		AS STRING
        Public Data ContaResultAdm  		AS STRING
        Public Data INSS            		AS STRING
        Public Data CNV52           		AS STRING
        Public Data TipoProdContab  		AS STRING
        Public Data AplicacaoDireta  	    AS STRING
        Public Data EhComum  			    AS STRING
        Public Data Item        			AS STRING
        Public Data Importado        	    AS STRING 	 //true ou false
        Public Data Anuente       	 	    AS STRING 	 //true ou false
        Public Data IsPDM        		    AS STRING
        Public Data GrupoPDM        		AS STRING
        Public Data SubgrupoPDM     		AS STRING
        Public Data FamiliaPDM      		AS STRING
        Public Data aPDMCaracteristicas	AS ARRAY //OF _PDMCARACVAL
        Public Data a_PDMMARCAs		   	    AS ARRAY //OF _PDMMARCA

        Method New() Constructor

    EndClass

Method New() Class _NewProduct

Return()

    Class _Cliente
        Public Data Codigo				AS String
        Public Data Loja				AS String
        Public Data Nome				AS String
        Public Data CnpjCpf			AS String
        Public Data TpPessoa			AS String
        Public Data NomeFant   		AS String
        Public Data TpCli				AS String
        Public Data EndTpLog			AS String
        Public Data EndDesc			AS String
        Public Data EndNum				AS String
        Public Data EndUF        		AS String
        Public Data EndCodMun			AS String
        Public Data EndMun       		AS String
        Public Data EndBairro    		AS String
        Public Data EndCep       		AS String
        Public Data EndPais   			AS String
        Public Data EndComplemento 	AS String
        Public Data Telefone     		AS String
        Public Data Fax				AS String
        Public Data Contato      		AS String
        Public Data InscEst      		AS String
        Public Data EmailNF      		AS String
        Public Data EmailCont    		AS String
        Public Data EmailCobr    		AS String
        Public Data HomePage	    	AS String
        Public Data TpPag        		AS String
        Public Data CobTpLog     		AS String
        Public Data CobEnd       		AS String
        Public Data CobNum       		AS String
        Public Data CobUF        		AS String
        Public Data CobMun       		AS String
        Public Data CobBairro    		AS String
        Public Data CobCep       		AS String
        Public Data EhContrib    		AS String
        Public Data EhCadExpres  		AS String
        Public Data BacenCodPais 		AS String
        Public Data Suframa			AS String
        Public Data CodMunZonaFranca 	AS String
        Public Data DescontoSuframa 	AS String
        Public Data FomeZero			AS String
        Public Data TpSeg				AS String
        Public Data Segmento			AS String
        Public Data TpLimite			AS String
        Public Data GrupoLimite		AS String
        Public Data TratEspecial 		AS String
        Public Data OBSRomaneio		AS String
        Public Data Avalia_Cliente		AS String
        Public Data LimiteCredito		AS String
        Public Data DataVencLimite   	AS String
        Public Data Risco				AS String
        Public Data CodRepresenBianco 	AS String
        Public Data CodRepresenIncesa 	AS String
        Public Data CodRepresenBellaCasa	AS String
        Public Data CodRepresenVitcer	    AS String
        Public Data CodRepresenMundialli	AS String
        Public Data ValComissBianco		AS String
        Public Data ValComissIncesa		AS String
        Public Data ValComissBellaCasa	    AS String
        Public Data ValComissVitcer		AS String
        Public Data ValComissMundialli 	AS String
        Public Data NumProcessoBizagi	    AS String
        Public Data TPJ 					AS String
        Public Data Categoria			    AS String

        Method New() Constructor

    EndClass

Method New() Class _Cliente

Return()

    Class _SolicCredito
        Public Data Codigo		    AS String
        Public Data DataSol		AS String
        Public Data HoraSol		AS String
        Public Data CodCliente	    AS String
        Public Data EhNovo		    AS String
        Public Data Pedido		    AS String
        Public Data TpPagamento	AS String
        Public Data CondPamento	AS String
        Public Data ObserSol		AS String
        Public Data Prazo		    AS String
        Public Data StatusSol	    AS String
        Public Data DataAprov	    AS String
        Public Data ObserAprov	    AS String
        Public Data Valor		    AS String
        Public Data EmpresaPed	    AS String
        Public Data Usuario		AS String
        Public Data NumBizagi		AS String

        Method New() Constructor

    EndClass

Method New() Class _SolicCredito

Return()

    Class _CabecSolicCompra
        Public Data Codigo 			AS String
        Public Data Empresa            AS STRING
        Public Data Filial 	        AS STRING
        Public Data Matricula			AS String
        Public Data NomeSolicitante    AS String
        Public Data DataEmissao		AS String
        Public Data DataAprovacao		AS String
        Public Data Necessidade		AS String
        Public Data Prioridade			AS String
        Public Data Contrato			AS String
        Public Data Melhoria			AS String
        Public Data CentroCusto		AS String
        Public Data Conta				AS String  //08/03/2016 - Luana Marin Ribeiro - esse campo foi retirado do cabecalho e colocado aqui, no item.
        Public Data ItemConta			AS String
        Public Data ClasseValor		AS String
        Public Data SituacaoAprovacao  AS String
        Public Data Indicacao          AS STRING
        Public Data SolicitBizagi      AS STRING
        Public Data Num_SC      AS STRING
        Public Data TemProdNovo        AS STRING
        Public Data SolicEmpresa       AS STRING

        Method New() Constructor

    EndClass

Method New() Class _CabecSolicCompra

Return()

    Class _ItemSolicitacao
        Public Data Item				As String
        Public Data Produto			As String
        Public Data Produto_new			As String
        Public Data PriUnidadeMedida	As String
        Public Data PriQuantidade		As Float
        Public Data SegUnidadeMedida	As String
        Public Data SegQuantidade		As Float
        Public Data Observacao			As String
        Public Data DescricaoProduto	As String
        Public Data ValorUnitario		As Float
        Public Data Tag				AS String
        Public Data Aplicacao			AS String
        Public Data Fornecedor         AS String
        Public Data CodCliente         AS String
        Public Data TemAnexo           AS String
        Public Data Conta				AS String  //08/03/2016 - Luana Marin Ribeiro - esse campo foi retirado do cabecalho e colocado aqui, no item.
        Public Data Importado			AS String
        Public Data AtenderServico		AS String
        Public Data Driver				AS String
        Public Data Armazem			AS String

        Method New() Constructor

    EndClass

Method New() Class _ItemSolicitacao

Return()

    Class _SolicitacaoCompra
        Public Data SCCab 				As _CabecSolicCompra
        Public Data SCItem				As ARRAY //OF _ItemSolicitacao

        Method New() Constructor

    EndClass

Method New() Class _SolicitacaoCompra

    ::SCCab     := _CabecSolicCompra():New()
    ::SCItem    := {}

Return()

    Class _novaListaProdutos
        Public Data Lista				As ARRAY //OF _NewProduct
        Public Data Solicitante  		AS STRING

        Method New() Constructor

    EndClass

Method New() Class _novaListaProdutos

    ::Lista := {}

Return()

    Class _Resultado
        Public Data Codigo		        AS String //
        Public Data Erro			    AS String //

        Method New() Constructor

    EndClass

Method New() Class _Resultado

Return()

    Class _Cabecalho_Cotacao
        Public Data Empresa_Cotacao	    AS String
        Public Data Fornecedor		    AS String
        Public Data LojaFornedor		AS String
        Public Data Codigo_Cotacao	    AS String
        Public Data Contato			AS String
        Public Data DataValidade		AS String
        Public Data Orcamento		    AS String
        Public Data FormaPagamento	    AS String
        Public Data FormPagNegociado   AS String
        Public Data TipoFrete		    AS String

        Method New() Constructor

    EndClass

Method New() Class _Cabecalho_Cotacao

Return()

    Class _Item_Cotacao
        Public Data Produto			AS String
        Public Data IPI				AS Float
        Public Data DiasEntrega		AS Integer
        Public Data PrecoUnitario	    AS Float
        Public Data Desconto			AS Float
        Public Data ValorDesconto	    AS Float
        Public Data Moeda			    AS Integer
        Public Data ValorSubst		    AS Float
        Public Data PrecoTotal		    AS Float
        Public Data Marca			    AS String
        Public Data AtendeTotal	    AS Boolean
        Public Data Observacao		    AS String
        Public Data ProdutoFornecedor  AS String
        Public Data Atende_Cotacao	    AS String

        Method New() Constructor

    EndClass

Method New() Class _Item_Cotacao

Return()

    Class _Cotacao
        Public Data Cabecalho		    As _Cabecalho_Cotacao
        Public Data Item				As ARRAY //OF _Item_Cotacao

        Method New() Constructor

    EndClass

Method New() Class _Cotacao

Return()

    Class _CabecTabelaPreco
        Public Data TipoNegociacao     AS String
        Public Data FornDscAtual       AS String
        Public Data FornDscNovo        AS String
        Public Data FornCodLojaAtual   AS String
        Public Data FornCodLojaNovo    AS String
        Public Data FormaPagAtual      AS String
        Public Data FormaPagNovo       AS String
        Public Data TipoNegoc          AS String
        Public Data AplicProd          AS String
        Public Data AplicFrete         AS String
        Public Data DataPrevSubs       AS String
        //Public Data DataIniVig AS String

        Method New() Constructor

    EndClass

Method New() Class _CabecTabelaPreco

Return()

    Class _ItemTabelaPreco
        Public Data ProdCodAtual   AS String
        Public Data ProdCodNovo    AS String
        Public Data PrecoAtual     AS String
        Public Data PrecoNovo      AS String
        Public Data FreteAtual     AS String
        Public Data FreteNovo      AS String

        Method New() Constructor

    EndClass

Method New() Class _ItemTabelaPreco

Return()

    Class _TabelaPreco
        Public Data TPCab 		    As _CabecTabelaPreco
        Public Data TPItem			As ARRAY //OF _ItemTabelaPreco

        Method New() Constructor

    EndClass

Method New() Class _TabelaPreco

Return()

    Class _EmbalagemInclusao
        Public Data DescNova		As String
        Public Data NcmAnterior    As String

        Method New() Constructor

    EndClass

Method New() Class _EmbalagemInclusao

Return()

    Class _EmbalagemAlteracao
        Public Data CodAnterior 	As String
        Public Data CodNovo		As String
        Public Data Tipo			As String
        Public Data Empresa		As String

        Method New() Constructor

    EndClass

Method New() Class _EmbalagemAlteracao

Return()

    Class TBizagiInputSolicitView From LongClassName

        //atributos
        Public Data Codigo	    		AS String
        Public Data oResultado    		AS _Resultado
        Public Data oCliente   		AS _Cliente
        Public Data oSolicCredito  	AS _SolicCredito
        Public Data SC					AS _SolicitacaoCompra
        Public Data LP					AS _novaListaProdutos
        Public Data o_Cotacao			AS _Cotacao
        Public Data oTabPreco			AS _TabelaPreco
        Public Data oEmbInclusao		AS _EmbalagemInclusao
        Public Data oEmbAlteracao		AS _EmbalagemAlteracao

        Method New() Constructor
        Public Method InputProduto()
        Public Method InputSolicit()

        Public Method putNovoProduto()
        Public Method put_Cliente()
        Public Method put_SolicitacaoCompra()

        Public Method put_SolicCredito()
        Public Method Atualiza_Cotacao()
        Public Method putTabelaPreco()
        Public Method putEmbalagemInclusao()
        Public Method putEmbalagemAlteracao()

        Public Method Log(cEmp, cFil, cSolBizagi, cNum_SC, cNum_SCnovo, cItem, cSTatus, cObs)

    EndClass

Method New(lJob) Class TBizagiInputSolicitView

    ::Codigo	    := ""
    ::oResultado    := _Resultado():New()
    ::oCliente   	:= _Cliente():New()
    ::oSolicCredito := _SolicCredito():New()
    ::SC			:= _SolicitacaoCompra():New()
    ::LP			:= _novaListaProdutos():New()
    ::o_Cotacao		:= _Cotacao():New()
    ::oTabPreco		:= _TabelaPreco():New()
    ::oEmbInclusao	:= _EmbalagemInclusao():New()
    ::oEmbAlteracao	:= _EmbalagemAlteracao():New()

    ::oResultado    := _Resultado():New()

Return(Self)

Method InputProduto() Class TBizagiInputSolicitView

    Local cQry  := GetNextAlias()
    Local cSQL  := ""
    Local LP := {}

    ::oResultado := _Resultado():New()

    cSQL := " SELECT * "
    cSQL += " FROM " + RetSqlName("SA2") + " SA2 "
    cSQL += " WHERE "
    cSQL += " A2_FILIAL = " + ValToSql(xFilial("SA2")) + " AND "
    cSQL += " SA2.D_E_L_E_T_ = '' "

    TcQuery cSQL New Alias (cQry)

    While !(cQry)->(EOF())

        // Produtos
        LP := _novaListaProdutos():New()

        oList := _NewProduct():New()

        oList:Codigo                := (cQry)->A2_FILIAL
        oList:Grupo       		    := (cQry)->A2_FILIAL
        oList:Tipo        		    := (cQry)->A2_FILIAL
        oList:TipoBianco  		    := (cQry)->A2_FILIAL
        oList:Politica    		    := (cQry)->A2_FILIAL
        oList:Descricao   		    := (cQry)->A2_FILIAL
        oList:Unidade     		    := (cQry)->A2_FILIAL
        oList:LocalBianco 		    := (cQry)->A2_FILIAL
        oList:LocalIncesa 		    := (cQry)->A2_FILIAL
        oList:LocalPadrao 		    := (cQry)->A2_FILIAL
        oList:SegUm       		    := (cQry)->A2_FILIAL
        oList:Fator       		    := (cQry)->A2_FILIAL
        oList:MonoClassif 		    := (cQry)->A2_FILIAL
        oList:PecasCaixa  		    := (cQry)->A2_FILIAL
        oList:ConvPallets 		    := (cQry)->A2_FILIAL
        oList:Obs         		    := (cQry)->A2_FILIAL
        oList:Emissao     		    := (cQry)->A2_FILIAL
        oList:TE					:= (cQry)->A2_FILIAL
        oList:TS              	    := (cQry)->A2_FILIAL
        oList:Conta           	    := (cQry)->A2_FILIAL
        oList:NCM             	    := (cQry)->A2_FILIAL
        oList:ICMS            	    := (cQry)->A2_FILIAL
        oList:IPI             	    := (cQry)->A2_FILIAL
        oList:ISS             	    := (cQry)->A2_FILIAL
        oList:ICMRET          	    := (cQry)->A2_FILIAL
        oList:Origem          	    := (cQry)->A2_FILIAL
        oList:ClasFis         	    := (cQry)->A2_FILIAL
        oList:GrpTrib         	    := (cQry)->A2_FILIAL
        oList:ContaResult     	    := (cQry)->A2_FILIAL
        oList:ContaResultInd  	    := (cQry)->A2_FILIAL
        oList:ContaResultAdm  	    := (cQry)->A2_FILIAL
        oList:INSS            	    := (cQry)->A2_FILIAL
        oList:CNV52           	    := (cQry)->A2_FILIAL
        oList:TipoProdContab  	    := (cQry)->A2_FILIAL
        oList:AplicacaoDireta  	    := (cQry)->A2_FILIAL
        oList:EhComum  			    := (cQry)->A2_FILIAL
        oList:Item        		    := (cQry)->A2_FILIAL
        oList:Importado        	    := (cQry)->A2_FILIAL
        oList:Anuente       	 	:= (cQry)->A2_FILIAL
        oList:IsPDM        		    := (cQry)->A2_FILIAL
        oList:GrupoPDM        	    := (cQry)->A2_FILIAL
        oList:SubgrupoPDM     	    := (cQry)->A2_FILIAL
        oList:FamiliaPDM      	    := (cQry)->A2_FILIAL
        oList:aPDMCaracteristicas   := (cQry)->A2_FILIAL
        oList:a_PDMMARCAs		    := (cQry)->A2_FILIAL

        aAdd(LP:LISTA, oList)

        ::putNovoProduto(LP)

        (cQry)->(DbSkip())

    EndDo

    (cQry)->(DbCloseArea())

Return()

Method InputSolicit() Class TBizagiInputSolicitView

    Local cQry  := GetNextAlias()
    Local cSQL  := ""
    Local LP := {}
    Local lExistProd := .T.
    Local nNumBizagi := ""
    Local cCodProd := ""

    ::oResultado := _Resultado():New()

    cSQL += "WITH BASE AS (																											      	"
    cSQL += "SELECT  DISTINCT	                                                                                                            "
    cSQL += "  ISNULL(SC.NumeroSolicitacao,'')                                               AS 'CodigoBizagi'	                            "
    cSQL += ", CONVERT(NVARCHAR, SC.DataAprovacaoSolicitacao, 23)                             AS 'DataAprovacaoBizagi'	                    "
    cSQL += ", ISNULL(VWSC.NUMSC,'')                                                         AS 'CAB_Codigo'	                            "
    cSQL += ", SUBSTRING(E.Code,1,2)                                                          AS 'CAB_Empresa'	                            "
    cSQL += ", SUBSTRING(E.Code,3,2)                                                          AS 'CAB_Filial'	                            "
    cSQL += ", US.Matricula                                                                   AS 'CAB_Matricula'	                        "
    cSQL += ", US.fullName                                                                    AS 'CAB_NomeSolicitante'	                    "
    cSQL += ", CONVERT(NVARCHAR, SC.DataEmissaoSolicitacao, 23)                               AS 'CAB_DataEmissao'	                        "
    cSQL += ",'Recuperada dentro do WS no Momento da Integração'                              AS 'CAB_DataAprovacao'	                    "
    cSQL += ", CONVERT(NVARCHAR, SC.Necessidade, 23)                                          AS 'CAB_Necessidade'	                        "
    cSQL += ", PR.Codigo                                                                      AS 'CAB_Prioridade'	                        "
    cSQL += ", ISNULL(CT.Codigo,'')                                                          AS 'CAB_Contrato'	                            "
    cSQL += ", ISNULL(M.Codigo,'')                                                           AS 'CAB_Melhoria'	                            "
    cSQL += ", ''                                                                            AS 'CAB_CentroCusto'	                        "
    cSQL += ", ISNULL(CCSC.Codigo,'')                                                        AS 'CAB_Conta'	                            "
    cSQL += ", LTRIM(RTRIM(ISNULL(ITC.Codigo, '')))                                          AS 'CAB_ItemConta'	                        "
    cSQL += ", ISNULL(CV.Codigo,'')                                                          AS 'CAB_ClasseValor'	                        "
    cSQL += ", ''                                                                            AS 'CAB_SituacaoAprovacao'	                "
    cSQL += ", ''                                                                            AS 'CAB_Indicacao'	                        "
    cSQL += ", W.radNumber                                                                    AS 'CAB_SolicitBizagi'	                    "
    cSQL += ", ( CASE IT.ProdutoNovo WHEN 1 THEN 'S'ELSE 'N' END )                            AS 'CAB_TemProdNovo'	                        "
    cSQL += ", ''                                                                             AS 'CAB_SolicEmpresa'	                        "
    cSQL += ", REPLICATE('0',4 - LEN(IT.NumeroItem)) + CONVERT(VARCHAR(4),IT.NumeroItem)      AS 'IT_Item'	                                "
    cSQL += ", LTRIM(RTRIM(ISNULL(PD.Codigo, '')))                                           AS 'IT_Produto'	                            "
    cSQL += ", LTRIM(RTRIM(ISNULL(IT.CodigoProdutoNovo, '')))                                AS 'IT_Produto_Novo'	                        "
    cSQL += ", ISNULL(UM.Codigo,'')                                                          AS 'IT_PriUnidadeMedida'	                    "
    cSQL += ", IT.Quantidade                                                                  AS 'IT_PriQuantidade'	                        "
    cSQL += ", 0                                                                            AS 'IT_SegUnidadeMedida'	                    "
    cSQL += ", 0                                                                            AS 'IT_SegQuantidade'	                        "
    cSQL += ", ISNULL(UPPER(IT.Observacoes), '')                                             AS 'IT_Observacao'	                        "
    cSQL += ", UPPER(IT.Descricao)                                                            AS 'IT_DescricaoProduto'	                    "
    cSQL += ", 0                                                                            AS 'IT_ValorUnitario'	                        "
    cSQL += ", LTRIM(RTRIM(ISNULL(T.Codigo, '')))                                            AS 'IT_Tag'	                                "
    cSQL += ", ISNULL(CAST(A.Codigo AS VARCHAR), '0')                                                          AS 'IT_Aplicacao'	                            "
    cSQL += ", ISNULL(UPPER(IT.Fornecedor), '')                                              AS 'IT_Fornecedor'	                        "
    cSQL += ", ISNULL(CL.Codigo,'')                                                          AS 'IT_CodCliente'	                        "
    cSQL += ", ( CASE IT.PossuiAnexo WHEN 'X' THEN 'X' ELSE '' END )                          AS 'IT_TemAnexo'	                            "
    cSQL += ", ISNULL(CCIT.Codigo,'')                                                        AS 'IT_Conta'	                                "
    cSQL += ", ( CASE IT.ProdutoImportado WHEN 1 THEN 'S' ELSE 'N' END )                      AS 'IT_Importado'	                            "
    cSQL += ", ( CASE IT.AtendeServico WHEN 1 THEN 'S' ELSE 'N' END )                         AS 'IT_AtenderServico'	                    "
    cSQL += ", ISNULL(DRV.DRIVER, '')                                                        AS 'IT_Driver'	                            "
    cSQL += ", ISNULL(REPLICATE('0',2 - LEN(AR.CODIGO)) + CONVERT(VARCHAR(2),AR.CODIGO), '') AS 'IT_Armazem'	                            "
    cSQL += "FROM ZEUS.BIZAGIPRD.DBO.SolicitacaodeCompra SC WITH (NOLOCK)	                                                                "
    cSQL += "INNER JOIN ZEUS.BIZAGIPRD.DBO.Prioridade PR on PR.idPrioridade = SC.Prioridade                                                 "
    cSQL += "INNER JOIN ZEUS.BIZAGIPRD.DBO.VW_PVApp P WITH (NOLOCK) ON P.SolicitacaodeCompra = SC.idSolicitacaodeCompra	                    "
    cSQL += "INNER JOIN ZEUS.BIZAGIPRD.DBO.VW_WFCASE W WITH (NOLOCK) ON W.idCase = P.idCase                             	                "
    //cSQL += "AND W.idCaseState IN (4,5)                                                                                                   "
    cSQL += "INNER JOIN ZEUS.BIZAGIPRD.DBO.CASESTATE CS WITH (NOLOCK) ON CS.idCaseState = W.idCaseState	                                    "
    cSQL += "INNER JOIN ZEUS.BIZAGIPRD.DBO.Empresa E WITH (NOLOCK) ON E.idEmpresa = SC.Empresa	                                            "
    cSQL += "INNER JOIN ZEUS.BIZAGIPRD.DBO.WFUSER US WITH (NOLOCK) ON US.idUser = SC.Solicitante	                                        "
    cSQL += "INNER JOIN ZEUS.BIZAGIPRD.DBO.ItemSolicitacaoDeCompra IT WITH (NOLOCK) ON IT.SolicitacaodeCompra = SC.idSolicitacaodeCompra    "
    cSQL += "LEFT JOIN ( SELECT CC.* , EK.idVW_BZ_CONTA_CONTABIL FROM ZEUS.BIZAGIPRD.DBO.VW_BZ_CONTA_CONTABIL CC WITH (NOLOCK) INNER JOIN ZEUS.BIZAGIPRD.DBO.VW_BZ_CONTA_CONTABIL_EK EK WITH (NOLOCK) ON EK.Codigo = CC.Codigo ) CCSC ON CCSC.idVW_BZ_CONTA_CONTABIL = SC.ContaContabil												"
    cSQL += "LEFT JOIN ( SELECT PD.* , EK.idVW_BZ_PRODUTO FROM ZEUS.BIZAGIPRD.DBO.VW_BZ_PRODUTO PD WITH (NOLOCK) INNER JOIN ZEUS.BIZAGIPRD.DBO.VW_BZ_PRODUTO_EK EK WITH (NOLOCK) ON EK.Codigo = PD.Codigo AND EK.Empresa = PD.Empresa ) PD ON PD.idVW_BZ_PRODUTO = IT.Produto                                                       "
    cSQL += "LEFT JOIN ( SELECT A.*  , EK.idVW_BZ_ARMAZEM FROM ZEUS.BIZAGIPRD.DBO.VW_BZ_ARMAZEM A WITH (NOLOCK) INNER JOIN ZEUS.BIZAGIPRD.DBO.VW_BZ_ARMAZEM_EK EK WITH (NOLOCK) ON EK.CODIGO = A.CODIGO ) AR ON AR.idVW_BZ_ARMAZEM = IT.Armazem                                                                                     "
    cSQL += "LEFT JOIN ( SELECT U.*  , EK.idVW_BZ_UNIDADE_MEDIDA FROM ZEUS.BIZAGIPRD.DBO.VW_BZ_UNIDADE_MEDIDA U WITH (NOLOCK) INNER JOIN ZEUS.BIZAGIPRD.DBO.VW_BZ_UNIDADE_MEDIDA_EK EK WITH (NOLOCK) ON EK.Codigo = U.Codigo ) UM ON UM.idVW_BZ_UNIDADE_MEDIDA = IT.UnidadedeMedida                                                 "
    cSQL += "LEFT JOIN ( SELECT TPD.*, EK.idVW_BZ_TIPO_PRODUTO FROM ZEUS.BIZAGIPRD.DBO.VW_BZ_TIPO_PRODUTO TPD WITH (NOLOCK) INNER JOIN ZEUS.BIZAGIPRD.DBO.VW_BZ_TIPO_PRODUTO_EK EK WITH (NOLOCK) ON EK.Codigo = TPD.Codigo ) TPD ON TPD.idVW_BZ_TIPO_PRODUTO = IT.TipodeProduto                                                     "
    cSQL += "LEFT JOIN ( SELECT A.*  , EK.idVW_BZ_APLICACAO FROM ZEUS.BIZAGIPRD.DBO.VW_BZ_APLICACAO A WITH (NOLOCK) INNER JOIN ZEUS.BIZAGIPRD.DBO.VW_BZ_APLICACAO_EK EK WITH (NOLOCK) ON EK.Codigo = A.Codigo ) A ON A.idVW_BZ_APLICACAO = IT.Aplicacao                                                                             "
    cSQL += "LEFT JOIN ( SELECT C.*  , EK.idVW_BZ_CONTRATO FROM ZEUS.BIZAGIPRD.DBO.VW_BZ_CONTRATO C WITH (NOLOCK) INNER JOIN ZEUS.BIZAGIPRD.DBO.VW_BZ_CONTRATO_EK EK WITH (NOLOCK) ON EK.Codigo = C.Codigo AND EK.Empresa = C.Empresa ) CT ON CT.idVW_BZ_CONTRATO = SC.Contrato                                                     "
    cSQL += "LEFT JOIN ( SELECT DRV.*, EK.idVW_BZ_DRIVER  FROM ZEUS.BIZAGIPRD.DBO.VW_BZ_DRIVER DRV WITH (NOLOCK) INNER JOIN ZEUS.BIZAGIPRD.DBO.VW_BZ_DRIVER_EK EK WITH (NOLOCK) ON EK.DRIVER = DRV.DRIVER AND EK.CLASSEVALOR = DRV.CLASSEVALOR AND EK.CONTACONTABIL = DRV.CONTACONTABIL ) DRV ON DRV.idVW_BZ_DRIVER = IT.Driver     "
    cSQL += "LEFT JOIN ( SELECT C.*  , EK.idVW_BZ_CLASSE_VALOR FROM ZEUS.BIZAGIPRD.DBO.VW_BZ_CLASSE_VALOR C WITH (NOLOCK) INNER JOIN ZEUS.BIZAGIPRD.DBO.VW_BZ_CLASSE_VALOR_EK EK WITH (NOLOCK) ON EK.Codigo = C.Codigo ) CV ON CV.idVW_BZ_CLASSE_VALOR = SC.ClassedeValor                                                           "
    cSQL += "LEFT JOIN ( SELECT CC.* ,EK.idVW_BZ_CONTA_CONTABIL FROM ZEUS.BIZAGIPRD.DBO.VW_BZ_CONTA_CONTABIL CC WITH (NOLOCK) INNER JOIN ZEUS.BIZAGIPRD.DBO.VW_BZ_CONTA_CONTABIL_EK EK WITH (NOLOCK) ON EK.Codigo = CC.Codigo ) CCIT ON CCIT.idVW_BZ_CONTA_CONTABIL = IT.ContaContabil                                              "
    cSQL += "LEFT JOIN ( SELECT IT.* , EK.idVW_BZ_ITEM_CONTA FROM ZEUS.BIZAGIPRD.DBO.VW_BZ_ITEM_CONTA IT WITH (NOLOCK) INNER JOIN ZEUS.BIZAGIPRD.DBO.VW_BZ_ITEM_CONTA_EK EK WITH (NOLOCK) ON EK.Codigo = IT.Codigo ) ITC ON ITC.idVW_BZ_ITEM_CONTA = SC.ItemdeConta                                                                 "
    cSQL += "LEFT JOIN ( SELECT M.*  , EK.idVW_BZ_MELHORIA FROM ZEUS.BIZAGIPRD.DBO.VW_BZ_MELHORIA M WITH (NOLOCK) INNER JOIN ZEUS.BIZAGIPRD.DBO.VW_BZ_MELHORIA_EK EK WITH (NOLOCK) ON EK.Codigo = M.Codigo) M ON M.idVW_BZ_MELHORIA = SC.Melhoria                                                                                   "
    cSQL += "LEFT JOIN ( SELECT T.*  , EK.idVW_BZ_TAG FROM ZEUS.BIZAGIPRD.DBO.VW_BZ_TAG T WITH (NOLOCK) INNER JOIN ZEUS.BIZAGIPRD.DBO.VW_BZ_TAG_EK EK WITH (NOLOCK) ON EK.Codigo = T.Codigo AND EK.Empresa = T.Empresa ) T ON T.idVW_BZ_TAG = IT.TAG                                                                                "
    cSQL += "LEFT JOIN ( SELECT C.*  , EK.idVW_BZ_CLIENTE FROM ZEUS.BIZAGIPRD.DBO.VW_BZ_CLIENTE C WITH (NOLOCK) INNER JOIN ZEUS.BIZAGIPRD.DBO.VW_BZ_CLIENTE_EK EK WITH (NOLOCK) ON EK.Codigo = C.Codigo) CL ON CL.idVW_BZ_CLIENTE = IT.Cliente                                                                                      "
    cSQL += "LEFT JOIN VW_BZ_SC_INTEGRADAS VWSC ON VWSC.PROCESSO = W.radNumber COLLATE SQL_Latin1_General_CP1_CI_AS AND VWSC.NUMSC = SC.NumeroSolicitacao COLLATE SQL_Latin1_General_CP1_CI_AS AND VWSC.ITEM = IT.NumeroItem COLLATE SQL_Latin1_General_CP1_CI_AS                                                                   "
    cSQL += "WHERE SC.Aprovada = 1 AND W.casCreationDate >= '2020-03-01')                                                                                                                                                                                                                                                           "

    cSQL += "SELECT *                                                                                                                                                   "
    cSQL += "FROM BASE                                                                                                                                                  "
    cSQL += "WHERE CAB_Codigo = '' and CodigoBizagi <> ''  
    
    cSQL += "AND CAB_Empresa = " + ValToSQl(cEmpAnt)
    cSQL += "AND CAB_Filial = " + ValToSQl(cEmpAnt)

    cSQL += "AND CAB_SolicitBizagi NOT IN ('SC-073603','SC-073266','SC-073395','SC-073410','SC-073427','SC-073432','SC-073437','SC-073463','SC-073465','SC-073466',     "
    cSQL += "'SC-073468','SC-073474','SC-073475','SC-073478','SC-073480','SC-073485','SC-073491','SC-073492','SC-073511','SC-073521',                                   "
    cSQL += "'SC-073533','SC-073535','SC-073554','SC-073558','SC-073559','SC-073578','SC-073579','SC-073584','SC-073594','SC-073610',                                   "
    cSQL += "'SC-073631','SC-073637','SC-073642','SC-073645','SC-073646','SC-073650','SC-073660','SC-073665','SC-073667','SC-073670',                                   "
    cSQL += "'SC-073672','SC-073677','SC-073679','SC-073683','SC-073693','SC-073696','SC-073702','SC-073709','SC-073712','SC-073714',                                   "
    cSQL += "'SC-073743','SC-073759','SC-073760','SC-073763','SC-073773','SC-073774','SC-073776','SC-073778','SC-073801','SC-073865',                                   "
    cSQL += "'SC-073875','SC-074644')                                                                                                                                               "

    // PRIMEIROS TESTES EM PRODUÇÃO
    //cSQL += "AND CAB_SolicitBizagi IN ('SC-073355')                                                                                                                     "

    cSQL += "ORDER BY CAB_SolicitBizagi, IT_Item                                                                                                                        "

    // TESTE ***********************************************
    //cSQL := "SELECT * FROM BASE_SC1 ORDER BY CAB_SolicitBizagi, IT_Item "

    TcQuery cSQL New Alias (cQry)

    DBSelectArea("SB1")
    SB1->(DBSetOrder(1)) // B1_FILIAL, B1_COD, R_E_C_N_O_, D_E_L_E_T_

    While !(cQry)->(EOF())

        // Solicitacao
        LP := _SolicitacaoCompra():New()

        nNumBizagi := (cQry)->CAB_SolicitBizagi

        lExistProd := .T.

        // Cabecalho
        LP:SCCab:Codigo			   := (cQry)->CAB_Codigo
        LP:SCCab:Empresa           := (cQry)->CAB_Empresa
        LP:SCCab:Filial            := (cQry)->CAB_Filial
        LP:SCCab:Matricula         := (cQry)->CAB_Matricula
        LP:SCCab:NomeSolicitante   := (cQry)->CAB_NomeSolicitante
        LP:SCCab:DataEmissao       := (cQry)->CAB_DataEmissao
        LP:SCCab:DataAprovacao     := (cQry)->DataAprovacaoBizagi //(cQry)->CAB_DataAprovacao
        LP:SCCab:Necessidade       := (cQry)->CAB_Necessidade
        LP:SCCab:Prioridade        := (cQry)->CAB_Prioridade
        LP:SCCab:Contrato          := (cQry)->CAB_Contrato
        LP:SCCab:Melhoria          := (cQry)->CAB_Melhoria
        LP:SCCab:CentroCusto       := (cQry)->CAB_CentroCusto
        LP:SCCab:Conta             := (cQry)->CAB_Conta
        LP:SCCab:ItemConta         := (cQry)->CAB_ItemConta
        LP:SCCab:ClasseValor       := (cQry)->CAB_ClasseValor
        LP:SCCab:SituacaoAprovacao := (cQry)->CAB_SituacaoAprovacao
        LP:SCCab:Indicacao         := (cQry)->CAB_Indicacao
        LP:SCCab:SolicitBizagi     := (cQry)->CAB_SolicitBizagi
        LP:SCCab:Num_SC            := (cQry)->CodigoBizagi
        LP:SCCab:TemProdNovo       := (cQry)->CAB_TemProdNovo
        LP:SCCab:SolicEmpresa      := (cQry)->CAB_SolicEmpresa
        
        While !(cQry)->(EOF()) .And. (cQry)->CAB_SolicitBizagi == nNumBizagi

            oItem := _ItemSolicitacao():New()

            // Itens
            oItem:Item				:= (cQry)->IT_Item
            oItem:Produto           := (cQry)->IT_Produto
            oItem:Produto_new       := (cQry)->IT_Produto_Novo

            oItem:PriUnidadeMedida  := (cQry)->IT_PriUnidadeMedida
            oItem:PriQuantidade     := (cQry)->IT_PriQuantidade
            oItem:SegUnidadeMedida  := (cQry)->IT_SegUnidadeMedida
            oItem:SegQuantidade     := (cQry)->IT_SegQuantidade
            oItem:Observacao        := (cQry)->IT_Observacao
            oItem:DescricaoProduto  := (cQry)->IT_DescricaoProduto
            oItem:ValorUnitario     := (cQry)->IT_ValorUnitario
            oItem:Tag               := (cQry)->IT_Tag
            oItem:Aplicacao         := (cQry)->IT_Aplicacao
            oItem:Fornecedor        := (cQry)->IT_Fornecedor
            oItem:CodCliente        := (cQry)->IT_CodCliente
            oItem:TemAnexo          := (cQry)->IT_TemAnexo
            oItem:Conta             := (cQry)->IT_Conta
            oItem:Importado         := (cQry)->IT_Importado
            oItem:AtenderServico    := (cQry)->IT_AtenderServico
            oItem:Driver            := (cQry)->IT_Driver
            oItem:Armazem           := (cQry)->IT_Armazem

            aAdd(LP:SCItem, oItem)

            cCodProd := If(Empty(Replace((cQry)->IT_Produto, "-", "")), (cQry)->IT_Produto_Novo, (cQry)->IT_Produto)

            SB1->(DBGoTop())

            If SB1->(DBSeek(xFilial("SB1") + cCodProd))

                ::Log(cEmpAnt, cFilAnt, (cQry)->CAB_SolicitBizagi, (cQry)->CodigoBizagi, "", (cQry)->IT_Item, "PRODUTO OK", "")

            Else

                lExistProd := .F.

                ::Log(cEmpAnt, cFilAnt, (cQry)->CAB_SolicitBizagi, (cQry)->CodigoBizagi, "", (cQry)->IT_Item, "PRODUTO NÃO EXISTE NO PROTHEUS", "")

            EndIf

            (cQry)->(DbSkip())

        EndDo

        If lExistProd

            ::put_SolicitacaoCompra(LP)

        EndIf

    EndDo

    (cQry)->(DbCloseArea())

Return()

Method putNovoProduto(LP) Class TBizagiInputSolicitView

    Local cRet := ""
    Local cNewCod := ""
    Local aProd := {}
    Local cAplicDir := ""
    Local cComum	:= ""
    Local nCount := 0

    VarInfo("LP", LP)

    Begin Transaction

        For nCount := 1 To Len(LP:Lista)

            cNewCod := U_ProxCod(Left(LP:Lista[nCount]:Grupo, 3), Left(LP:Lista[nCount]:Grupo, 3), .T., "WS")

            aAdd(aProd, {cNewCod})

            DbSelectArea("SB1")

            RecLock("SB1", .T.)

            SB1->B1_COD := cNewCod
            SB1->B1_GRUPO := LP:Lista[nCount]:Grupo
            SB1->B1_TIPO := LP:Lista[nCount]:Tipo
            SB1->B1_YTIPO := ""
            SB1->B1_TIPCONV := "M"
            SB1->B1_ORIGEM := "0"
            SB1->B1_CLASFIS := "00"
            SB1->B1_DESC := AllTrim(StrTran(Upper(Alltrim(LP:Lista[nCount]:Descricao)),CHR(10), ' '))
            SB1->B1_YPOLIT := LP:Lista[nCount]:Politica
            SB1->B1_UM := LP:Lista[nCount]:Unidade
            SB1->B1_LOCPAD := LP:Lista[nCount]:LocalPadrao
            SB1->B1_YLOCALI := LP:Lista[nCount]:LocalBianco
            SB1->B1_YLOCINC := LP:Lista[nCount]:LocalIncesa

            If(LP:Lista[nCount]:SegUm != "*" .And. LP:Lista[nCount]:SegUm != Nil)
                SB1->B1_SEGUM := LP:Lista[nCount]:SegUm
            Else
                SB1->B1_SEGUM := LP:Lista[nCount]:Unidade
            EndIf

            IF SB1->B1_UM == SB1->B1_SEGUM
                SB1->B1_CONV := 1.00
            ELSE
                SB1->B1_CONV := VAL(STRTRAN(LP:Lista[nCount]:Fator,",","."))
            ENDIF

            SB1->B1_YUSER := "BZ-" + Iif(!Empty(LP:Solicitante), LP:Solicitante,"")
            SB1->B1_YDIVPA := LP:Lista[nCount]:ConvPallets
            SB1->B1_YPECA := LP:Lista[nCount]:PecasCaixa

            If(LP:Lista[nCount]:NCM != "*")
                SB1->B1_POSIPI := LP:Lista[nCount]:NCM
            EndIf

            SB1->B1_CONTA := LP:Lista[nCount]:Conta
            SB1->B1_YCTARES := LP:Lista[nCount]:ContaResult
            SB1->B1_YCTRIND := LP:Lista[nCount]:ContaResultInd
            SB1->B1_YCTRADM := LP:Lista[nCount]:ContaResultAdm
            SB1->B1_LOCALIZ	:= 'N'
            SB1->B1_RASTRO := 'N'
            SB1->B1_GARANT := '2'
            SB1->B1_ATIVO := 'S'
            SB1->B1_IMPORT := IIF(!Empty(LP:Lista[nCount]:Importado), IIF(LP:Lista[nCount]:Importado == '1' .Or. LP:Lista[nCount]:Importado == 'S' .Or. UPPER(LP:Lista[nCount]:Importado) == 'TRUE', 'S', 'N' ), 'N' )
            SB1->B1_ANUENTE := IIF(!Empty(LP:Lista[nCount]:Anuente) , IIF(LP:Lista[nCount]:Anuente == '1' .Or. LP:Lista[nCount]:Anuente == 'S' .Or. UPPER(LP:Lista[nCount]:Anuente) == 'TRUE', '1', '2' ), '2'  ) //1 - SIM //2 - NÃO

            SB1->(MsUnLock())

            cAplicDir := IIF(!Empty(LP:Lista[nCount]:AplicacaoDireta), IIF(LP:Lista[nCount]:AplicacaoDireta == '1' .Or. LP:Lista[nCount]:AplicacaoDireta == 'S' .Or. UPPER(LP:Lista[nCount]:AplicacaoDireta) == 'TRUE', 'S', 'N' ), 'S'  )
            cComum := IIF(!Empty(LP:Lista[nCount]:EhComum) , IIF(LP:Lista[nCount]:EhComum == '1' .Or. LP:Lista[nCount]:EhComum == 'S' .Or. UPPER(LP:Lista[nCount]:EhComum) == 'TRUE', 'S', 'N' ), 'N'  )

            // Inclui o indicador - Tabela SBZ
            U_WS_INCSBZ(cNewCod, cAplicDir, cComum)

        Next

        If Len(LP:Lista) == Len(aProd) .And. fVldPutProd(aProd)

            For nCount := 1 To Len(aProd)

                ::oResultado:Codigo += aProd[nCount, 1] + "-" + LP:Lista[nCount]:Item + ";"

            Next

            ::oResultado:Erro := ""

        Else

            ::oResultado:Codigo := ""
            ::oResultado:Erro := "ERROR - putNovoProduto"

            DisarmTransaction()

        EndIf

    End Transaction

Return(.T.)

Method put_Cliente(oCliente)  Class TBizagiInputSolicitView

    Local nOperacao
    Local cLoja_Cliente
    Local cCliBZ := ""

    PRIVATE lMsErroAuto 	:= .F.
    Private lMsHelpAuto		:= .T.
    Private lAutoErrNoFile 	:= .T.

    ::oResultado := NIL
    ::oResultado := WSClassNew( "_Resultado" )
    CONOUT(" ---- PROCESSO CADASTRAR _Cliente -----")

    //Parâmetros do MSExecAuto:
    //3 - Inclusão.
    //4 - Alteração
    //5 - Exclusão

    CONOUT("CODIGO _Cliente : " + IIF(oCliente:Codigo == Nil, "", oCliente:Codigo))

    If Empty(oCliente:Codigo)

        nOperacao := 3

        INCLUI := .T.

        CSQL:=" SELECT TOP 1 A1_COD, A1_YBIZAGI, COUNT(A1_COD) AS QTD "
        CSQL+=" FROM " + RetSqlName("SA1")
        CSQL+=" WHERE A1_CGC = '"+Alltrim(oCliente:CnpjCpf)+"'"
        CSQL+=" AND D_E_L_E_T_ = ''
        CSQL+=" GROUP BY A1_COD, A1_YBIZAGI"

        If chkfile("_SA1")
            dbSelectArea("_SA1")
            dbCloseArea("_SA1")
        EndIf

        TCQUERY CSQL ALIAS "_SA1" NEW
        dbSelectArea("_SA1")

        If _SA1->QTD > 0
            // (Thiago - 11/06/2015) -> Véspera
            // A fim de evitar erro do Bizagi que não está setando o codigo do _Cliente.
            If AllTrim(_SA1->A1_YBIZAGI) == AllTrim(oCliente:NumProcessoBizagi)
                nOperacao 			:= 4
                oCliente:Codigo 	:= _SA1->A1_COD
                ::oResultado:Codigo := _SA1->A1_COD
                CONOUT("_Cliente - ENCONTROU BIZAGI")
            Else
                ::oResultado:Codigo := _SA1->A1_COD
                ::oResultado:Erro	:= "O "+IIF(oCliente:TPPessoa == "J", "CNPJ","CPF" )+" já está cadastrado no Sistema"
                dbCloseArea("_SA1")
                CONOUT("_Cliente - ABORTOU INCLUSAO")
                Return .T.
            EndIf
        EndIf
    Else
        nOperacao := 4
    EndIf

    //Rodrigo informou que inicialmente será não.
    If Empty(oCliente:EhCadExpres)
        oCliente:EhCadExpres := "N"
    EndIf

    VarInfo("oCliente",oCliente)

    CONOUT("Representante Bianco - " + IIF(oCliente:CodRepresenBianco==NIL,'',oCliente:CodRepresenBianco))
    IF(oCliente:CodRepresenBianco == NIL)
        oCliente:CodRepresenBianco := ''
    EndIf
    CONOUT("Comissão Bianco - " + IIF(oCliente:ValComissBianco==NIL,'',oCliente:ValComissBianco))
    IF(oCliente:ValComissBianco == NIL)
        oCliente:ValComissBianco := '0'
    EndIf
    CONOUT("Representante Incesa - " + IIF(oCliente:CodRepresenIncesa==NIL,'',oCliente:CodRepresenIncesa))
    If oCliente:CodRepresenIncesa == NIL
        oCliente:CodRepresenIncesa := ''
    EndIf
    CONOUT("Comissão Incesa - " + IIF(oCliente:ValComissIncesa==NIL,'', oCliente:ValComissIncesa))
    IF(oCliente:ValComissIncesa == NIL)
        oCliente:ValComissIncesa := '0'
    EndIf
    CONOUT("Representante BellaCasa - " + IIF(oCliente:CodRepresenBellaCasa==NIL,'',oCliente:CodRepresenBellaCasa))
    IF(oCliente:CodRepresenBellaCasa == NIL)
        oCliente:CodRepresenBellaCasa := ''
    EndIf
    CONOUT("Comissão BellaCasa - " + IIF(oCliente:ValComissBellaCasa==NIL,'', oCliente:ValComissBellaCasa))
    IF(oCliente:ValComissBellaCasa == NIL)
        oCliente:ValComissBellaCasa := '0'
    EndIf
    CONOUT("Representante Vitcer - " + IIF(oCliente:CodRepresenVitcer==NIL,'',oCliente:CodRepresenVitcer))
    IF(oCliente:CodRepresenVitcer == NIL)
        oCliente:CodRepresenVitcer := ''
    EndIf
    CONOUT("Comissão Vitcer - " + IIF(oCliente:ValComissVitcer==NIL,'', oCliente:ValComissVitcer))
    IF(oCliente:ValComissVitcer == NIL)
        oCliente:ValComissVitcer := '0'
    EndIf
    CONOUT("Representante Mundi - " + IIF(oCliente:CodRepresenMundialli==NIL,'',oCliente:CodRepresenMundialli))
    IF(oCliente:CodRepresenMundialli == NIL)
        oCliente:CodRepresenMundialli :=''
    EndIf
    CONOUT("Comissão Mundi - " + IIF(oCliente:ValComissMundialli==NIL,'', oCliente:ValComissMundialli))
    IF(oCliente:ValComissMundialli == NIL)
        oCliente:ValComissMundialli := '0'
    EndIf

    If(oCliente:Suframa	== Nil)
        oCliente:CodMunZonaFranca 	:= ""
        oCliente:DescontoSuframa	:= "N"
        oCliente:Suframa			:= ""
    EndIf

    If ( LEN(oCliente:Loja) < 2 )
        cLoja_Cliente = "0" + oCliente:Loja
    ElseIf (LEN(oCliente:Loja) == 2)
        cLoja_Cliente = oCliente:Loja
    EndIf
    CONOUT("_Cliente Loja - " + cLoja_Cliente)

    aVetor:={;
        {"A1_FILIAL" 		, xFilial("SA1"), Nil},;
        {"A1_LOJA"    		, cLoja_Cliente, Nil},;
        {"A1_NOME"			, AllTrim(StrTran(AllTrim(Upper(oCliente:Nome)),CHR(10),' ')), Nil},;
        {"A1_PESSOA"    	, oCliente:TPPessoa, Nil},;
        {"A1_CGC"       	, oCliente:CnpjCpf, Nil},;
        {"A1_TIPO"      	, oCliente:TpCli, Nil},;
        {"A1_NREDUZ"    	, AllTrim(Upper(oCliente:NomeFant)), Nil},;
        {"A1_END"       	, Upper(AllTrim(StrTran(oCliente:EndDesc,CHR(10), ' ')) +', ' + AllTrim(StrTran(oCliente:EndNum,CHR(10), ' '))), Nil},;
        {"A1_COMPLEM"       , Upper(alltrim(IIF(oCliente:EndComplemento == Nil, "", oCliente:EndComplemento ))), Nil},;
        {"A1_EST"       	, oCliente:EndUF, Nil},;
        {"A1_COD_MUN"      	, Upper(oCliente:EndCodMun), Nil},;
        {"A1_MUN"       	, AllTrim(Upper(oCliente:EndMun)), Nil},;
        {"A1_BAIRRO"    	, AllTrim(Upper(oCliente:EndBairro)), Nil},;
        {"A1_CEP"       	, AllTrim(oCliente:EndCep), Nil},;
        {"A1_TEL"			, AllTrim(oCliente:Telefone), Nil},;
        {"A1_FAX"       	, AllTrim(IIF(oCliente:Fax == Nil, "", oCliente:Fax)), Nil},;
        {"A1_CONTATO"   	, AllTrim(Upper(oCliente:Contato)), Nil},;
        {"A1_INSCR"     	, Upper(AllTrim(oCliente:InscEst)), Nil},;
        {"A1_YMAILNF"   	, AllTrim(LOWER(oCliente:EmailNF)), Nil},;
        {"A1_EMAIL" 		, AllTrim(LOWER(oCliente:EmailCont)), Nil},;
        {"A1_YEMABOL" 		, AllTrim(IIF(oCliente:EmailCobr == Nil, "", oCliente:EmailCobr)), Nil},;
        {"A1_HPAGE"     	, AllTrim(IIF(oCliente:HomePage == Nil,"", LOWER(oCliente:HomePage))), Nil},;
        {"A1_NATUREZ"		, '1121', Nil},;
        {"A1_ENDCOB"    	, Upper(AllTrim(oCliente:CobEnd) + ', ' + AllTrim(oCliente:CobNum)), Nil},;
        {"A1_ESTC"			, oCliente:CobUF, Nil},;
        {"A1_MUNC"			, AllTrim(Upper(oCliente:CobMun)), Nil},;
        {"A1_BAIRROC"   	, AllTrim(Upper(oCliente:CobBairro)), Nil},;
        {"A1_CEPC"      	, AllTrim(oCliente:CobCep), Nil},;
        {"A1_YCADEXP"		, IIF(oCliente:EhCadExpres == "1" .Or. oCliente:EhCadExpres == "S" .Or. UPPER(oCliente:EhCadExpres) == "TRUE", "1","2"), Nil},;
        {"A1_CONTRIB"		, IIF(oCliente:EhContrib == "1" .Or. oCliente:EhContrib == "S" .Or. UPPER(oCliente:EhContrib) == "TRUE", "1","2"), Nil},;
        {"A1_FOMEZER"		, IIF(oCliente:FomeZero == "1" .Or. oCliente:FomeZero == "S" .Or. UPPER(oCliente:FomeZero) == "TRUE", "1","2"), Nil},;
        {"A1_CODPAIS"		, oCliente:BacenCodPais, Nil},;
        {"A1_YTIPOLC"		, oCliente:TpLimite, Nil},;
        {"A1_SATIV1"		, oCliente:Segmento, Nil},;
        {"A1_YTPSEG"		, oCliente:TpSeg, Nil},;
        {"A1_YAVALCL"		, AllTrim(IIF(oCliente:Avalia_Cliente == Nil, "",oCliente:Avalia_Cliente)), Nil},;
        {"A1_YOBSROM"		, AllTrim(IIF(oCliente:OBSRomaneio == Nil, "",oCliente:OBSRomaneio)), Nil},;
        {"A1_LC"			, VAL(IIF(oCliente:LimiteCredito == Nil, "0", oCliente:LimiteCredito)), Nil},;
        {"A1_RISCO"			, oCliente:Risco, Nil},;
        {"A1_YTRTESP"		, IIF(oCliente:TratEspecial == "1" .Or. oCliente:TratEspecial == "S" .Or. UPPER(oCliente:TratEspecial) == "TRUE","1","2"), Nil},;
        {"A1_SUFRAMA"		, IIF(oCliente:Suframa == Nil .OR. AllTrim(oCliente:Suframa) == '-',"", oCliente:Suframa), Nil},;
        {"A1_CALCSUF"		, IIF(oCliente:DescontoSuframa == Nil,"N",oCliente:DescontoSuframa), Nil},;
        {"A1_YATUCLI"		, "S", NIL},;
        {"A1_YCAT"			, AllTrim(IIF(oCliente:Categoria == Nil, "", oCliente:Categoria)), Nil};
        }

    If !Empty(oCliente:TPJ)
        AADD(aVetor,{"A1_TPJ",AllTrim(oCliente:TPJ), Nil})
    EndIf

    //Ticket 26346 - Solicitação do Wellison do Financeiro para garantir padrão 'S' nos campos A1_YGERFAT e A1_YFGNRE
    AADD(aVetor,{"A1_YGERFAT",'S', Nil})
    AADD(aVetor,{"A1_YTFGNRE",'S', Nil})

    If !Empty(oCliente:CodMunZonaFranca) .And. oCliente:CodMunZonaFranca != '00000'
        AADD(aVetor,{"A1_CODMUN"		, IIF(oCliente:CodMunZonaFranca == Nil,""	,oCliente:CodMunZonaFranca)	, Nil})
    EndIf

    If !Empty(oCliente:CodRepresenBianco) .And. oCliente:CodRepresenBianco != '000000'
        AADD(aVetor,{"A1_VEND"			, oCliente:CodRepresenBianco 	, Nil})
    EndIf

    If !Empty(oCliente:CodRepresenIncesa) .And. oCliente:CodRepresenIncesa != '000000'
        AADD(aVetor,{"A1_YVENDI"		, oCliente:CodRepresenIncesa 	, Nil})
    EndIf

    If !Empty(oCliente:CodRepresenBellaCasa) .And. oCliente:CodRepresenBellaCasa != '000000'
        AADD(aVetor,{"A1_YVENBE1"		, oCliente:CodRepresenBellaCasa	, Nil})
    EndIf

    If !Empty(oCliente:CodRepresenVitcer) .And. oCliente:CodRepresenVitcer != '000000'
        AADD(aVetor,{"A1_YVENVT1"		, oCliente:CodRepresenVitcer	, Nil})
    EndIf

    If !Empty(oCliente:CodRepresenMundialli) .And. oCliente:CodRepresenMundialli != '000000'
        AADD(aVetor,{"A1_YVENML1"		, oCliente:CodRepresenMundialli	, Nil})
    EndIf


    CONOUT("Vetor _Cliente Gerado!")

    If nOperacao == 4

        CONOUT("--> Limite de Credito ($) = " +(IIF(oCliente:LimiteCredito	== Nil, "0", oCliente:LimiteCredito)))
        AADD(aVetor,{"A1_COD",oCliente:Codigo, Nil})
        AADD(aVetor,{"A1_LC" ,VAL(IIF(oCliente:LimiteCredito	== Nil, "0", oCliente:LimiteCredito)), Nil})

        //If(oCliente:TpLimite == "G")
        If(oCliente:GrupoLimite != Nil .And. !Empty(oCliente:GrupoLimite) )
            AADD(aVetor,{ "A1_GRPVEN", oCliente:GrupoLimite, Nil})
        EndIf
        //EndIf
        if !Empty(oCliente:DataVencLimite) .And. oCliente:DataVencLimite != Nil
            aData 	:= StrTokArr(oCliente:DataVencLimite,"/")
            //aData 	:= StrTokArr(oCliente:DataVencLimite,"T")
            aData2	:= StrTokArr(aData[3]," ")
            //aData2 := Replace(aData[1],"-","")

            If Len(aData[1]) == 2
                cDataLimite := aData2[1]+aData[1]+aData[2]
            Else
                cDataLimite := aData2[1]+"0"+aData[1]+aData[2]
            EndIf

            CONOUT(cDataLimite)
            CONOUT("DATA LIMITE: " + oCliente:DataVencLimite)
            AADD(aVetor,{"A1_VENCLC"		, StoD(cDataLimite)		, Nil})
        Else
            AADD(aVetor,{"A1_VENCLC"		, dDatabase	- 1		    , Nil})
        EndIf
    Else
        If !Empty(oCliente:NumProcessoBizagi)
            AADD(aVetor,{"A1_YBIZAGI",oCliente:NumProcessoBizagi, Nil})
        EndIf
    EndIf

    BEGIN TRANSACTION

        CONOUT(IIF(nOperacao == 3, 'WS Bizagi: Inserindo _Cliente...',  'WS Bizagi: Atualizando _Cliente...'))
        CONOUT('_Cliente : ' + oCliente:Nome)

        lMsErroAuto := .F.

        MSExecAuto({|x,y| Mata030(x,y)},aVetor,nOperacao)

        If lMsErroAuto

            cAuxErro := ""

            _aAutoerro := GetAutoGrLog()
            cLogTxt := xConvLog(_aAutoerro)
            CONOUT("-----------------------------------")
            CONOUT(cLogTxt)
            CONOUT("-----------------------------------")

            ::oResultado:Codigo 	:= 'ERRO'

            if !Empty(cLogTxt)
                ::oResultado:Erro		:= cLogTxt
            Else
                ::oResultado:Erro		:= xConvLogF(_aAutoerro)
            EndIf

            CONOUT('WS Bizagi: Erro - ' + xConvLogF(_aAutoerro))

            DisarmTransaction()

        Else

            ConOut("[WS_BIZAGI - Method Put_Cliente]: " + If (nOperacao == 3, "INSERT", "UPDATE") + " - fRetCodCli [CNPJ]: " + oCliente:CnpjCpf + " - [Processo Bizagi]: " + oCliente:NumProcessoBizagi)

            cCliBZ := fRetCodCli(oCliente:CnpjCpf, oCliente:NumProcessoBizagi)

            ConOut("[WS_BIZAGI - Method Put_Cliente]: " + If (nOperacao == 3, "INSERT", "UPDATE") + " - [_Cliente]: " + If (Empty(cCliBZ), "NAO ENCONTRADO", cCliBZ))

            If !Empty(cCliBZ)

                ::oResultado:Codigo := cCliBZ
                ::oResultado:Erro	:= ''

                ConOut("[WS_BIZAGI - Method Put_Cliente]: " + If (nOperacao == 3, "INSERT", "UPDATE") + " - [Operacao Realizada com Sucesso]")

            Else

                If nOperacao == 3

                    ::oResultado:Codigo := 'ERRO'

                    _aAutoerro := GetAutoGrLog()

                    cLogTxt := xConvLog(_aAutoerro)

                    ::oResultado:Erro	:= 'Erro Protheus: ' + cLogTxt + '( Favor Procurar a TI )'

                EndIf

            EndIf

        EndIf

    END TRANSACTION

    cCliBZ := ''

Return(.T.)

Method put_SolicitacaoCompra(SC) Class TBizagiInputSolicitView

    Local i
    Local cMatric 		:= ''
    Local cSolicEmp		:= ''
    Local cEmpresa		:= ''
    Local cDataAprov 	:= ''
    Local cMsgErroSC	:= ''
    Local lErroSC 		:= .F.
    Local cNumSC		:= ''
    Local jlDoc         := ""

    Conout("<:: Inciando inclusão da Solicitacao de Compras ::>")

    cSolicEmp := IIF(SC:SCCab:SolicEmpresa == Nil,'',Substring(SC:SCCab:SolicEmpresa,1,2))
    cMatric   := SC:SCCab:Matricula
    cEmpresa  := SC:SCCab:Empresa

    // Sera rodado via tela

    // IF !Empty(cEmpresa) .And. cEmpAnt + cFilAnt <> SubStr(cEmpresa,1,2) + SC:SCCab:Filial

    //     RPCSetType(3)
    //     RpcSetEnv(SubStr(cEmpresa,1,2), SC:SCCab:Filial)

    //     Conout("Empresa -> " + SubStr(cEmpresa,1,2))
    //     Conout("Filial -> " + SC:SCCab:Filial)

    // EndIf

    Conout("Matricula -> " + cMatric)
    CSQL := "SELECT C1_NUM FROM SC1"+SubStr(cEmpresa,1,2)+"0 WHERE C1_YBIZAGI='" + AllTrim(SC:SCCab:SolicitBizagi) + "' AND D_E_L_E_T_ = ''"
    Conout("CSQL -> " + CSQL )
    If chkfile("BZVERIF")
        dbSelectArea("BZVERIF")
        dbCloseArea()
    EndIf
    TCQUERY CSQL ALIAS "BZVERIF" NEW
    dbSelectArea("BZVERIF")

    If BZVERIF->(EOF())

        ::Log(cEmpAnt, cFilAnt, SC:SCCab:SolicitBizagi, SC:SCCab:Num_SC, "", "SolicitBizagi OK", "")

    Else

        ::Log(cEmpAnt, cFilAnt, SC:SCCab:SolicitBizagi, SC:SCCab:Num_SC, "", "SolicitBizagi existe no protheus", "")

    EndIf

    While !BZVERIF->(EOF())
        ::oResultado:Codigo := BZVERIF->C1_NUM
        ::oResultado:Erro 	:= ''
        CONOUT("--> Solicitação Existente: " + BZVERIF->C1_NUM  )
        dbCloseArea()
        Return(.T.)
    End
    dbCloseArea()

    VarInfo("SC", SC)

    //                                                       Verifica Data Aprovação
    //******************************************************************************
    cDataAprov := AllTrim(SC:SCCab:DataAprovacao)
    xxDtAprov  := ""
    CSQL := "SELECT CONVERT(VARCHAR,CONVERT(DATETIME,'" + cDataAprov + "'),112) +'-'+ SUBSTRING(CONVERT(VARCHAR,CONVERT(DATETIME,'" + cDataAprov + "'),108),1,5) AS DATAAPRV "
    If chkfile("_TIME")
        dbSelectArea("_TIME")
        dbCloseArea()
    EndIf
    TCQUERY CSQL ALIAS "_TIME" NEW
    dbSelectArea("_TIME")
    dbGoTop()
    xxDtAprov := _TIME->DATAAPRV
    dbSelectArea("_TIME")
    dbCloseArea()

    If Empty(xxDtAprov)
        ::oResultado:Codigo := ''
        ::oResultado:Erro   := 'Erro - A data de aprovação está incorreta!'
        CONOUT(cMsgErroSC)
        Return(.T.)
    EndIf

    SC1->(dbSetOrder(1))

    If SC1->(dbSeek(xFilial("SC1") + SC:SCCab:Num_SC))

        jlDoc := GetSXENum("SC1","C1_NUM")

        SC1->(dbSetOrder(1))

        While SC1->(dbSeek(xFilial("SC1") + jlDoc))
            ConfirmSX8()
            jlDoc := GetSXENum("SC1", "C1_NUM")
        End

        ::Log(cEmpAnt, cFilAnt, SC:SCCab:SolicitBizagi, SC:SCCab:Num_SC, jlDoc, "", "Numero pedido ja existe no Protheus!", "")

    Else

        jlDoc := SC:SCCab:Num_SC

    EndIf

    BEGIN TRANSACTION

        For i:= 1 To Len(SC:SCItem)

            cProduto := If(Empty(Replace(SC:SCItem[i]:Produto, "-", "")), SC:SCItem[i]:Produto_new, SC:SCItem[i]:Produto)

            SB1->(dbSetOrder(1))
            If !SB1->(dbSeek(xFilial("SB1") + Alltrim(cProduto)))
                lErroSC 	:= .T.
                cMsgErroSC 	:= 'Erro - O Produto ' + cProduto + ' não está cadastrado!'
                ::oResultado:Codigo := ''
                ::oResultado:Erro   := cMsgErroSC
                CONOUT(cMsgErroSC)
                DisarmTransaction()
                Exit
            EndIf

            dbSelectArea("SC1")
            RecLock("SC1",.T.)

            SC1->C1_FILIAL  := SC:SCCab:Filial
            SC1->C1_NUM     := jlDoc
            SC1->C1_ITEM    := SC:SCItem[i]:Item
            SC1->C1_PRODUTO := AllTrim(cProduto)
            If Substr(AllTrim(cProduto),1,3) == '306'
                If Empty(AllTrim(SC:SCItem[i]:DescricaoProduto))
                    lErroSC 	:= .T.
                    cMsgErroSC 	:= 'Erro - O Item '+SC:SCItem[i]:Item +' está sem descrição!'
                    ::oResultado:Codigo := ''
                    ::oResultado:Erro   := cMsgErroSC
                    CONOUT(cMsgErroSC)
                    DisarmTransaction()
                    Exit
                EndIf
                SC1->C1_DESCRI  := Upper(AllTrim(SC:SCItem[i]:DescricaoProduto))
            Else
                SC1->C1_DESCRI :=  AllTrim(SB1->B1_DESC)
            EndIf
            SC1->C1_UM      := SC:SCItem[i]:PriUnidadeMedida
            SC1->C1_QUANT   := SC:SCItem[i]:PriQuantidade
            If SC:SCItem[i]:Fornecedor != Nil
                SC1->C1_YFORNEC	:= Upper(SC:SCItem[i]:Fornecedor)
            EndIf
            SC1->C1_YSI    	:= SC:SCItem[i]:CodCliente
            If !Empty(SC:SCItem[i]:SegUnidadeMedida)
                SC1->C1_SEGUM   := SC:SCItem[i]:SegUnidadeMedida
            Else
                SC1->C1_SEGUM   := SC:SCItem[i]:PriUnidadeMedida
            EndIf
            If SC:SCItem[i]:SegQuantidade != Nil .And. SC:SCItem[i]:SegQuantidade != 0
                SC1->C1_QTSEGUM   := SC:SCItem[i]:SegQuantidade
            Else
                SC1->C1_QTSEGUM   := SC:SCItem[i]:PriQuantidade
            EndIf
            If SC:SCItem[i]:Observacao != Nil
                SC1->C1_YOBS    := Upper(SC:SCItem[i]:Observacao)
            EndIf
            SC1->C1_YTAG    := SC:SCItem[i]:Tag
            SC1->C1_QTDORIG := SC:SCItem[i]:PriQuantidade
            SC1->C1_YAPLIC  := IIF(EMPTY(SC:SCItem[i]:Aplicacao),"0",SC:SCItem[i]:Aplicacao)
            SC1->C1_YANX	:= SC:SCItem[i]:TemAnexo
            SC1->C1_IMPORT 	:= IIF(!Empty(SC:SCItem[i]:Importado), IIF(SC:SCItem[i]:Importado == '1' .Or. SC:SCItem[i]:Importado == 'S' .Or. UPPER(SC:SCItem[i]:Importado) == 'TRUE', 'S', 'N' ), 'N'  )
            SC1->C1_Cotacao	:= IIF(!Empty(SC:SCItem[i]:Importado), IIF(SC:SCItem[i]:Importado == '1' .Or. SC:SCItem[i]:Importado == 'S' .Or. UPPER(SC:SCItem[i]:Importado) == 'TRUE', 'IMPORT', '' ), ''  )
            SC1->C1_APROV  	:= "L"
            SC1->C1_YMAT    := CMATRIC
            SC1->C1_YSOLEMP := cSolicEmp
            SC1->C1_SOLICIT := UPPER(SC:SCCab:NomeSolicitante)
            SC1->C1_EMISSAO := STOD(Replace(SUBSTR(SC:SCCab:DataEmissao,1,10), "-", ""))
            SC1->C1_YSTATUS := SC:SCCab:Prioridade
            SC1->C1_DATPRF  := STOD(Replace(SUBSTR(SC:SCCab:Necessidade,1,10), "-", ""))
            SC1->C1_YINDSUG	:= SC:SCCab:Indicacao
            SC1->C1_YATSERV	:= IIF(UPPER(SC:SCItem[i]:AtenderServico) == "TRUE","S","N")
            SC1->C1_YDRIVER := IIF(SC:SCItem[i]:Driver == Nil,'',IIF(EMPTY(SC:SCItem[i]:Driver),"",SC:SCItem[i]:Driver))
            If !Empty(SC:SCCab:Contrato) .And. AllTrim(SC:SCCab:Contrato) != '000000'
                SC1->C1_YCONTR  := SC:SCCab:Contrato
            EndIf
            If !Empty(SC:SCCab:Melhoria) .And. AllTrim(SC:SCCab:Melhoria) != '000000'
                SC1->C1_YMELHOR := SC:SCCab:Melhoria
            EndIf
            SC1->C1_LOCAL   := SC:SCItem[i]:Armazem
            SC1->C1_YGRUPO  := SB1->B1_GRUPO
            If (SC:SCItem[i]:Conta != "00000000" )
                SC1->C1_CONTA   := SC:SCItem[i]:Conta
            ElseIf SubStr(SC:SCCab:ClasseValor, 1, 1) $  "1_2_4_8" .And. !Empty(SB1->B1_YCTRADM)
                SC1->C1_CONTA   := SB1->B1_YCTRADM
            ElseIf SubStr(SC:SCCab:ClasseValor, 1, 1) == "3" .And. !Empty(SB1->B1_YCTRIND) .And. SB1->B1_TIPO <> "PI"
                SC1->C1_CONTA   := SB1->B1_YCTRIND
            Else
                SC1->C1_CONTA   := SB1->B1_CONTA
            EndIf
            SC1->C1_CC      := Posicione("CTH",1,XFILIAL("CTH")+ alltrim(SC:SCCab:ClasseValor),"CTH_YCC")
            SC1->C1_CLVL    := SC:SCCab:ClasseValor
            If !Empty(SC:SCCab:ItemConta) .And. AllTrim(SC:SCCab:ItemConta) != '0000'
                SC1->C1_ITEMCTA := SC:SCCab:ItemConta
            EndIf
            SC1->C1_QTDORIG := SC:SCItem[i]:PriQuantidade
            SC1->C1_YDTINCB := Date()
            SC1->C1_YDATHOR := xxDtAprov
            SC1->C1_FILENT 	:= cFilAnt
            SC1->C1_YBIZAGI := AllTrim(SC:SCCab:SolicitBizagi)

            SC1->(MsUnlock())

        Next i

    END TRANSACTION

    If !lErroSC

        ConfirmSX8()
        ::oResultado:Codigo := jlDoc
        ::oResultado:Erro := ''
        CONOUT("--> Solicitacao Gerada: " + jlDoc)

    EndIf

Return(.T.)

Method Log(cEmp, cFil, cSolBizagi, cNum_SC, cNum_SCnovo, cItem, cSTatus, cObs) Class TBizagiInputSolicitView

    cSql := "INSERT INTO WSC_INPUT_BIZAGI_LOG "
    
    cSql += "( "
    cSql += "   Empresa, "
    cSql += "   Filial, "
    cSql += "   SolicitBizagi, "
    cSql += "   Num_SC, "
    cSql += "   Num_SC_Novo, "
    cSql += "   Item, "
    cSql += "   Status, "
    cSql += "   Obs "
    cSql += ") "

    cSql += "VALUES "

    cSql += "( "
    cSql +=     ValToSql(cEmp) + ", "
    cSql +=     ValToSql(cFil) + ", "
    cSql +=     ValToSql(cSolBizagi) + ", "
    cSql +=     ValToSql(cNum_SC) + ", "
    cSql +=     ValToSql(cNum_SCnovo) + ", "
    cSql +=     ValToSql(cItem) + ", "
    cSql +=     ValToSql(cSTatus) + ", "
    cSql +=     ValToSql(cObs)
    cSql += ") "

    TcSQLExec(cSql)

Return()

Static Function xConvLog(aAutoErro)

    Local cRet := ""

    If Len(aAutoErro) > 0
        cRet += aAutoErro[1]

        If cRet $ "MA030TOK"
            cRet := aAutoErro[2]
        EndIf
    EndIf
Return cRet


Static Function xConvLogF(aAutoErro)

    Local cRet := ""
    Local nX := 1

    For nX := 1 to Len(aAutoErro)
        cRet += aAutoErro[nX]+" - "
    Next nX

Return cRet