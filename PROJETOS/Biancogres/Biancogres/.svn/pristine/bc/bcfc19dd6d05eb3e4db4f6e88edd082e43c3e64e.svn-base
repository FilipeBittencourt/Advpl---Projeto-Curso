#INCLUDE "TOTVS.CH"
#INCLUDE "TOPCONN.CH"

/*/{Protheus.doc} TWorkFlowProcess
@author Fernando Rocha
@since 17/06/2019
@project Automação
@version 1.0
@description Classe para tratamento de processos de workflow
@type class
/*/

Class TWorkFlowProcess From TAutomacaoWorkFlow
	
	Public Data lAviso
	
	Public Method New() Constructor
	Public Method Get()
	Public Method Set(cTab, cFil, cID)
	Public Method SetProperty(cID)
	Public Method AddField(cField)
	Public Method AddUserField(cField, cTitulo, cTipo, cPict, nWidth)
	Public Method FormatField(cType, cPict, uValue)
	Public Method GetSQL(cTab, cFil, cID)
	Public Method Send()
	Public Method Validate()

EndClass


Method New() Class TWorkFlowProcess

	_Super:New()
	
	::lAviso := .F.
	
Return()


Method Get() Class TWorkFlowProcess
	Local cSQL := ""
	Local cQry := GetNextAlias()

	cSQL := " SELECT ZK2_TABELA, ZK2_FIL, ZK2_METODO "
	cSQL += " FROM "+ RetSQLName("ZK2")
	cSQL += " WHERE ZK2_IDPROC = " + ValToSQL(::cIDProc)
	cSQL += " AND ZK2_ENVWF = 'S' "
	cSQL += " AND D_E_L_E_T_ = '' "
	cSQL += " GROUP BY ZK2_TABELA, ZK2_FIL, ZK2_METODO "

	TcQuery cSQL New Alias (cQry)

	While !(cQry)->(Eof())

		If ::Set(AllTrim((cQry)->ZK2_TABELA), (cQry)->ZK2_FIL, AllTrim((cQry)->ZK2_METODO))
			
			If ::Validate()
			
				_Super:Send()
				
			EndIf
	
		EndIf

		(cQry)->(DbSkip())

	EndDo()

	(cQry)->(DbCloseArea())

Return()


Method Set(cTab, cFil, cID) Class TWorkFlowProcess
	Local lRet := .F.
	Local cSQL := ""
	Local cQry := GetNextAlias()
	Local nCount := 0

	::SetProperty(cID)

	//SE setou os campos para consulta
	If ::oLst:GetCount() > 0
		
		cSQL := ::GetSQL(cTab, cFil, cID)

		TcQuery cSQL New Alias (cQry)

		lRet := !(cQry)->(Eof())
		
		While !(cQry)->(Eof())

			For nCount := 1 To ::oLst:GetCount()

				::oLst:GetItem(nCount):oRow:Add(::FormatField(::oLst:GetItem(nCount):cType, ::oLst:GetItem(nCount):cPict, &((cQry)->(::oLst:GetItem(nCount):cName))))

			Next

			(cQry)->(DbSkip())

		EndDo()

		(cQry)->(DbCloseArea())

	EndIf
	
	If ( !Empty(::cMenRet) )
	
		lRet := .T.
	
	EndIf
		
Return(lRet)


Method SetProperty(cID) Class TWorkFlowProcess
	Local cSQL := ""
	Local cQry := GetNextAlias()

	cSQL := " SELECT TOP 1 ZK2_DTINI, ZK2_HRINI, ZK2_OPERAC, ZK2_EMP, ZK2_FIL "
	cSQL += " FROM "+ RetSQLName("ZK2")
	cSQL += " WHERE ZK2_IDPROC = " + ValToSQL(::cIDProc)
	cSQL += " AND ZK2_METODO = " + ValToSQL(cID)
	cSQL += " AND D_E_L_E_T_ = '' "
	cSQL += " ORDER BY ZK2_DTINI, ZK2_HRINI "

	TcQuery cSQL New Alias (cQry)

	If !Empty((cQry)->ZK2_OPERAC)

		::cTo := U_EmailWF(cID, (cQry)->ZK2_EMP)
		::cDate := dToC(sToD((cQry)->ZK2_DTINI))
		::cTime := (cQry)->ZK2_HRINI
		::cType := AllTrim((cQry)->ZK2_OPERAC)
		::cEmp := Capital(AllTrim(FWEmpName((cQry)->ZK2_EMP)))
		::cFil := Capital(AllTrim(FWFilialName((cQry)->ZK2_EMP, (cQry)->ZK2_FIL)))
		::cSubject := "TWorkFlowProcess - " + ::cMethod

	EndIf

Return()


Method AddField(cField) Class TWorkFlowProcess
	Local oField := Nil

	DbSelectArea("SX3")
	DbSetOrder(2)
	If DbSeek(cField)

		oField := TWorkFlowField():New()
		oField:cName := cField
		oField:cType := SX3->X3_TIPO
		oField:cPict := AllTrim(SX3->X3_PICTURE)
		oField:cTitle := AllTrim(SX3->X3_TITULO)
		oField:nWidth := CalcFieldSize(SX3->X3_TIPO, SX3->X3_TAMANHO, SX3->X3_DECIMAL, AllTrim(SX3->X3_PICTURE), SX3->X3_TITULO)
		
		::oLst:Add(oField)

	EndIf

Return()


Method AddUserField(cField, cTitulo, cTipo, cPict, nWidth) Class TWorkFlowProcess
	Local oField := TWorkFlowField():New()

	oField:cName := cField
	oField:cType := cTipo
	oField:cPict := cPict
	oField:cTitle := cTitulo
	oField:nWidth := nWidth
	oField:lUser := .T.

	::oLst:Add(oField)

Return()


Method FormatField(cType, cPict, uValue) Class TWorkFlowProcess
	Local uRet := Nil

	If cType == "D"

		uRet := dToC(sToD(uValue))

	Else

		uRet := AllTrim(Transform(uValue, cPict))

	EndIf

Return(uRet)


Method GetSQL(cTab, cFil, cID) Class TWorkFlowProcess
	Local cSQL := ""
	Local cFSelect := ""
	Local cSep := ","
	Local nCount := 0
	
	
	For nCount := 1 To ::oLst:GetCount()

		If !::oLst:GetItem(nCount):lUser

			If !Empty(cFSelect)
				cFSelect += cSep
			EndIf

			cFSelect += ::oLst:GetItem(nCount):cName
			
		EndIf

	Next nCount

	cSQL := " SELECT " + cFSelect + " "	
	cSQL += " FROM " + cTab
	cSQL += " WHERE " + PrefixoCpo(SubStr(cTab, 1, 3)) + "_FILIAL = " + ValToSQL(xFilial(SubStr(cTab, 1, 3)))
	cSQL += " AND R_E_C_N_O_ IN "
	cSQL += " ( "
	cSQL += " 	SELECT ZK2_IDTAB "
	cSQL += " 	FROM "+ RetSQLName("ZK2")
	cSQL += " 	WHERE ZK2_IDPROC = " + ValToSQL(::cIDProc)
	cSQL += " 	AND ZK2_METODO = " + ValToSQL(cID)
	cSQL += " 	AND ZK2_ENVWF = 'S' "
	cSQL += " 	AND D_E_L_E_T_ = '' "
	cSQL += "		GROUP BY ZK2_IDTAB "
	cSQL += " )"	
	cSQL += " ORDER BY " + cFSelect
	
Return(cSQL)


Method Send() Class TWorkFlowProcess

	::Get()

Return()


Method Validate() Class TWorkFlowProcess
	Local lRet := .T.
	
	lRet := !Empty(::cTo)

Return(lRet)