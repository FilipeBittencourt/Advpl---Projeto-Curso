#Include "TOTVS.CH"
#Include "Protheus.CH"


Class TPedidoCompra from TAbstractClass

	Public Data oPc
	Public Data oResult	
	
	Method GatCab()
	Method GatItem()
	Method ValidaCab()
	Method ValidaItem()
	Method GetCabecalho()
	Method GetItens()
	Method Remove()
	
	Public Method Execute()
	Public Method New() Constructor		
EndClass

Method New() Class TPedidoCompra
	_Super:New()	
	::oResult 	:= TPCResultStruct():New()
Return

Method GatCab() Class TPedidoCompra
Return 

Method GatItem(nPosicao) Class TPedidoCompra
Return 

//todas validações do cabecalho
Method ValidaCab() Class TPedidoCompra
Return 

//todas validações do item
Method ValidaItem(oObj) Class TPedidoCompra		
Return 


Method GetCabecalho() Class TPedidoCompra

	Local aCabec	:= {}
	
	::GatCab() 
	::ValidaCab() 
	
	aAdd(aCabec,{"C7_NUM" 		, PADR(::oPc:cNumero, TamSx3("C7_NUM")[1])			, Nil})
	aAdd(aCabec,{"C7_EMISSAO"	, ::oPc:dEmissao									, Nil})
	aAdd(aCabec,{"C7_FORNECE"	, PADR(::oPc:cFornece, TamSx3("C7_FORNECE")[1])		, Nil})
	aAdd(aCabec,{"C7_LOJA"		, PADR(::oPc:cLoja, TamSx3("C7_LOJA")[1])			, Nil})
	aAdd(aCabec,{"C7_COND"		, PADR(::oPc:cCond, TamSx3("C7_COND")[1])			, Nil})
	aAdd(aCabec,{"C7_CONTATO"	, PADR(::oPc:cContato, TamSx3("C7_CONTATO")[1])		, Nil})
	aAdd(aCabec,{"C7_TPFRETE"	, ::oPc:cTipoFrete									, Nil})
	aAdd(aCabec,{"C7_MOEDA" 	, ::oPc:cMoeda										, Nil})	
	
		
Return aCabec

Method GetItens() Class TPedidoCompra
	
	Local nI		:= 0
	Local aItens	:= {}
	Local aItem 	:= {}
	Local oItem		:= Nil
	
	For nI := 1 To ::oPc:oPcItens:GetCount()
		
		aItem	:= {}
		oItem := ::oPc:oPcItens:GetItem(nI)
		
		::GatItem(nI) 
		::ValidaItem(oItem) 
		
		aAdd(aItem,			{"C7_NUMSC" 		, PADR(oItem:cNumSc, TamSx3("C7_NUMSC")[1])				, Nil})
		aAdd(aItem,			{"C7_ITEMSC" 		, PADR(oItem:cItemSc, TamSx3("C7_ITEMSC")[1])			, Nil})
		aAdd(aItem,			{"C7_QTDSOL" 		, oItem:nQuantSc										, Nil})
		If (!Empty(oItem:cCodTag))
			aAdd(aItem,			{"C7_CODTAB" 		, PADR(oItem:cCodTag, TamSx3("C7_CODTAB")[1])			, Nil})
		EndIf
		
		aAdd(aItem,			{"C7_PRODUTO" 		, PADR(oItem:cCodProd, TamSx3("C7_PRODUTO")[1])			, Nil})
		aAdd(aItem,			{"C7_LOCAL" 		, PADR(oItem:cLocal,TamSx3("C7_LOCAL")[1])				, Nil})
		aAdd(aItem,			{"C7_DESCRI" 		, PADR(oItem:cDescProd, TamSx3("C7_DESCRI")[1])			, Nil})
		
		aAdd(aItem,			{"C7_QUANT" 		, oItem:nQuant											, Nil})
		aAdd(aItem,			{"C7_PRECO" 		, oItem:nPreco	 										, Nil})
		aAdd(aItem,			{"C7_TOTAL" 		, oItem:nTotal	 										, Nil})
		aAdd(aItem,			{"C7_TES" 			, PADR(oItem:cTES, TamSx3("C7_TES")[1])	 				, Nil})
		aadd(aItem,			{"C7_YTRANSP" 		, PADR(oItem:cTransp, TamSx3("C7_YTRANSP")[1])			, Nil})
		//aadd(aItem,			{"C7_APROV" 		, PADR('000000', TamSx3("C7_APROV")[1])					, Nil})
		
		
				
		AAdd(aItens, aItem)
	
	Next nI   
	
Return aItens


Method Remove() Class TPedidoCompra


Return 


Method Execute(_oPcResulStruct) Class TPedidoCompra

	
	Local aCabec			:= {}
	Local aItens			:= {}
	
	Local lOk				:= .F.
	Local cMsgLog			:= ""
	Local nI				:= 0
	Local nOpc				:= 0
	
	Local aErroAuto			:= {}
	
	Private lMsErroAuto 	:= .F.
	Private lMsHelpAuto 	:= .T.
	Private lAutoErrNoFile	:= .T.

	::oPc 		:= _oPcResulStruct
	
	DbSelectArea("SC7")
	SC7->(DbSetOrder(1))
	
	If !SC7->(DbSeek(xFilial('SC7')+PADR(::oPc:cNumero, TamSx3("C7_NUM")[1])))
		
		aCabec	:= ::GetCabecalho()
		aItens	:= ::GetItens()
		
		Begin Transaction
			
			MSExecAuto({|k,v,w,x,y,z| MATA120(k,v,w,x,y,z)},1, aCabec, aItens,3,,)
			
			If (!lMsErroAuto)
			
				lOk			:= .T.
				cMsgLog 	:= "[Pedido Numero: "+::oPc:cNumero+", Fornecedor: "+::oPc:cFornece+"] => inserido com sucesso."
			
			Else
				
				DisarmTransaction()
				
				lOk			:= .F.
				cMsgLog 	:= "[Pedido Numero: "+::oPc:cNumero+", Fornecedor: "+::oPc:cFornece+"] Erro => "+ CRLF
				
				aErroAuto	:= GetAutoGRLog()
				
				For nI := 1 To Len(aErroAuto)
					cMsgLog += StrTran(StrTran(aErroAuto[nI], "<", ""), "-", "") + " "
				Next nI		
				
			EndIf
			
		End Transaction 	
	
	Else
		
		lOk			:= .F.
		cMsgLog 	:= "[Pedido Numero: "+::oPc:cNumero+", Fornecedor: "+::oPc:cFornece+"] => já existe."
		
	EndIf
	
	::oResult:Add(lOk, cMsgLog)
	

Return ::oResult



Class TPCStruct from LongClassName

	Public Data cNumero
	Public Data dEmissao
	Public Data cFornece
	Public Data cLoja
	Public Data cCond
	Public Data cContato
	Public Data cTipoFrete
	Public Data cMoeda
	
	Public Data oPcItens

	Public Method New() Constructor

EndClass

Method New() Class TPCStruct

	::cNumero 				:= ""
	::dEmissao				:= Date()
	::cFornece				:= ""
	::cLoja					:= ""
	::cCond					:= ""
	::cContato				:= ""
	::cTipoFrete			:= ""
	::cMoeda				:= ""
	
	::oPcItens	    	:= ArrayList():New()

Return()

Class TPCItemStruct From LongClassName

	Public Data cNumSc
	Public Data cItemSc
	Public Data nQuantSc
	Public Data cCodTag
	Public Data cLocal
	Public Data cCodProd
	Public Data cDescProd
	Public Data nQuant
	Public Data nPreco
	Public Data nTotal
	Public Data cTes
	Public Data cTransp
		
	Public Method New() Constructor

EndClass

Method New() Class TPCItemStruct

	::cNumSc		:= ""
	::cItemSc		:= ""
	::nQuantSc		:= 0
	::cCodTag		:= ""
	::cLocal		:= ""
	::cCodProd		:= ""
	::cDescProd		:= ""
	::nQuant		:= 0
	::nPreco		:= 0
	::nTotal		:= 0
	::cTES			:= ""
	::cTransp		:= ""
		
Return()


Class TPCResultStruct From LongClassName
	
	Public Data lOk		as logical
	Public Data cMensagem	as character
	Public Data oResult	

	Public Method New() Constructor
	Public Method Add()
	
EndClass

Method New() Class TPCResultStruct

	::lOk		:= .T.
	::cMensagem	:= ""
	::oResult	:= Nil
Return()

Method Add(lOk, cMensagem, oResult) Class TPCResultStruct

	::lOk		:= lOk
	::cMensagem	+= cMensagem
	::oResult	:= oResult

Return()