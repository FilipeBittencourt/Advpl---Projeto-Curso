#Include "TOTVS.CH"
#Include "Protheus.CH"
#Include "TOPCONN.CH"

Class TAcessoTelemarketing From LongClassName

	Public Data cUsuario 
	//metodos publicos	
	Public Method New() Constructor
	Public Method UserTelemaketing()	
	Public Method ListRepreUser()
	Public Method GetRepreUser()	
	Public Method ListSA1Repre()
	Public Method CheckSA1Repre()
	Public Method GetSA1CodRepre()
	Public Method FiltroSA1() 
	Public Method FiltroSC5()
	
EndClass


Method New(cUsuario) Class TAcessoTelemarketing

	::cUsuario		:= IIF(cUsuario <> Nil, cUsuario, cUserName)

Return()

Method UserTelemaketing() Class TAcessoTelemarketing
	
	Local cUsuarios	:= GetNewPar("MV_TELMARU", "")
	
	If (cUserName $ cUsuarios)
		Return .T.
	EndIf

Return .F.

Method ListRepreUser() Class TAcessoTelemarketing

	Local aListaAux	:= {}
	Local aLista	:= {}
	Local nI		:= 0
	Local nJ		:= 0
	Local cRepUser	:= GetNewPar("MV_TELMARR", "")
	Local aRet		:= {}
	Local aDados	:= {}
	Local aRepre	:= {}
	
	aListaAux := StrTokArr2(cRepUser, "|")	
	
	For nI :=1 To Len (aListaAux)
		
		//chave=valor
		//usuario=representante
		//T00001=000635,MG;000555,MG;000528,;000529,;000279,;000280,;000532,;
		
		aRet := StrTokArr2(aListaAux[nI], "=")	
		
		If (AllTrim(::cUsuario) == AllTrim(aRet[1]))
			
			aRepre := StrTokArr(aRet[2], ";")	
			
			aDados := {}
			
			For nJ :=1 To Len (aRepre)
				aDados := StrTokArr(aRepre[nJ], ",")
				
				If (Len(aDados) > 0)
					Aadd(aLista, aDados)
				EndIf
				
			Next nJ
			
			
		EndIf
		
	Next nI
	
Return(aLista)


Method GetRepreUser() Class TAcessoTelemarketing

	Local cListRepre	:= ""
	Local aLista		:= {}
	Local nI			:= 0
	
	aLista	:= ::ListRepreUser()
	
	For nI :=1 To Len (aLista)
		
		If !(Empty(aLista[nI]))
			
			cListRepre += "'"+aLista[nI][1]+"'"
			
			If (nI < Len (aLista))
				cListRepre += ","
			EndIf
			
		EndIf
				
	Next nI

Return cListRepre


Method FiltroSA1(cTipo, cMarca, cVende) Class TAcessoTelemarketing
	
	Local nI		:= 0
	Local nJ		:= 0
	Local nK		:= 0
	Local cFiltro	:= ""
	Local aListaRep	:= ::ListRepreUser()
	Local nPos		:= 0
	Local lAchou	:= .F.
	Local aListaVen := {;
		'A1_VEND',; //Bianco
		'A1_YVENDI' ; //Incesa
		}
		
	
	Default cTipo 	:= 'P'
	Default cMarca 	:= ''
	Default cVende	:= ''	
		
	
	If (!Empty(cMarca))
		If (cMarca == '1')
			aListaVen := {'A1_VEND'}
		ElseIf (cMarca == '2')
			aListaVen := {'A1_YVENDI'}
		EndIf
	EndIf	
		
	IF(cTipo <> 'S') 
		cFiltro += " (A1_YCAT = 'SILVER    ' .OR. A1_YCAT = 'NAO RANK') .AND. ( " 
	Else
		cFiltro += " (A1_YCAT = 'SILVER    ' OR A1_YCAT = 'NAO RANK') AND ( " 
	EndIf	
	
	If (!Empty(cVende))
		
		For nI :=1 To Len (aListaVen)
				
				nPos := AScan(aListaRep, {|x| AllTrim(x[1]) == AllTrim(cVende) } )
				If (nPos > 0)
					
					lAchou := .T.
					
					cFiltro += " ( "
				
					cFiltro += " "+aListaVen[nI]+" = '"+aListaRep[nPos][1]+"' "
					
					//posicao 1 codigo representante
					For nK := 2 To Len (aListaRep[nPos])
						
						If (!Empty( aListaRep[nJ][nK]))
							cFiltro +=  IIF(cTipo <> 'S', " .AND. ", " AND ") 
							cFiltro +=  " A1_EST = '"+aListaRep[nPos][nK]+"' "
						EndIf
					
					Next nK
					
					cFiltro += " ) "
				
					If (nI < Len (aListaVen))
						cFiltro += IIF(cTipo <> 'S', " .OR. ", " OR ") 
					EndIf
					
				EndIf
				
		Next nI			
	
	EndIf
	
	
	If (Empty(cVende) .Or. !lAchou)
		
		For nI :=1 To Len (aListaVen)
		
		
			For nJ :=1 To Len (aListaRep)
				
				cFiltro += " ( "
				
				cFiltro += " "+aListaVen[nI]+" = '"+aListaRep[nJ][1]+"' "
				
				
				//posicao 1 codigo representante
				For nK :=2 To Len (aListaRep[nJ])
					
					If (!Empty( aListaRep[nJ][nK]))
						cFiltro +=  IIF(cTipo <> 'S', " .AND. ", " AND ") 
						cFiltro +=  " A1_EST = '"+aListaRep[nJ][nK]+"' "
					EndIf
				
				Next nK
				
				cFiltro += " ) "
				
				If (nJ < Len (aListaRep))
					cFiltro +=  IIF(cTipo <> 'S', " .OR. ", " OR ") 
				EndIf
				
				
			Next nJ
					
			If (nI < Len (aListaVen))
				cFiltro += IIF(cTipo <> 'S', " .OR. ", " OR ") 
			EndIf
					
		Next nI
		
	EndIf
	
		
	
	
	cFiltro += " ) " 
	
Return cFiltro

Method FiltroSC5() Class TAcessoTelemarketing
	
	Local nI		:= 0
	Local aListaRep	:= ::ListRepreUser()
	Local cFiltro	:= "  C5_FILIAL = '"+xFilial("SC5")+"' .AND. DTOS(C5_EMISSAO) >= '"+DTOS(ddatabase - 90)+"' "
	
	cFiltro	+= "  .AND. (C5_YCATCLI = 'SILVER    ' .OR. C5_YCATCLI = 'NAO RANK' ) "
	
	cFiltro += " .AND. ( "
	
	
	For nI :=1 To Len (aListaRep)
	
		cFiltro += " C5_VEND1 =  '"+aListaRep[nI][1]+"' "
		
		If (nI < Len (aListaRep))
			cFiltro += " .OR. "
		EndIf
				
		
	Next nI
	
	cFiltro += " ) "	
	
Return cFiltro

Method ListSA1Repre(cMarca) Class TAcessoTelemarketing
	
	Local cAliasTmp := GetNextAlias()
	Local aLista	:= {}
	Local cFiltro	:= ::FiltroSA1('S', cMarca)
	Local cQuery	:= ""
	
	cQuery += " select DISTINCT	A1_COD																			"
	cQuery += " from " + RetSQLName("SA1") + "                                                                  "
	cQuery += " where                                                                                           "
	cQuery += " D_E_L_E_T_	= ''			                                            	                    "
	cQuery += " AND A1_MSBLQL 	<> 1		               		                                                "
	cQuery += " AND (						               		                                                "
	cQuery += cFiltro
	cQuery += " )							               		                                                "
	
	TcQuery cQuery New Alias (cAliasTmp)
		
	While (!(cAliasTmp)->(Eof()))
		
		Aadd(aLista,  (cAliasTmp)->A1_COD)
		
		(cAliasTmp)->(DbSkip())
	EndDo	
	
	(cAliasTmp)->(DbCloseArea())
		
Return aLista

Method GetSA1CodRepre(cMarca) Class TAcessoTelemarketing
	
	Local nI		:= 0
	Local aLista	:= {}
	Local cFiltro	:= ""
	Default cMarca 	:= ''	 
	
	aLista	:= ::ListSA1Repre(cMarca)
	
	For nI :=1 To Len (aLista)
	
		cFiltro += " '"+aLista[nI][1]+"' "
		
		If (nI < Len (aLista))
			cFiltro += ", "
		EndIf
		
	Next nI
		
Return cFiltro

Method CheckSA1Repre(cCod, cMarca) Class TAcessoTelemarketing
	
	Local aLista	:= ::ListSA1Repre(cMarca)
	Local nExite 	:= AScan(aLista, {|x| AllTrim(x) == AllTrim(cCod) } )
		
Return nExite
