#INCLUDE "PROTHEUS.CH"
#INCLUDE "TOPCONN.CH"

/*/{Protheus.doc} TBizagiIntegracaoCredito
@author Wlysses Cerqueira (Facile)
@since 02/07/2020  
@project 24427
@version 1.0
@description 
@type function
/*/

User Function BIPROCCR()

    Local oObj := Nil

    //RpcSetEnv("01", "01")

    oObj := TBizagiIntegracaoCredito():New()

    oObj:Processa()

    //RpcClearEnv()

Return()

    Class TBizagiIntegracaoCredito From LongClassName

        Data aErro
        Data cEmail

        Public Method New() Constructor
        Public Method Processa()

        // Feito via reclock
        Public Method InputCredito()

        // Feito via ExecAuto
        Public Method ExecCredito(cQry)

        Public Method ValidateProd()
        Public Method Status(cStatus, nId, cLog, cCodSol)
        Public Method GetErrorLog()
        Public Method LogMail()

    EndClass

Method New(lJob) Class TBizagiIntegracaoCredito

    ::aErro:= {}
    ::cEmail := U_GetBiaPar("MV_EMAILINTBIZCRE", "sistemas.ti@biancogres.com.br")

Return(Self)

Method Processa() Class TBizagiIntegracaoCredito

    Local cQry := GetNextAlias()
    Local cSQL := ""

    cSQL := " SELECT *, ISNULL(CONVERT(NVARCHAR(2048),CRE_OBSERVA),'') CRE_OBSERVA_M, ISNULL(CONVERT(NVARCHAR(2048),CRE_OBS_LIB),'') CRE_OBS_LIB_M"
    cSQL += " FROM dbo.BZINTEGRACAO_SOLCRED "
    cSQL += " WHERE STATUS = 'A' "
    cSQL += " ORDER BY ID "

    TcQuery cSQL New Alias (cQry)

    While !(cQry)->(EOF())

        If ::ValidateProd(cQry)

            Begin Transaction

                ::InputCredito(cQry)

            End Transaction

        EndIf

        (cQry)->(DbSkip())

    EndDo

    (cQry)->(DbCloseArea())

    ::LogMail()

Return()

Method InputCredito(cQry) Class TBizagiIntegracaoCredito

    Local lRet := .T.
    Local cCodSol := ""
    Local lInsert := .T.

    If !Empty((cQry)->CRE_BIZAGI)

        If Empty(Alltrim((cQry)->CRE_CODIGO))

            lInsert := .T.

            cCodSol	:= GetSxEnum('SZU', 'ZU_CODIGO')

        Else

            SZU->(DbSetOrder(1)) // ZU_CODIGO, R_E_C_N_O_, D_E_L_E_T_      -> TA FALTANDO FILIAL AQUI <-

            If SZU->(DbSeek(xFilial("SZU") + (cQry)->CRE_CODIGO))

                lInsert := .F.

                cCodSol	:= SZU->ZU_CODIGO
                
            Else

                ::Status("E", (cQry)->ID, "Solicitacao de Credito: " + (cQry)->CRE_CODIGO + " não encontrada", (cQry)->CRE_CODIGO)

                Return()

            EndIf

        EndIf

        ConOut("[TBizagiIntegracaoCredito - Method PutSolicCredito]: " + If (lInsert, "INSERT", "UPDATE") + " - [Processo Bizagi]: " + (cQry)->CRE_BIZAGI)

        DbSelectArea("SZU")

        If lInsert

            ConOut("[TBizagiIntegracaoCredito - Method PutSolicCredito]: INSERT - [Processo Bizagi]: " + (cQry)->CRE_BIZAGI + " - [CodSol]: " + cCodSol)

            SZU->(RecLock("SZU", lInsert))
            SZU->ZU_FILIAL	:= xFilial("SZU")
            SZU->ZU_CODIGO	:= cCodSol
            SZU->ZU_NOV_CLI	:= "NOV"
            SZU->ZU_PEDIDO	:= "*"
            SZU->ZU_TIPOPAG	:= "BANCO"
            SZU->ZU_STATUS	:= "PENDENTE"
            SZU->ZU_COND_PA	:= "903"
            SZU->ZU_OBSERVA	:= "CLIENTE NOVO!"
            SZU->ZU_USUARIO	:= 'B-' + If (Len((cQry)->CRE_USUARIO) > 23, Substring((cQry)->CRE_USUARIO,1, 23), (cQry)->CRE_USUARIO)
            SZU->ZU_CODCLI	:= (cQry)->CRE_CODCLI
            SZU->ZU_VALOR	:= If ((cQry)->CRE_VALOR == Nil, '0', (cQry)->CRE_VALOR)
            
            // Criar parametro para pegar no bizagi
            SZU->ZU_VROBRA := 0
            
            //SZU->ZU_OBSERVA	:= If ((cQry)->CRE_OBSERVA_M == Nil, "", (cQry)->CRE_OBSERVA_M	)
            SZU->ZU_PEDIDO	:= If ((cQry)->CRE_PEDIDO == "",  "*", (cQry)->CRE_PEDIDO)
            SZU->ZU_DATA	:= dDatabase
            SZU->ZU_SHORA	:= Time()
            SZU->ZU_PRAZO	:= DataValida(DataValida(DataValida(dDatabase + 1) + 1) + 1)
            SZU->ZU_BIZAGI	:= (cQry)->CRE_BIZAGI

						// Politica de Credito - Rocket
						DbSelectArea("SA1")
						SA1->(DbSetOrder(1))
						If SA1->(DbSeek(xFilial("SA1") + SZU->ZU_CODCLI))

							SZU->ZU_CODPRO := U_BIAF146(dDataBase, SA1->A1_COD, SA1->A1_LOJA, SA1->A1_GRPVEN, SA1->A1_CGC, SZU->ZU_VALOR, 0, "2", .F.)
						
						EndIf
						
						SZU->(MsUnLock())

            ConfirmSX8()

            ::Status("P", (cQry)->ID, "", cCodSol)

        Else

            ConOut("[TBizagiIntegracaoCredito - Method PutSolicCredito]: UPDATE - [Processo Bizagi]: " + (cQry)->CRE_BIZAGI + " - [CodSol]: " + cCodSol)

            SZU->(DbSetOrder(1))
            If SZU->(DbSeek(xFilial("SZU") + cCodSol))

                SZU->(RecLock("SZU",.F.))

                If Upper(AllTrim((cQry)->CRE_STATUS)) $ "REPROVADO/APROVADO"

                    SZU->ZU_DATAAPR	:= DATE()
                    SZU->ZU_OBS_LIB := UPPER(If ((cQry)->CRE_OBS_LIB_M	== Nil, "", (cQry)->CRE_OBS_LIB_M))
                    SZU->ZU_STATUS  := UPPER((cQry)->CRE_STATUS)

                EndIf

                If Upper(AllTrim((cQry)->CRE_STATUS)) == "APROVADO"

                    SZU->ZU_VALOR := (cQry)->CRE_VALOR

                EndIf

                SZU->ZU_TIPOPAG := If ((cQry)->CRE_TIPOPAG == Nil, "BANCO", (cQry)->CRE_TIPOPAG)
                SZU->ZU_COND_PA := If ((cQry)->CRE_COND_PA == Nil, "903", (cQry)->CRE_COND_PA)
                SZU->ZU_EMPRESA := If ((cQry)->CRE_EMPRESA	== Nil, "", (cQry)->CRE_EMPRESA)
                SZU->ZU_USUARIO := 'B-' + If (Len((cQry)->CRE_USUARIO) > 23, Substring((cQry)->CRE_USUARIO,1, 23), (cQry)->CRE_USUARIO)
                SZU->ZU_CODCLI := (cQry)->CRE_CODCLI

                SZU->(MsUnLock())

                ::Status("P", (cQry)->ID, "", cCodSol)

            Else

                ConOut("[TBizagiIntegracaoCredito - Method PutSolicCredito]: UPDATE - [Processo Bizagi]: " + (cQry)->CRE_BIZAGI + " - [CodSol]: " + cCodSol + " NAO ENCONTRADA")

                ::Status("E", (cQry)->ID, "Solicitacao de Credito: "+ cCodSol +" não encontrada", cCodSol)

            EndIf

        EndIf

    Else

        ConOut("[TBizagiIntegracaoCredito - Method PutSolicCredito]: " + If (lInsert, "INSERT", "UPDATE") + " - [Processo Bizagi]: NULL")

        ::Status("E", (cQry)->ID, "Numero do Processo Bizagi nao informado - [Cliente]: " + (cQry)->CRE_CODCLI, (cQry)->CRE_CODCLI)

    EndIf

Return(lRet)

Method ExecCredito(cQry) Class TBizagiIntegracaoCredito

    Private lMsErroAuto := .F.
    Private lMsHelpAuto := .T.
    Private lAutoErrNoFile := .T.

Return(lMsErroAuto)

Method ValidateProd() Class TBizagiIntegracaoCredito

    Local lRet := .T.

Return(lRet)

Method Status(cStatus, nId, cLog, cCodSol) Class TBizagiIntegracaoCredito

    Local lRet := .T.
    Local cSql := ""

    Default cStatus := "" // E=Erro; P=Processado; A=Aguard. Processamento
    Default cLog := ""
    Default nId := 0
    Default cCodSol := ""

    If cStatus == "E"

        aAdd(::aErro, {cCodSol, cLog})

    EndIf

    cSql := " UPDATE dbo.BZINTEGRACAO_SOLCRED SET "

    cSql += " STATUS   = " + ValToSql(cStatus)
    cSql += " , LOG    = " + ValToSql(cLog)

    If cStatus == "P"

        cSql += " , CRE_CODIGO = " + ValToSql(cCodSol)

    EndIf

    cSql += " , DTINTEGRA = " + ValToSql(DTOS(dDataBase))
    cSql += " , HRINTEGRA = CONVERT(VARCHAR(8), GETDATE(), 114) "

    cSql += " WHERE ID = " + cValToChar(nId)

    lRet := TcSQLExec(cSql) == 0

    If !lRet

        ConOut("TBizagiIntegracaoCredito: TCSQLError() -> " + TCSQLError())

    EndIf

Return(lRet)

Method GetErrorLog() Class TBizagiIntegracaoCredito

    Local cRet := ""
    Local nX := 1
    Local aError := GETAUTOGRLOG()

    For nX := 1 To Len(aError)

        cRet += aError[nX] + CRLF

    Next nX

Return(cRet)

Method LogMail() Class TBizagiIntegracaoCredito

    Local nW    := 0
    Local lFound := .F.
    Local cNum := ""
    Local cHtml := ""
    Local oMail := TAFMail():New()

    For nW := 1 To Len(::aErro)

        If AllTrim(::aErro[nW][2]) <> AllTrim("<br><pre> -> ARRAY (    0) [...]<br></pre><br>")

            If cNum <> ::aErro[nW][1]

                If !Empty(cNum)

                    cHtml += '</tbody>'
                    cHtml += '</table>'

                EndIf

                cNum := ::aErro[nW][1]

                cHtml += '<style type="text/css">'
                cHtml += '.tg  {border-collapse:collapse;border-color:#aaa;border-spacing:0;}'
                cHtml += '.tg td{background-color:#fff;border-color:#aaa;border-style:solid;border-width:1px;color:#333;'
                cHtml += '  font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;word-break:normal;}'
                cHtml += '.tg th{background-color:#f38630;border-color:#aaa;border-style:solid;border-width:1px;color:#fff;'
                cHtml += '  font-family:Arial, sans-serif;font-size:14px;font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}'
                cHtml += '.tg .tg-zw5y{border-color:inherit;text-align:center;text-decoration:underline;vertical-align:top}'
                cHtml += '.tg .tg-0lax{text-align:left;vertical-align:top}'
                cHtml += '</style>'

                cHtml += '<table width="100%" class="tg">'
                cHtml += '<thead>'
                cHtml += '  <tr>'
                cHtml += '    <th class="tg-zw5y">' + cEmpAnt + cFilAnt + ' - Novo Credito: ' + ::aErro[nW][1] + '</th>'
                cHtml += '  </tr>'
                cHtml += '</thead>'
                cHtml += '<tbody>'

            EndIf

            lFound := .T.

            cHtml += '  <tr>'
            cHtml += '    <td class="tg-0lax">' + ::aErro[nW][2] + '</td>'
            cHtml += '  </tr>'

            If nW == Len(::aErro)

                cHtml += '</tbody>'
                cHtml += '</table>'

            EndIf

        EndIf

    Next nW

    If lFound

        oMail:cTo := ::cEmail
        oMail:cSubject := "TBizagiIntegracaoCredito - Inconsistencias"
        oMail:cBody := cHtml

        oMail:Send()

    EndIf

Return()
