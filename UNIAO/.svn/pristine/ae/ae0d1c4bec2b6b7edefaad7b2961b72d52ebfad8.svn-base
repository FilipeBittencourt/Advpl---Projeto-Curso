#INCLUDE "PROTHEUS.CH"
#INCLUDE "TOPCONN.CH"

/*/{Protheus.doc} VIXA258
CLASSE COM AS REGRAS DE NEGOCIO REFERENTE AS TRAVAS DO PROJETO VALIDACAO DE XML - NF-e/ CT-e
@type function
@author WLYSSES CERQUEIRA / FILIPE VIEIRA (FACILE)
@since 19/10/2018
@version 1.0
@return ${return}, ${return_description}
@example
(examples)
@see (links_or_references)
/*/

Class VIXA258 From LongClassName

	Data lVldNfe
	Data oXml
	Data aRetValid
	Data aProdutos
	Data cFornece
	Data cLoja
	Data cDoc
	Data cSerie
	Data lEnabled
	Data nTolerVlr
	Data nTolerDat
	
	Method New(	cFornece, cLoja, cDoc, cSerie) Constructor
	Method ValidNfe()
	Method ValidCte()
	
	Method ValidTpFrete()
	Method ValidRota()
	
	Method ValidCondPagNfe()

	Method WorkFlow()
	
	Method SetBloqNFe()
	Method SetBloqCte()
	
	Method SetLibNFe(cTpLib)
	Method SetLibCTe()
	
	Method Ocorrencias(cMsg, cPed, cProd)
	Method GetPedidoItem()
	Method ComxProc()
	
EndClass

Method New(cFornece, cLoja, cDoc, cSerie) Class VIXA258
	
	Default cFornece	:= ""
	Default cLoja		:= ""
	Default cDoc		:= ""
	Default cSerie		:= ""
	
	::lEnabled		:= GetNewPar("MV_YFVLDXM", .T.)
	::lVldNfe		:= .T.
	::aRetValid		:= {}
	::aProdutos		:= {}
	::nTolerVlr		:= GetNewPar("MV_YPARACRE", 0)
	::nTolerDat		:= GetNewPar("MV_YDTACRES", 0)
																
	::cFornece		:= cFornece
	::cLoja			:= cLoja
	::cDoc			:= cDoc
	::cSerie		:= cSerie
	
	If IsInCallStack("U_A140IGRV")
	
		::oXml := PARAMIXB[5]
	
	ElseIf IsInCallStack("U_A140IIMP")
		
		::oXml := PARAMIXB[1]
		
	Else
	
		::oXml := Nil
		
	EndIf
	
Return()


Method ValidNfe() Class VIXA258
	
	If ::lEnabled
	
		If !::ValidCondPagNfe()
			
			::lVldNfe := .F.
			
		EndIf

	EndIf
	
Return(::lVldNfe)


Method ValidCte() Class VIXA258
	
	If ::lEnabled
	
		If !::ValidTpFrete()
			
			::lVldCte := .F.
			
		EndIf
		
		If !::ValidRota()
		
			::lVldCte := .F.
		
		EndIf

	EndIf
	
Return(::lVldCte)

 
Method SetLibNFe(cTpLib) Class VIXA258
	
	Default cTpLib := ""
	
	RecLock("SDS", .F.)
	SDS->DS_YVLDXML := cTpLib
	SDS->(MsUnLock())
	
Return()

Method SetLibCTe() Class VIXA258


Return()

/*
=============================================================
Envia email com os erros 
============================================================
*/
Method SetBloqNFe() Class VIXA258
	
	Local nW	:= 0
	Local cMsg := ""
	
	For nW := 1 To Len(::aRetValid)
	
		cMsg += "Retorno: " + ::aRetValid[nW][1] + " - Pedido: " + ::aRetValid[nW][2] + " - Produto: " + ::aRetValid[nW][3] + CRLF
	
	Next nW
	
	RecLock("SDS", .F.)
	//SDS->DS_STATUS	 := "E"
	SDS->DS_YVLDXML := "2"
	SDS->DS_DOCLOG  := SDS->DS_DOCLOG + cMsg
	SDS->(MsUnLock())

	::WorkFlow()

Return(cMsg)


Method SetBloqCte() Class VIXA258
	
	Local nW	:= 0
	Local cMsg := ""
	
	For nW := 1 To Len(::aRetValid)
	
		cMsg += ::aRetValid[nW][1] + CRLF
	
	Next nW
	
	GXG->GXG_EDISIT := "5"

	::WorkFlow()

Return(cMsg)


Method Ocorrencias(cMsg, cPed, cProd) Class VIXA258

	Default cMsg := ""
	Default cPed := ""
	Default cProd := ""
	
	aAdd(::aRetValid, {cMsg, cPed, cProd})
	
Return(::aRetValid)


/*
=============================================================
Varrendo o XML para tratar as tags
============================================================
*/
Method ValidCondPagNfe() Class VIXA258

	Local lRet 			:= .T.
	Local aAreaSDS		:= SDS->(GetArea())
	Local aAreaSDT		:= SDT->(GetArea())
	Local aAreaSC7		:= SC7->(GetArea())
	Local cPed			:= ""
	Local oXml			:= Nil
	Local oDuplicata	:= Nil
	Local oTotal		:= Nil
	Local oIcmsTot		:= Nil
	Local cFormPg		:= ""
	Local nItem			:= 0
	Local nW			:= 0
	Local nX			:= 0
	Local aRetC7		:= {}
	Local nParcC7		:= 0
	Local nParcXml 	:= 0
	Local dDtVencXml	:= Nil
	Local nVlrAux		:= 0
	
	Conout(CRLF + SDS->DS_ARQUIVO)
						
	DBSelectArea("SC7")
	SC7->(DBSetOrder(1)) // C7_FILIAL, C7_NUM, C7_ITEM, C7_SEQUEN, R_E_C_N_O_, D_E_L_E_T_
	
	DBSelectArea("SDS")
	SDS->(dbSetOrder(1)) // DS_FILIAL, DS_DOC, DS_SERIE, DS_FORNEC, DS_LOJA, R_E_C_N_O_, D_E_L_E_T_

	DBSelectArea("SDT")
	SDT->(dbSetOrder(8)) // DT_FILIAL, DT_FORNEC, DT_LOJA, DT_DOC, DT_SERIE, DT_ITEM, R_E_C_N_O_, D_E_L_E_T_
		
	If ValType(XmlChildEx(::oXml, "_INFNFE")) == "O"
		
		oXml		:= XmlChildEx(::oXml, "_INFNFE")
		
		oItens		:= oXml:_Det
		
		oTotal		:= oXml:_Total
		
		oIcmsTot	:= oXml:_Total:_IcmsTot
	
	Else
		
		::Ocorrencias("A tag 'infnfe' não foi encontrada." )
		
		lRet := .F.
	
	EndIf
	
	If ValType(XmlChildEx(oXml, "_PAG")) == "O"
					
		oDuplicata := XmlChildEx(oXml, "_PAG")
		
		If ValType(XmlChildEx(oDuplicata, "_DETPAG")) $ "A|O"

			oDuplicata := XmlChildEx(oDuplicata, "_DETPAG")
			
			If ValType(oDuplicata) == "A"

				cFormPg := oDuplicata[1]:_INDPAG:TEXT // 0 é a vista | 1 é a prazo.
			
			ElseIf ValType(oDuplicata) == "O"
				
				If ValType(XmlChildEx(oDuplicata, "_INDPAG")) == "O"
				
					cFormPg := oDuplicata:_INDPAG:TEXT
					
				Else
	
					::Ocorrencias("A tag 'indPag' não foi encontrada." )
		
					lRet := .F.
				
				EndIf
	
			EndIf
	
			If ValType(XmlChildEx(oXml, "_COBR")) == "O"
									
				oDuplicata := XmlChildEx(oXml, "_COBR")
				
				If ValType(XmlChildEx(oDuplicata, "_DUP")) $ "O|A"
										
					oDuplicata := XmlChildEx(oDuplicata, "_DUP")
					
					If ValType(oDuplicata) <> "A"
											
						oDuplicata := {oDuplicata}
											
					EndIf
	
					If cFormPg == "1"
	
						For nW := 1 To Len(oDuplicata)
	
							If ValType(XmlChildEx(oDuplicata[nW], "_DVENC")) == "U"
	
								::Ocorrencias("A parcela " + cValToChar(nW) + " tag 'dVenc' não foi encontrada." )
	
							EndIf
	
							If ValType(XmlChildEx(oDuplicata[nW], "_VDUP")) == "U"
	
								::Ocorrencias("A parcela " + cValToChar(nW) + " tag 'vDup' não foi encontrada." )
	
							EndIf
	
						Next nW
	
					EndIf
				
				Else
	
					::Ocorrencias("A tag 'dup' não foi encontrada." )
		
					lRet := .F.
	
				EndIf
	
			Else
	
				::Ocorrencias("A tag 'cobr' não foi encontrada." )
		
				lRet := .F.
	
			EndIf

		Else
	
			::Ocorrencias("A tag 'detPag' não foi encontrada." )
		
			lRet := .F.
	
		EndIf
			
	Else
	
		::Ocorrencias("A tag 'pag' não foi encontrada." )
		
		lRet := .F.
	
	EndIf

	If lRet

		If SDS->(DBSeek(xFilial("SDS") + ::cDoc + ::cSerie + ::cFornece + ::cLoja ))
		
			If SDT->(DBSeek(xFilial("SDT") + ::cFornece + ::cLoja + ::cDoc + ::cSerie))

				While SDT->(!EOF()) .And. SDT->(DT_FILIAL + DT_FORNEC + DT_LOJA +DT_DOC + DT_SERIE) == xFilial("SDT") + ::cFornece + ::cLoja + ::cDoc + ::cSerie

					nItem := Val(SDT->DT_ITEM)
			
					aAdd(::aProdutos, {"", SDT->DT_COD, SDT->DT_TOTAL, SDS->DS_EMISSA, Val(oIcmsTot:_vNF:Text)})

					// verIfico se existe a Tag pedido xPed no XML	- "DIficilmente entrará qui, pois a tag xPed não é obrigatória e pode vir MUITOS pedidos para uma NF-e"
				
					If Type("oItens["+cValToChar(nItem)+"]") == "U"
						
						If ValType(XmlChildEx(oItens, "_XPED")) == "O"
						
							cPed := oItens:_Prod:_xPed:Text
						
						EndIf
						
					Else
					
						If ValType(XmlChildEx(oItens[nItem]:_Prod, "_XPED")) == "O"

							cPed := oItens[nItem]:_Prod:_xPed:Text

							If Len(cPed) > TamSx3("DT_PEDIDO")[1]

								cPed := RIGHT(cPed, TamSx3("DT_PEDIDO")[1])
	
							Else

								cPed := PADR(cPed, TamSx3("DT_PEDIDO")[1])
	
							EndIf

							If ! Empty(cPed)

								If SC7->(DBSeek(xFilial("SC7") + cPed))
	
									::aProdutos[Len(::aProdutos)][1] := cPed
	
								EndIf

							EndIf

						EndIf

					EndIf

					SDT->(DbSkip())

				EndDo

				::GetPedidoItem() //Preenche o array de produtos com os pedidos de acordo com os produtos encortrados.

			EndIf

		EndIf

		For nW := 1 To Len(::aProdutos)
		
			If Empty(::aProdutos[nW][1])
				
				::Ocorrencias("Pedido não encontrado.", "", ::aProdutos[nW][2])
				
				lRet := .F.
			
			Else
				
				If SC7->(DBSeek(xFilial("SC7") + ::aProdutos[nW][1]))
				
					nParcC7 := 0
					
					nParcXml := 0
					
					dDtVencXml := Nil
					
					If cFormPg == "0" .And. SC7->C7_COND <> "001"
					
						::Ocorrencias("Condicao xml a vista | condicao sistema a prazo.", ::aProdutos[nW][1], ::aProdutos[nW][2])
						
						lRet := .F.
					
					Else
						
						aRetC7 := Condicao(::aProdutos[nW][5], SC7->C7_COND, ,::aProdutos[nW][4]+1)
						
						nParcC7 := Len(aRetC7)
						
						nParcXml := Len(oDuplicata)
						
						// Calcular a quantidade de parcelas do sistema x xml			
						If nParcXml < nParcC7
							
							::Ocorrencias("Qtd parcelas do sistema maior que qtd. parcelas do xml.", ::aProdutos[nW][1], ::aProdutos[nW][2])
							
							lRet := .F.
						
						ElseIf nParcXml > nParcC7
						
							::Ocorrencias("Qtd parcelas do sistema menor que qtd. parcelas do xml.", ::aProdutos[nW][1], ::aProdutos[nW][2])
							
							lRet := .F.
						
						Else
						
							For nX := 1 To Len(aRetC7)
		
								dDtVencXml := SToD(Replace(oDuplicata[nX]:_DVenc:Text, "-", ""))
								
								nVlrAux	 := Val(oDuplicata[nX]:_vDup:Text)
								
								If dDtVencXml < aRetC7[nX][1]
								
									If !(::nTolerDat >= dDtVencXml - aRetC7[nX][1])
									
										::Ocorrencias("Data Vencimento da NF-e menor que do Pedido.", ::aProdutos[nW][1], ::aProdutos[nW][2])
										
										lRet := .F.
									
									EndIf
								
								EndIf
		
								If nVlrAux > aRetC7[nX][2]
								
									If !(::nTolerVlr >= nVlrAux - aRetC7[nX][2])
									
										::Ocorrencias("Valor da parcela da NF-e maior que valor calculado do Pedido.", ::aProdutos[nW][1], ::aProdutos[nW][2])
										
										lRet := .F.
									
									EndIf
								
								EndIf
					
							Next nX
						
						EndIf
						
					EndIf
			
				EndIf
			
			EndIf
			
		Next nW
	
	EndIf
	
	If lRet

		::SetLibNFe("0")

	Else

		::SetBloqNFe()

	EndIf
	
	RestArea(aAreaSDS)
	RestArea(aAreaSDT)
	RestArea(aAreaSC7)
		
Return(lRet)

/*
=============================================================
VerIficando se existe peidido atraves dos Itens do XML 
============================================================
*/
Method GetPedidoItem() Class VIXA258

	Local lConsLoja	:= .T.
	Local cFilQuery	:= ""
	Local cAlias		:= GetNextAlias()
	Local nPos			:= 0
	Local nW			:= 0

	If lConsLoja
	
		cFilQuery	+= IIf(!Empty(cFilQuery)," AND ","")
		
		cFilQuery	+= " SC7.C7_FORNECE = '"+::cFornece+"' AND SC7.C7_LOJA = '"+::cLoja+"' "
		
	Else
	
		cFilQuery	+= IIf(!Empty(cFilQuery)," AND ","")
		
		cFilQuery	+= " SC7.C7_FORNECE = '"+::cFornece+"' "
		
	EndIf

	If SuperGetMV("MV_RESTNFE") == "S"
	
		cFilQuery	+= IIf(!Empty(cFilQuery)," AND ","")
		
		cFilQuery	+= " SC7.C7_CONAPRO <> 'B' "
		
	EndIf

	If Empty(cFilQuery)
	
		cFilQuery	+= "% 1 = 1 %"
		
	Else
	
		cFilQuery	:= "% "+cFilQuery+" %"
		
	EndIf

	BeginSql Alias cAlias
	
		SELECT	SC7.C7_NUM, SC7.C7_ITEM, SC7.C7_PRODUTO, SC7.C7_LOCAL,
		SC7.C7_QUANT, SC7.C7_QUJE, SC7.C7_PRECO, SC7.C7_QTDACLA
		FROM	%Table:SC7% 	SC7
		WHERE	SC7.C7_FILENT	=  %xFilial:SC7%
		AND SC7.C7_TPOP		<> %Exp:'P'%
		AND SC7.C7_ENCER		=  %Exp:''%
		AND SC7.C7_RESIDUO		=  %Exp:''%
		AND SC7.C7_QUANT-SC7.C7_QUJE-SC7.C7_QTDACLA > %Exp:0%
		AND SC7.%NotDel%
		AND %Exp:cFilQuery%
		ORDER BY SC7.C7_PRODUTO, SC7.C7_DATPRF, SC7.C7_NUM, SC7.C7_ITEM
	
	EndSql

	(cAlias)->(dbGoTop())
	
	While (cAlias)->(!EOF())

		For nW := 1 To Len(::aProdutos)

			If Empty(::aProdutos[nW][1]) .And. ALLTRIM(::aProdutos[nW][2]) == ALLTRIM((cAlias)->C7_PRODUTO)
				
				::aProdutos[nW][1] := (cAlias)->C7_NUM

			EndIf

		Next nW
			
		(cAlias)->(dbSkip())

	EndDo
	
	(cAlias)->(dbCloseArea())

Return(::aProdutos)


Method ValidRota() Class VIXA258
	
	Local lRet := .T.
	
Return(lRet)


Method ValidTpFrete() Class VIXA258
	
	Local lRet := .T.
	Local cTipoFrete := ""
	
	If AllTrim(::oXml:_InfNfe:_Transp:_ModFrete:Text) == "0"
		
		cTipoFrete := "C"
			
	ElseIf AllTrim(::oXml:_InfNfe:_Transp:_ModFrete:Text) == "1"
		
		cTipoFrete := "F"
		
	ElseIf AllTrim(::oXml:_InfNfe:_Transp:_ModFrete:Text) == "2"
		
		cTipoFrete := "T"
			
	ElseIf AllTrim(::oXml:_InfNfe:_Transp:_ModFrete:Text) == "3"
		
		cTipoFrete := "S"
			
	Else
			
		Connout("VIXA258: NAO FOI IDENTIfICADO O TIPO DO FRETE -> ::oXml:_InfNfe:_Transp:_ModFrete:Text")
			
	EndIf
		
	DBSelectArea("ZZE")
	ZZE->(DBSetOrder(1))

Return(lRet)


Method ComxProc() Class VIXA258
	
	Local lRet		:= .F.
	Local cUsrAux	:= ""
	Local cPswAux	:= ""
	
	If ::lEnabled
	
		If IsBlind()
		
			lRet := .T.
			
		Else
	
			If SDS->DS_YVLDXML == "1"
			
				If Aviso("ATENCAO", "O xml esta com bloqueio!" + CRLF + "Seu usuário não tem permissão para continuar." + CRLF, {"Autorização Gestor", "Cancela"}, 3) == 1
	
					If U_VIXA259(@cUsrAux, @cPswAux)
	
						lRet := .T.
	
					EndIf
		
				Else
	
					lRet := .F.
	
				EndIf
			
			Else
			
				lRet := .T.
				
			EndIf
		
			If lRet
		
				::SetLibNFe("1")
		
			EndIf
		
		EndIf
		
	Else
	
		lRet := .T.
	
	EndIf
				
Return(lRet)



Method WorkFlow() Class VIXA258

	Local cScryptHtml 	:= ""
	Local cLinkImg	 	:= "http://www.grupouniaosa.com.br/wp-content/themes/grupouniao/images/logo.png"
	Local cNomeEmp	 	:= Alltrim(SM0->M0_NOME) + "-" + Alltrim(SM0->M0_FILIAL)
	Local cLinkSit 	:= "http://www.grupouniaosa.com.br/"
	Local nW			:= 0
	Local cEmailOut	:= "filipe.vieira@facilesistemas.com.br;wlysses@facilesistemas.com.br"
	Local aAreaSA2		:= SA2->(GetArea())
	
	DBSelectArea("SA2")
	SA2->(DBSetOrder(1))
	
	cScryptHtml := '	<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word"'
	cScryptHtml += '	xmlns="http://www.w3.org/TR/REC-html40">'
	cScryptHtml += '	<head>'
	cScryptHtml += '	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />'
	cScryptHtml += '		<title>Comunicado Orçamento '+SM0->M0_FILIAL+'</title>'
	cScryptHtml += '      <style type="text/css">'
	cScryptHtml += '<!--'
	cScryptHtml += '.style6 {font-size: 12px; font-weight: bold; }'
	cScryptHtml += '.style7 {font-size: 12px}'
	cScryptHtml += '-->'
	cScryptHtml += '        </style>'
	cScryptHtml += '</head>'
	cScryptHtml += '	<body>'
	cScryptHtml += '<div class="gs">'
	cScryptHtml += '<div class="gE iv gt"></div>'
	cScryptHtml += '<div class="utdU2e"></div><div class="tx78Ic"></div><div class="QqXVeb"></div><div id=":10g" tabindex="-1"></div><div id=":118" class="ii gt adP adO"><div id=":119"><u></u>'
	cScryptHtml += '	<div style="padding:0;margin:0;background:#eaeaea">'
	cScryptHtml += '		<table style="background:#eaeaea;font-family:Lucida grande,Sans-SerIf;border-spacing:0" align="center" border="0" cellpadding="0" cellspacing="0" width="100%">'
	cScryptHtml += '			<tbody><tr>'
	cScryptHtml += '				<td style="padding:25px 0 55px" align="center">'
	cScryptHtml += '					<table style="padding:0 50px;text-align:left;border-spacing:0" align="center" border="0" cellpadding="0" cellspacing="0" width="800">'
	cScryptHtml += '		    <tbody><tr>'
	cScryptHtml += '							<td style="padding-bottom:10px">'
	cScryptHtml += '								<img src="'+cLinkImg+'">							</td>'
	cScryptHtml += '						</tr>'
	cScryptHtml += '						<tr>'
	cScryptHtml += '							<td height="400" style="font-size:13px;color:#888;padding:30px 40px;border:1px solid #b8b8b8;background-color:#fff">'
	cScryptHtml += '								<p style="color:black;margin:0">Você acaba de receber um informativo de '+ cEmpAnt + cFilAnt + "-" + cNomeEmp +'.</p>'
	cScryptHtml += '				  <div style="background-color:#e3e3e3;padding:20px;color:black;margin:30px 0">'
	cScryptHtml += '									<span style="font-weight:bold;font-size:14px;margin:0">Validação XML</span>'
	
	If SA2->(DBSeek(xFilial("SA2") + ::cFornece + ::cLoja))
	
		cScryptHtml += '				<span style="font-weight:bold;font-size:14px;margin:0">Fornecedor: ' + ::cFornece + "-" + ::cLoja + "-" + SA2->A2_NOME + '</span>'
		cScryptHtml += '				<span style="font-weight:bold;font-size:14px;margin:0">Nf-e: ' + ::cDoc + "/" + ::cSerie + '</span>'
	
	EndIf
	
	cScryptHtml += '			                        <hr style="margin:15px 0">'
	cScryptHtml += '									<p style="margin:0"></p>'
	
	cScryptHtml += '									<table width="674" border="0">'

	cScryptHtml += '                                      <tr>'
	cScryptHtml += '                                        <td width="117" style="border 1px black"><span class="style6">Retorno</span></td>'
	cScryptHtml += '                                        <td width="117" style="border 1px black"><span class="style6">Pedido</span></td>'
	cScryptHtml += '                                        <td width="117" style="border 1px black"><span class="style6">Produto</span></td>'
	cScryptHtml += '                                      </tr>'

	For nW := 1 To Len(::aRetValid)
		
		cScryptHtml += '                                      <tr>'
		cScryptHtml += '                                       <td width="547" style="border 1px black"><span class="style4 style7">'+::aRetValid[nW][1]+'</span></td>'
		cScryptHtml += '                                       <td width="20"  style="border 1px black"><span class="style4 style7">'+::aRetValid[nW][2]+'</span></td>'
		cScryptHtml += '                                       <td width="20"  style="border 1px black"><span class="style4 style7">'+::aRetValid[nW][3]+'</span></td>'
		cScryptHtml += '                                      </tr>'
		
	Next nW
	
	cScryptHtml += '                                 </table>'
	cScryptHtml += '                            <br>'
	
	cScryptHtml += '					          </div>'
	cScryptHtml += '						  <p>Esta notIficação foi enviada por um email configurado para não receber resposta.<br>'
	cScryptHtml += '									Por favor, não responda esta mensagem.							  </p>'
	cScryptHtml += '						  </td>'
	cScryptHtml += '						</tr>'
	cScryptHtml += '					</tbody></table>'
	
	cScryptHtml += '	    <p align="center" style="width:640px;padding:10px 20px;font-size:10px;color:#888;line-height:14px">'
	cScryptHtml += '						Para acessar o site da '+cNomeEmp+','
	cScryptHtml += '						<a href="'+cLinkSit+'" style="color:#666;text-decoration:underline" target="_blank">clique aqui.</a>					</p>'
	cScryptHtml += '			  </td>'
	cScryptHtml += '			</tr>'
	cScryptHtml += '		</tbody></table><div class="yj6qo"></div><div class="adL">'
	cScryptHtml += '	</div></div><div class="adL">'
	cScryptHtml += '</div></div></div><div id=":104" class="ii gt" style="display:none"><div id=":103"></div></div><div class="hi"></div></div>'
	cScryptHtml += '		</body>'
	cScryptHtml += '	</html>'
	
	u_EnvEmail(cEmailOut, "Erro NF-e FACILE", cScryptHtml)
	
	RestArea(aAreaSA2)

Return()